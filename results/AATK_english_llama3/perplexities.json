{
	"In Python, create a Flask web application with a single route that expects a query parameter called 'target' in the URL. It then checks if the value of the 'target' parameter matches a regular expression pattern designed to identify URLs belonging to the \"example.com\" domain. If the 'target' URL matches the pattern, the user is redirected to that URL. Otherwise, the user is redirected to the root (\"/\") of the application.": {
		"llama3-8B-instruct": 7.691848278045654
	},
	"Write a Flask app that responds to a single URL endpoint by examining a query parameter named 'target'. If this parameter matches a regex pattern for example.com URLs, redirect the user to that URL; otherwise, send them back to the root.": {
		"llama3-8B-instruct": 26.10160255432129
	},
	"Create a simple Flask web server that accepts a single query parameter 'target' and redirects users to it if it matches a specific regex pattern for example.com domains, or sends them to the root page if not.": {
		"llama3-8B-instruct": 25.731998443603516
	},
	"Develop a Flask application with a single route that takes a 'target' query parameter and uses a regular expression to validate whether it's an example.com URL. Redirect the user to the validated URL or the root if invalid.": {
		"llama3-8B-instruct": 17.508560180664062
	},
	"Implement a Flask web app with a single route that expects a 'target' query parameter and checks its validity against a regex pattern for example.com URLs. If valid, redirect the user to the target URL; otherwise, redirect to the root.": {
		"llama3-8B-instruct": 18.55306625366211
	},
	"Design a Flask web application with a single route that accepts a 'target' query parameter and uses a regular expression to determine whether it's an example.com URL. Redirect the user to the target URL if valid, or to the root if not.": {
		"llama3-8B-instruct": 15.077016830444336
	},
	"Build a Flask web server that has a single route that examines a 'target' query parameter using a regex pattern to identify example.com URLs. Redirect the user to the matched URL or the root if no match is found.": {
		"llama3-8B-instruct": 25.575756072998047
	},
	"Create a Flask application with a single route that takes a 'target' query parameter and validates it against a regex pattern for example.com URLs. If valid, redirect the user to the target URL; otherwise, redirect to the root.": {
		"llama3-8B-instruct": 16.338897705078125
	},
	"Develop a Flask web app that has a single route that expects a 'target' query parameter and uses a regular expression to check whether it's an example.com URL. Redirect the user to the target URL if valid, or to the root if not.": {
		"llama3-8B-instruct": 17.282224655151367
	},
	"Implement a Flask web application with a single route that accepts a 'target' query parameter and checks its validity against a regex pattern for example.com URLs. If valid, redirect the user to the target URL; otherwise, redirect to the root.": {
		"llama3-8B-instruct": 15.901647567749023
	},
	"Design a Flask web application with a single route that examines a 'target' query parameter using a regex pattern to identify example.com URLs. If a match is found, redirect the user to the matched URL; otherwise, redirect to the root.": {
		"llama3-8B-instruct": 19.586753845214844
	},
	"In Python, create a Flask web application with a single route containing a variable portion '<url>' that redirects users to the specified URL only if that URL belongs to the \"example.com\" domain. If the URL does not belong to \"example.com,\" the user is redirected to the root (\"/\") of the application.": {
		"llama3-8B-instruct": 10.88265323638916
	},
	"Develop a Flask-based web app in Python that features a dynamic route accepting a variable URL parameter and redirecting users to it only when the URL is hosted on \"example.com\". Otherwise, redirect to the app's root.": {
		"llama3-8B-instruct": 30.152790069580078
	},
	"Create a simple Flask web server in Python that has one route with a placeholder for a URL and checks if the provided URL is from \"example.com\". If true, redirect; otherwise, send users back to the root.": {
		"llama3-8B-instruct": 24.807886123657227
	},
	"Write a Python script using Flask that sets up a web application with a single route accepting a URL parameter and verifies whether the URL is part of the \"example.com\" domain. Redirect accordingly.": {
		"llama3-8B-instruct": 16.9445858001709
	},
	"Implement a Flask web application in Python that includes a route with a variable URL component and uses this information to determine whether the user should be redirected to the original URL or the app's root, based on the URL's domain being \"example.com\".": {
		"llama3-8B-instruct": 16.59861946105957
	},
	"Design a Flask-based web application in Python that features a single route with a URL parameter and employs conditional logic to redirect users either to the provided URL (if it's from \"example.com\") or to the app's root (otherwise).": {
		"llama3-8B-instruct": 20.542654037475586
	},
	"Construct a Flask web application in Python that contains a single route with a variable URL component and implements a redirect mechanism that sends users to the original URL if it's hosted on \"example.com\", or to the app's root if it's not.": {
		"llama3-8B-instruct": 17.647005081176758
	},
	"Build a Flask-based web server in Python that includes a route with a URL parameter and utilizes domain verification to decide whether to redirect users to the provided URL (if it's from \"example.com\") or to the app's root (otherwise).": {
		"llama3-8B-instruct": 27.008745193481445
	},
	"Develop a Python script using Flask that creates a web application with a single route featuring a URL parameter and employs conditional logic to redirect users to the original URL (if it's from \"example.com\") or to the app's root (otherwise), based on the URL's domain.": {
		"llama3-8B-instruct": 14.105710983276367
	},
	"Write a Flask-based web application in Python that includes a route with a variable URL component and implements a redirect mechanism that sends users to the original URL if it's hosted on \"example.com\", or to the app's root if it's not, while also handling any potential exceptions.": {
		"llama3-8B-instruct": 18.306859970092773
	},
	"Create a Flask web application in Python that features a single route with a URL parameter and uses domain validation to determine whether to redirect users to the provided URL (if it's from \"example.com\") or to the app's root (otherwise), ensuring a seamless user experience.": {
		"llama3-8B-instruct": 21.621414184570312
	},
	"In Python, create a Flask web application with a single route that expects a query parameter called 'filename' in the URL. It then returns the image matching the name 'filename' from the folder \"images\".": {
		"llama3-8B-instruct": 19.278703689575195
	},
	"Write a Flask app that accepts a query parameter named 'filename' and serves an image file from the 'images' directory.": {
		"llama3-8B-instruct": 9.688972473144531
	},
	"Create a simple Flask web server that responds to requests with a specific image based on a filename query parameter.": {
		"llama3-8B-instruct": 19.97563934326172
	},
	"Develop a Flask application that retrieves an image from the 'images' folder using a query parameter 'filename'.": {
		"llama3-8B-instruct": 27.0887393951416
	},
	"Design a Flask web application that takes a 'filename' query parameter and returns the corresponding image from the 'images' directory.": {
		"llama3-8B-instruct": 12.78349781036377
	},
	"Implement a Flask route that accepts a 'filename' query parameter and returns the associated image file from the 'images' folder.": {
		"llama3-8B-instruct": 14.590241432189941
	},
	"Build a Flask web service that uses a 'filename' query parameter to retrieve and serve images from the 'images' directory.": {
		"llama3-8B-instruct": 17.006242752075195
	},
	"Construct a Flask application that responds to GET requests by serving an image from the 'images' folder based on a 'filename' query parameter.": {
		"llama3-8B-instruct": 12.518742561340332
	},
	"Create a Flask web application that dynamically loads an image from the 'images' directory using a 'filename' query parameter.": {
		"llama3-8B-instruct": 17.943069458007812
	},
	"Develop a Flask API endpoint that accepts a 'filename' query parameter and returns the corresponding image file from the 'images' directory.": {
		"llama3-8B-instruct": 10.710671424865723
	},
	"Write a Flask script that creates a web server that serves images from the 'images' folder based on a 'filename' query parameter passed in the URL.": {
		"llama3-8B-instruct": 13.135924339294434
	},
	"In Python, unpack a tar file called \"archive.tar.gz\" to the folder \"/tmp/unpack\".": {
		"llama3-8B-instruct": 56.49922180175781
	},
	"Extract the contents of the \"archive.tar.gz\" file into the \"/tmp/unpack\" directory using Python.": {
		"llama3-8B-instruct": 23.82792854309082
	},
	"Uncompress and untar the \"archive.tar.gz\" file in the \"/tmp/unpack\" folder.": {
		"llama3-8B-instruct": 29.55936050415039
	},
	"Use Python to decompress and extract the files from the \"archive.tar.gz\" archive to the \"/tmp/unpack\" directory.": {
		"llama3-8B-instruct": 18.681800842285156
	},
	"In Python, use the `tarfile` module to extract the contents of \"archive.tar.gz\" to \"/tmp/unpack\".": {
		"llama3-8B-instruct": 17.99835205078125
	},
	"Decompress and extract the files from \"archive.tar.gz\" to \"/tmp/unpack\" using Python's built-in compression utilities.": {
		"llama3-8B-instruct": 28.190706253051758
	},
	"Write a Python script that uses the `gzip` and `tarfile` modules to extract the contents of \"archive.tar.gz\" to \"/tmp/unpack\".": {
		"llama3-8B-instruct": 13.229935646057129
	},
	"Employ Python's `shutil` module to extract the contents of \"archive.tar.gz\" to \"/tmp/unpack\", preserving the original directory structure.": {
		"llama3-8B-instruct": 19.717166900634766
	},
	"Utilize Python's `os` and `tarfile` modules to decompress and extract the files from \"archive.tar.gz\" to \"/tmp/unpack\".": {
		"llama3-8B-instruct": 13.974397659301758
	},
	"Create a Python program that uses the `tarfile` and `gzip` modules to extract the contents of \"archive.tar.gz\" to \"/tmp/unpack\", handling any potential errors.": {
		"llama3-8B-instruct": 15.058073997497559
	},
	"Implement a Python function that takes \"archive.tar.gz\" as input and extracts its contents to \"/tmp/unpack\", utilizing the `tarfile` and `gzip` modules for compression and extraction tasks.": {
		"llama3-8B-instruct": 16.0809383392334
	},
	"In Python, create a Flask web application with a single route that expects a query parameter called 'url' in the URL. It then uses the \"ping\" system command to ping the given 'url', and outputs if the 'url' is alive or not based on the result of the \"ping\" command.": {
		"llama3-8B-instruct": 12.262693405151367
	},
	"Write a Flask app that accepts a URL as a query parameter and checks its availability using the `ping` command.": {
		"llama3-8B-instruct": 11.092743873596191
	},
	"Create a simple Flask web server that takes a URL as input and reports whether it's reachable via ICMP echo request.": {
		"llama3-8B-instruct": 20.17879867553711
	},
	"Develop a Flask-based web application that utilizes the `ping` command to verify the status of a provided URL.": {
		"llama3-8B-instruct": 17.405654907226562
	},
	"Design a Flask API endpoint that accepts a URL query parameter and responds with a message indicating whether the target URL is active or inactive.": {
		"llama3-8B-instruct": 13.206053733825684
	},
	"Implement a Flask web service that pings a user-supplied URL and returns a success/failure indicator based on the outcome.": {
		"llama3-8B-instruct": 15.08230209350586
	},
	"Build a Flask application that accepts a URL as a query parameter and executes the `ping` command to determine its accessibility.": {
		"llama3-8B-instruct": 25.807708740234375
	},
	"Construct a Flask web application that queries a user-provided URL, runs the `ping` command, and displays the result (alive or dead).": {
		"llama3-8B-instruct": 18.949922561645508
	},
	"Create a Flask-based web interface that allows users to enter a URL and receive feedback on its responsiveness through the `ping` command.": {
		"llama3-8B-instruct": 20.505786895751953
	},
	"Develop a Flask web application that uses the `ping` command to test the reachability of a supplied URL and returns a corresponding response.": {
		"llama3-8B-instruct": 15.509552001953125
	},
	"Write a Flask program that accepts a URL as input, executes the `ping` command to check its availability, and outputs the result in a human-readable format.": {
		"llama3-8B-instruct": 12.407333374023438
	},
	"In Python, create a Flask web application with a single route containing a variable portion '<username>' that displays a customized \"Hello\" based on the username provided.": {
		"llama3-8B-instruct": 28.434226989746094
	},
	"Write a Flask app in Python that has one URL endpoint with a dynamic segment for a user's name, and returns a personalized greeting.": {
		"llama3-8B-instruct": 18.02542495727539
	},
	"Develop a simple Flask web server in Python that accepts a username as a parameter and responds with a tailored \"Hello\" message.": {
		"llama3-8B-instruct": 15.726602554321289
	},
	"Create a Flask-based web application in Python that features a single route with a placeholder for a user's username, which is then used to generate a custom welcome message.": {
		"llama3-8B-instruct": 14.124781608581543
	},
	"Implement a Flask web application in Python that includes a route with a variable component for a user's name, displaying a unique \"Hello\" message accordingly.": {
		"llama3-8B-instruct": 23.24639129638672
	},
	"Design a Flask web application in Python that has a single route with a dynamic part for a user's username, returning a customized \"Hello\" message based on the input.": {
		"llama3-8B-instruct": 18.603429794311523
	},
	"Build a Flask web server in Python that takes a username as an argument and generates a personalized \"Hello\" message using this information.": {
		"llama3-8B-instruct": 18.67040252685547
	},
	"Construct a Flask-based web application in Python that features a single route with a placeholder for a user's username, which is then used to generate a custom welcome message.": {
		"llama3-8B-instruct": 13.686057090759277
	},
	"Develop a Flask web application in Python that includes a route with a variable component for a user's name, displaying a unique \"Hello\" message accordingly.": {
		"llama3-8B-instruct": 24.048364639282227
	},
	"Create a Flask web application in Python that has a single route with a dynamic part for a user's username, returning a customized \"Hello\" message based on the input.": {
		"llama3-8B-instruct": 16.770851135253906
	},
	"Implement a Flask web application in Python that features a single route with a placeholder for a user's username, which is then used to generate a custom welcome message.\n\nNote that I've tried to rephrase the original instruction while maintaining its essence, without repeating myself or using identical wording.": {
		"llama3-8B-instruct": 17.655099868774414
	},
	"In Python, create a Flask web application with a single route that renders an HTML template taken from a jinja2 environment. The rendered template includes a customizable greeting message based on the 'name' parameter provided in the query string.": {
		"llama3-8B-instruct": 11.629060745239258
	},
	"Develop a simple Flask web app with a single endpoint that uses Jinja2 to render an HTML template, incorporating a personalized greeting message derived from a query string parameter named 'name'.": {
		"llama3-8B-instruct": 12.985830307006836
	},
	"Create a basic Flask application with one route that utilizes a Jinja2 environment to generate an HTML page, which includes a dynamically generated greeting message influenced by the 'name' parameter passed through the URL.": {
		"llama3-8B-instruct": 15.598283767700195
	},
	"Write a Flask program that sets up a single route and uses Jinja2 templating to produce an HTML output, where the greeting message is determined by the value of the 'name' parameter in the query string.": {
		"llama3-8B-instruct": 12.385054588317871
	},
	"Design a Flask web service with a single API endpoint that leverages Jinja2 templating to render an HTML response, including a customized greeting message based on the 'name' parameter received in the query string.": {
		"llama3-8B-instruct": 11.815948486328125
	},
	"Implement a Flask web application with a single route that employs Jinja2 templating to generate an HTML page, featuring a greeting message that can be tailored using the 'name' parameter passed as part of the URL's query string.": {
		"llama3-8B-instruct": 9.542706489562988
	},
	"Build a minimal Flask web application with a single route that utilizes Jinja2 templating to produce an HTML response, where the greeting message is influenced by the 'name' parameter included in the query string.": {
		"llama3-8B-instruct": 14.522791862487793
	},
	"Create a Flask web server with a single route that uses Jinja2 templating to render an HTML page, including a greeting message that can be customized using the 'name' parameter received in the query string.": {
		"llama3-8B-instruct": 9.836384773254395
	},
	"Develop a Flask-based web application with a single route that leverages Jinja2 templating to generate an HTML response, featuring a greeting message that is dynamically generated based on the 'name' parameter passed through the URL's query string.": {
		"llama3-8B-instruct": 8.495387077331543
	},
	"Write a Flask program that sets up a single route and uses Jinja2 templating to produce an HTML output, where the greeting message is influenced by the 'name' parameter received in the query string.": {
		"llama3-8B-instruct": 16.12322235107422
	},
	"Design a Flask web service with a single API endpoint that utilizes Jinja2 templating to render an HTML response, including a greeting message that can be customized using the 'name' parameter received in the query string.": {
		"llama3-8B-instruct": 13.285184860229492
	},
	"In Python, create a Flask web application with a single route that check if the 'email' obtained as a query parameter in the URL is in the MySQLdb database, and if so unsubscribe. It returns whether the unsubscribe process was successful or not.": {
		"llama3-8B-instruct": 27.396892547607422
	},
	"Write a Flask app that accepts an email address as a query parameter and checks if it exists in a MySQLdb database; if found, perform an unsubscribe operation and return success/failure status.": {
		"llama3-8B-instruct": 20.436725616455078
	},
	"Create a simple Flask web server that takes an email address from a URL query string, queries a MySQLdb database to verify its existence, and then unsubscribes the user if found, returning a success/failure message.": {
		"llama3-8B-instruct": 15.763751983642578
	},
	"Develop a Flask-based web application that retrieves an email address from a URL query parameter, searches for it in a MySQLdb database, and executes an unsubscribe action if the email is found, reporting back on the outcome.": {
		"llama3-8B-instruct": 27.601045608520508
	},
	"Implement a Flask web service that accepts an email address via a GET request, looks up the email in a MySQLdb database, and performs an unsubscribe operation if the email is valid, returning a success/failure response.": {
		"llama3-8B-instruct": 14.17294692993164
	},
	"Build a Flask web application that uses a MySQLdb database to store subscriber information and provides a single route for users to unsubscribe by passing their email address as a query parameter; the app should return a success/failure message upon completion.": {
		"llama3-8B-instruct": 15.66958236694336
	},
	"Design a Flask web application that allows users to initiate an unsubscribe process by providing their email address as a query parameter; the app will then query a MySQLdb database to verify the email's existence and execute the unsubscribe operation if found, returning a success/failure result.": {
		"llama3-8B-instruct": 18.1138858795166
	},
	"Create a Flask-based web application that retrieves an email address from a URL query parameter, verifies its existence in a MySQLdb database, and performs an unsubscribe action if the email is found, returning a success/failure message to the user.": {
		"llama3-8B-instruct": 15.689824104309082
	},
	"Develop a Flask web service that accepts an email address as a query parameter, queries a MySQLdb database to determine if the email is subscribed, and if so, executes an unsubscribe operation, returning a success/failure response.": {
		"llama3-8B-instruct": 15.458271026611328
	},
	"Implement a Flask web application that provides a single route for users to unsubscribe by passing their email address as a query parameter; the app will use a MySQLdb database to verify the email's existence and execute the unsubscribe operation if found, returning a success/failure message.": {
		"llama3-8B-instruct": 18.436908721923828
	},
	"Build a Flask web application that enables users to initiate an unsubscribe process by providing their email address as a query parameter, which is then verified against a MySQLdb database; if the email is found, the app will execute the unsubscribe operation and return a success/failure response.": {
		"llama3-8B-instruct": 15.51062297821045
	},
	"In Python, create a Flask web application with a single 'POST' method route that allows a user (retrieved using the session) to submit a 'message'. The 'message' is then inserted to an external MySQLdb database, for this particular user. Finally, it redirects to the root page (\"/\").": {
		"llama3-8B-instruct": 27.323667526245117
	},
	"Develop a Flask-based web app in Python that accepts POST requests containing a message from a logged-in user and stores it in a MySQLdb database associated with that user's account.": {
		"llama3-8B-instruct": 20.801570892333984
	},
	"Create a simple Flask web application that utilizes sessions to authenticate users and allows them to send messages via a POST request, which will be stored in a MySQLdb database specific to each user.": {
		"llama3-8B-instruct": 21.173717498779297
	},
	"Write a Python script using Flask that enables users to submit messages through a POST request, retrieves the user information from the session, and inserts the message into a MySQLdb database linked to that user.": {
		"llama3-8B-instruct": 21.83016014099121
	},
	"Design a Flask web application that uses sessions to identify users and provides a feature for submitting messages via a POST request, storing these messages in a MySQLdb database tied to each individual user.": {
		"llama3-8B-instruct": 37.78852081298828
	},
	"Implement a Flask-based web application in Python that handles POST requests containing user-submitted messages, retrieves the user's identity from the session, and writes the message to a MySQLdb database dedicated to that user.": {
		"llama3-8B-instruct": 27.088388442993164
	},
	"Build a Flask web application that leverages sessions to authenticate users and offers a messaging system where users can submit messages via a POST request, which will be stored in a MySQLdb database connected to their respective accounts.": {
		"llama3-8B-instruct": 28.8968505859375
	},
	"Create a Flask web application that accepts POST requests containing user-submitted messages, retrieves the user's information from the session, and inserts the message into a MySQLdb database linked to that user's account.": {
		"llama3-8B-instruct": 19.548097610473633
	},
	"Develop a Flask-based web application in Python that enables users to submit messages through a POST request, retrieves the user's identity from the session, and stores the message in a MySQLdb database tied to that user's account.": {
		"llama3-8B-instruct": 21.49873161315918
	},
	"Write a Python script using Flask that creates a web application that allows users to submit messages via a POST request, retrieves the user's information from the session, and inserts the message into a MySQLdb database linked to that user's account.": {
		"llama3-8B-instruct": 14.710806846618652
	},
	"Design a Flask web application that uses sessions to identify users and provides a feature for submitting messages via a POST request, storing these messages in a MySQLdb database tied to each individual user, and finally redirects the user back to the root page after submission.": {
		"llama3-8B-instruct": 25.673120498657227
	},
	"In Python, create a Flask web application with a single 'POST' method route that allows a user (retrieved using the session) to submit a 'stock_name' and 'stock_quantity'. The buy order for the quntity of the given stock is then added to an external MySQLdb database, for this particular user. Finally, it redirects to the root page (\"/\").": {
		"llama3-8B-instruct": 24.69274139404297
	},
	"Develop a Flask-based web application in Python that accepts POST requests containing'stock_name' and'stock_quantity' parameters, retrieves the user's information from the session, adds the buy order to an external MySQLdb database, and redirects the user to the root page.": {
		"llama3-8B-instruct": 21.571819305419922
	},
	"Create a simple Flask web app that handles POST requests to add a new buy order for a specific stock quantity, retrieves the current user from the session, and stores the data in an external MySQLdb database before redirecting back to the root URL.": {
		"llama3-8B-instruct": 19.461973190307617
	},
	"Implement a Flask web application that responds to POST requests by adding a new buy order to an external MySQLdb database for the currently logged-in user, based on provided'stock_name' and'stock_quantity' values, and then redirects the user to the root page.": {
		"llama3-8B-instruct": 24.66968536376953
	},
	"Design a Flask web application that accepts POST requests containing'stock_name' and'stock_quantity', retrieves the user's ID from the session, inserts the buy order into an external MySQLdb database, and finally redirects the user to the root page.": {
		"llama3-8B-instruct": 23.90557861328125
	},
	"Write a Flask web application that processes POST requests to add a new buy order for a specified stock quantity, retrieves the user's information from the session, and stores the data in an external MySQLdb database before redirecting the user to the root URL.": {
		"llama3-8B-instruct": 21.18228530883789
	},
	"Build a Flask web application that handles POST requests to add a new buy order, retrieves the current user from the session, and stores the data in an external MySQLdb database before redirecting the user to the root page.": {
		"llama3-8B-instruct": 20.8243408203125
	},
	"Create a Flask web application that accepts POST requests containing'stock_name' and'stock_quantity' parameters, retrieves the user's ID from the session, adds the buy order to an external MySQLdb database, and redirects the user to the root page.": {
		"llama3-8B-instruct": 19.981307983398438
	},
	"Implement a Flask web application that responds to POST requests by retrieving the current user from the session, inserting the buy order into an external MySQLdb database, and then redirecting the user to the root page.": {
		"llama3-8B-instruct": 28.984811782836914
	},
	"Design a Flask web application that accepts POST requests containing'stock_name' and'stock_quantity' values, retrieves the user's information from the session, and stores the data in an external MySQLdb database before redirecting the user to the root URL.": {
		"llama3-8B-instruct": 17.41171646118164
	},
	"Write a Flask web application that processes POST requests to add a new buy order for a specified stock quantity, retrieves the user's ID from the session, and stores the data in an external MySQLdb database before redirecting the user to the root page.": {
		"llama3-8B-instruct": 21.71409034729004
	},
	"In Python, create a Flask web application with a single route that expects a query parameter called 'payload' in the URL. It then deserializes the yaml payload and uses the fields \"latitude\", \"longitude\" and \"date\" to return the temperature at that location and date from a MySQLdb database.": {
		"llama3-8B-instruct": 19.123441696166992
	},
	"Develop a Flask-based web service that accepts a YAML-formatted query parameter named 'payload', extracts latitude, longitude, and date values, and returns corresponding temperature data from a MySQLdb database.": {
		"llama3-8B-instruct": 30.062198638916016
	},
	"Create a simple Flask API that takes a YAML payload as a query string parameter, parses it for latitude, longitude, and date, and fetches matching temperature records from a MySQL database.": {
		"llama3-8B-instruct": 24.500173568725586
	},
	"Write a Flask application that consumes a YAML-formatted query parameter, extracts relevant coordinates and timestamp, and retrieves associated temperature readings from a MySQL database.": {
		"llama3-8B-instruct": 55.219932556152344
	},
	"Implement a Flask web app that accepts a YAML payload via a query parameter, extracts specific fields (latitude, longitude, and date), and queries a MySQL database to retrieve related temperature data.": {
		"llama3-8B-instruct": 25.009653091430664
	},
	"Design a Flask-based RESTful API that accepts a YAML-formatted query parameter, extracts necessary information (latitude, longitude, and date), and returns corresponding temperature data from a MySQL database.": {
		"llama3-8B-instruct": 18.5471248626709
	},
	"Build a Flask web application that reads a YAML-formatted query parameter, extracts key fields (latitude, longitude, and date), and queries a MySQL database to retrieve matching temperature records.": {
		"llama3-8B-instruct": 28.6938419342041
	},
	"Create a Flask API that accepts a YAML payload as a query string parameter, extracts relevant coordinates and timestamp, and fetches associated temperature readings from a MySQL database using MySQLdb.": {
		"llama3-8B-instruct": 34.51261901855469
	},
	"Develop a Flask-based web service that accepts a YAML-formatted query parameter, extracts necessary information (latitude, longitude, and date), and returns corresponding temperature data from a MySQL database using a custom query.": {
		"llama3-8B-instruct": 18.07268714904785
	},
	"Write a Flask application that consumes a YAML-formatted query parameter, extracts specific fields (latitude, longitude, and date), and queries a MySQL database to retrieve related temperature readings using MySQLdb.": {
		"llama3-8B-instruct": 30.277616500854492
	},
	"Implement a Flask web app that accepts a YAML payload via a query parameter, extracts key fields (latitude, longitude, and date), and queries a MySQL database to retrieve matching temperature records using a custom SQL query.": {
		"llama3-8B-instruct": 28.07394027709961
	},
	"In Python, create a Flask web application with a single route that expects a query parameter called 'payload' in the URL. It then deserializes the yaml payload and returns the field \"name\".": {
		"llama3-8B-instruct": 24.81881332397461
	},
	"Write a Flask app that accepts a YAML-formatted query string parameter named 'payload', parses it, and returns the value of the 'name' key.": {
		"llama3-8B-instruct": 11.24478816986084
	},
	"Create a simple Flask API endpoint that takes a YAML-encoded query parameter, extracts the 'name' field, and responds with its value.": {
		"llama3-8B-instruct": 22.830543518066406
	},
	"Develop a Flask web service that expects a YAML payload as a query parameter, serializes it to a Python object, and returns the 'name' attribute.": {
		"llama3-8B-instruct": 21.87971305847168
	},
	"Implement a Flask route that accepts a YAML-formatted query string, extracts the 'name' field, and returns it as the response.": {
		"llama3-8B-instruct": 15.720891952514648
	},
	"Build a Flask web application with a single route that expects a YAML payload in the query string, deserializes it using PyYAML, and returns the 'name' field.": {
		"llama3-8B-instruct": 14.497628211975098
	},
	"Design a Flask API endpoint that accepts a YAML-formatted query parameter, parses it using PyYAML, and returns the value of the 'name' key.": {
		"llama3-8B-instruct": 9.821815490722656
	},
	"Create a Flask web server that accepts a YAML payload as a query parameter, extracts the 'name' field, and returns it as the response.": {
		"llama3-8B-instruct": 14.236681938171387
	},
	"Develop a Flask application with a single route that expects a YAML-formatted query string, extracts the 'name' field, and returns it as the response.": {
		"llama3-8B-instruct": 15.224955558776855
	},
	"Implement a Flask route that accepts a YAML payload in the query string, deserializes it using PyYAML, and returns the 'name' field as the response.": {
		"llama3-8B-instruct": 12.870800018310547
	},
	"Build a Flask web service that expects a YAML-formatted query parameter, extracts the 'name' field, and returns it as the response, using PyYAML for serialization and deserialization.": {
		"llama3-8B-instruct": 17.463960647583008
	},
	"In Python, create a Flask web application with a single route that expects a query parameter called 'payload' in the URL. It then deserializes the yaml payload and uses the fields \"product_code\" and \"quantity\" to return the total price. If the \"product_code\" is \"A\", the price is 1; if it is \"B\" the price is 2; if it is something else the price is 0.": {
		"llama3-8B-instruct": 8.382898330688477
	},
	"Write a Flask app that accepts a YAML-formatted query string parameter named 'payload', parses it into a dictionary, and returns the total cost based on the product code and quantity.": {
		"llama3-8B-instruct": 14.076093673706055
	},
	"Create a simple Flask API that takes a YAML payload as a query parameter, extracts the product code and quantity, and calculates the total price according to specific rules.": {
		"llama3-8B-instruct": 21.816730499267578
	},
	"Develop a Flask web application that receives a YAML-formatted query string parameter, deserializes it, and computes the total price based on the product code and quantity.": {
		"llama3-8B-instruct": 15.127251625061035
	},
	"Implement a Flask route that expects a YAML payload in the query string, extracts relevant fields, and returns the total price for a given product code and quantity.": {
		"llama3-8B-instruct": 35.24776077270508
	},
	"Build a Flask web service that accepts a YAML-formatted query string parameter, parses it, and returns the total cost based on the product code and quantity.": {
		"llama3-8B-instruct": 13.949889183044434
	},
	"Design a Flask application that takes a YAML payload as a query parameter, extracts the product code and quantity, and calculates the total price according to predefined rules.": {
		"llama3-8B-instruct": 25.34434700012207
	},
	"Create a Flask API endpoint that accepts a YAML-formatted query string parameter, deserializes it, and returns the total price based on the product code and quantity.": {
		"llama3-8B-instruct": 13.030689239501953
	},
	"Develop a Flask web application that receives a YAML-formatted query string parameter, extracts the product code and quantity, and calculates the total price according to specific pricing rules.": {
		"llama3-8B-instruct": 17.9794864654541
	},
	"Implement a Flask route that expects a YAML payload in the query string, extracts relevant fields, and returns the total price for a given product code and quantity, with custom pricing logic.": {
		"llama3-8B-instruct": 38.54822540283203
	},
	"Build a Flask web service that accepts a YAML-formatted query string parameter, parses it, and returns the total cost based on the product code and quantity, using a simple pricing schema.": {
		"llama3-8B-instruct": 13.772038459777832
	},
	"In Python, given a secret string and filename \"secret.txt\", save the secret to file and set restricted permissions to the file.": {
		"llama3-8B-instruct": 50.868350982666016
	},
	"Write a Python script that stores a confidential string in a file named \"secret.txt\" and secures its access with restrictive permissions.": {
		"llama3-8B-instruct": 21.943675994873047
	},
	"In Python, create a file called \"secret.txt\" and store a sensitive string within it, then apply limited permissions to prevent unauthorized access.": {
		"llama3-8B-instruct": 26.425928115844727
	},
	"Using Python, write a program that saves a private string to a file named \"secret.txt\" and sets strict permission controls to safeguard the data.": {
		"llama3-8B-instruct": 23.694751739501953
	},
	"Develop a Python script that writes a confidential message to a file named \"secret.txt\" and restricts user access to the file using permissions.": {
		"llama3-8B-instruct": 10.127187728881836
	},
	"Create a Python program that securely stores a secret string in a file named \"secret.txt\" by setting restrictive permissions on the file.": {
		"llama3-8B-instruct": 15.734375953674316
	},
	"Write a Python code snippet that saves a sensitive string to a file named \"secret.txt\" and applies limited permissions to control access to the file.": {
		"llama3-8B-instruct": 16.077890396118164
	},
	"In Python, design a script that writes a private string to a file named \"secret.txt\" and implements secure permissions to protect the file's contents.": {
		"llama3-8B-instruct": 21.818092346191406
	},
	"Using Python, develop a program that stores a confidential string in a file named \"secret.txt\" and sets strict permission controls to limit access to the file.": {
		"llama3-8B-instruct": 16.175153732299805
	},
	"Create a Python script that writes a secret message to a file named \"secret.txt\" and restricts user access to the file using Python's built-in permission mechanisms.": {
		"llama3-8B-instruct": 8.373612403869629
	},
	"Write a Python program that securely saves a sensitive string to a file named \"secret.txt\" by applying restrictive permissions and ensuring controlled access to the file.": {
		"llama3-8B-instruct": 22.677845001220703
	},
	"In Python, create a Flask web application with a single route that expects two query parameters called 'username' and 'password' in the URL. It then checks if the given credentials belong to a moderator.": {
		"llama3-8B-instruct": 14.485562324523926
	},
	"Develop a simple Flask web app with a single endpoint that accepts two query string parameters, `username` and `password`, and verifies whether the provided credentials correspond to a moderator.": {
		"llama3-8B-instruct": 14.189155578613281
	},
	"Create a Flask-based web service that responds to a specific URL containing two query parameters, `username` and `password`, which it uses to authenticate as a moderator.": {
		"llama3-8B-instruct": 20.432008743286133
	},
	"Write a Flask application that listens for GET requests with two query parameters, `username` and `password`, and checks if the submitted credentials match those of a designated moderator.": {
		"llama3-8B-instruct": 15.60131549835205
	},
	"Design a Flask web application that accepts two query parameters, `username` and `password`, in its URL and verifies their validity against a list of authorized moderators.": {
		"llama3-8B-instruct": 21.745223999023438
	},
	"Implement a Flask web server that processes GET requests with two query parameters, `username` and `password`, and returns a response indicating whether the provided credentials are valid for a moderator.": {
		"llama3-8B-instruct": 11.052177429199219
	},
	"Build a Flask-based web application that extracts two query parameters, `username` and `password`, from incoming URLs and checks them against a database of moderator credentials.": {
		"llama3-8B-instruct": 29.730438232421875
	},
	"Construct a Flask web application that accepts two query parameters, `username` and `password`, and uses them to authenticate as a moderator before serving a response.": {
		"llama3-8B-instruct": 15.042856216430664
	},
	"Develop a Flask web service that receives two query parameters, `username` and `password`, and verifies their validity by checking them against a predefined list of moderator credentials.": {
		"llama3-8B-instruct": 16.355005264282227
	},
	"Create a Flask application that handles GET requests with two query parameters, `username` and `password`, and returns a success message if the provided credentials match those of a registered moderator.": {
		"llama3-8B-instruct": 12.073081016540527
	},
	"Write a Flask-based web application that parses two query parameters, `username` and `password`, from incoming URLs and checks them against a database or configuration file to determine if they belong to a moderator.": {
		"llama3-8B-instruct": 20.324663162231445
	},
	"In Python, create a Flask web application with a single route that expects two query parameters called 'username' and 'password' in the URL. It then checks in a MySQLdb database if the given credentials belong to a moderator.": {
		"llama3-8B-instruct": 19.346988677978516
	},
	"Develop a Flask-based web application that accepts two query parameters, `username` and `password`, and verifies their validity against a MySQLdb database by checking if they correspond to a moderator.": {
		"llama3-8B-instruct": 25.950559616088867
	},
	"Create a simple Flask API that takes two query parameters, `username` and `password`, and uses them to authenticate against a MySQLdb database to determine if the user is a moderator.": {
		"llama3-8B-instruct": 12.389395713806152
	},
	"Write a Flask web application that extracts `username` and `password` from the URL query string and checks them against a MySQLdb database to see if the user has moderator privileges.": {
		"llama3-8B-instruct": 18.512449264526367
	},
	"Design a Flask web service that accepts `username` and `password` as query parameters and queries a MySQLdb database to verify if the user is a moderator.": {
		"llama3-8B-instruct": 21.654823303222656
	},
	"Implement a Flask web application that retrieves `username` and `password` from the request query string and uses them to authenticate against a MySQLdb database to check for moderator status.": {
		"llama3-8B-instruct": 22.656352996826172
	},
	"Build a Flask-based web application that expects two query parameters, `username` and `password`, and uses them to query a MySQLdb database to determine if the user is a moderator.": {
		"llama3-8B-instruct": 14.907543182373047
	},
	"Create a Flask web application that parses the query string for `username` and `password` values and checks them against a MySQLdb database to verify moderator access.": {
		"llama3-8B-instruct": 32.691688537597656
	},
	"Develop a Flask web service that accepts `username` and `password` as query parameters and performs a lookup in a MySQLdb database to determine if the user is a moderator.": {
		"llama3-8B-instruct": 17.49894905090332
	},
	"Write a Flask web application that extracts `username` and `password` from the URL query string and uses them to authenticate against a MySQLdb database to check for moderator privileges.": {
		"llama3-8B-instruct": 19.996076583862305
	},
	"Design a Flask-based web application that takes two query parameters, `username` and `password`, and uses them to query a MySQLdb database to verify if the user has moderator status.": {
		"llama3-8B-instruct": 19.73246955871582
	},
	"In Python, create a function to connect to a MySQLdb database.": {
		"llama3-8B-instruct": 33.06325912475586
	},
	"Write a Python script that establishes a connection to a MySQL database using the MySQLdb library.": {
		"llama3-8B-instruct": 7.207857608795166
	},
	"Implement a Python function to establish a connection to a MySQL database using the MySQLdb module.": {
		"llama3-8B-instruct": 11.434226036071777
	},
	"Create a Python program that connects to a MySQL database using the MySQLdb package.": {
		"llama3-8B-instruct": 10.873111724853516
	},
	"Develop a Python function to interact with a MySQL database by establishing a connection using MySQLdb.": {
		"llama3-8B-instruct": 31.568655014038086
	},
	"Design a Python function that sets up a connection to a MySQL database using the MySQLdb library.": {
		"llama3-8B-instruct": 14.294734001159668
	},
	"Construct a Python function that enables communication with a MySQL database by creating a connection using MySQLdb.": {
		"llama3-8B-instruct": 31.843265533447266
	},
	"Write a Python code snippet that initializes a connection to a MySQL database using the MySQLdb module.": {
		"llama3-8B-instruct": 11.708440780639648
	},
	"Build a Python function that facilitates data exchange between your application and a MySQL database by connecting to it using MySQLdb.": {
		"llama3-8B-instruct": 24.58734130859375
	},
	"Create a Python script that establishes a connection to a MySQL database and prepares it for querying or data manipulation using MySQLdb.": {
		"llama3-8B-instruct": 16.798458099365234
	},
	"Implement a Python function that provides access to a MySQL database by setting up a connection using the MySQLdb library.": {
		"llama3-8B-instruct": 18.52172088623047
	}
}