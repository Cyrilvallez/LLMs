{"task_id": "HumanEval/0", "completion": "    \"\"\"\n    return sum(abs(n - threshold) for n in numbers) <"}
{"task_id": "HumanEval/1", "completion": "_paren_groups(paren_string)\n    if len(parens) == 0:\n        return []\n    "}
{"task_id": "HumanEval/2", "completion": "    return number - (number % 1)\n\n"}
{"task_id": "HumanEval/3", "completion": "    \"\"\"\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True"}
{"task_id": "HumanEval/4", "completion": "    return sum(abs(n - mean) for n in numbers) / len(numbers"}
{"task_id": "HumanEval/5", "completion": "    \"\"\"\n    return [numbers[i] + delimeter for i in range("}
{"task_id": "HumanEval/6", "completion": "_parens = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '("}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if s.find(substring)!= -1]"}
{"task_id": "HumanEval/8", "completion": "\n    return (sum(numbers), product(numbers))\n\n"}
{"task_id": "HumanEval/9", "completion": "    \"\"\"\n    return [max(numbers[i:i + 2]) for i in range("}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the longest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    "}
{"task_id": "HumanEval/11", "completion": "    return ''.join(map(lambda x: x ^ b, a"}
{"task_id": "HumanEval/12", "completion": "    if len(strings) == 0:\n        return None\n    return max(strings, key=len"}
{"task_id": "HumanEval/13", "completion": "    \"\"\" Return the least common multiple of two integers a and b\n    >>> least_common_multiple(3,"}
{"task_id": "HumanEval/14", "completion": "    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('"}
{"task_id": "HumanEval/15", "completion": "    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_"}
{"task_id": "HumanEval/16", "completion": "    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of"}
{"task_id": "HumanEval/17", "completion": "\n    return [int(note) for note in music_string.split()]\n\n"}
{"task_id": "HumanEval/18", "completion": "    return len(string) - len(substring) + 1\n\n"}
{"task_id": "HumanEval/19", "completion": "    return''.join(sorted(numbers))\n\n"}
{"task_id": "HumanEval/20", "completion": ".sort()\n    return numbers[0], numbers[-1]\n\n"}
{"task_id": "HumanEval/21", "completion": "\n    \"\"\" Given a list of numbers, return a list of the smallest and largest numbers,\n    such that the smallest number will become 0 and the largest will become 1"}
{"task_id": "HumanEval/22", "completion": "    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 'b', 'c"}
{"task_id": "HumanEval/23", "completion": "    \"\"\" Return length of given string\n    >>> strlen('abc"}
{"task_id": "HumanEval/24", "completion": "    \"\"\" For a given number n, find the smallest number that divides n evenly, smaller than"}
{"task_id": "HumanEval/25", "completion": "\n    \"\"\"\n    return [i for i in range(1, n + 1) if n % i == 0"}
{"task_id": "HumanEval/26", "completion": "    \"\"\"\n    return [x for x in numbers if x not in seen]\n\n"}
{"task_id": "HumanEval/27", "completion": "    return string.lower().replace('h', 'H')"}
{"task_id": "HumanEval/28", "completion": "    \"\"\"\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "    \"\"\"Return the smallest prime factor of a given number.\n    >>> smallest_prime_factor(6)\n    "}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs"}
{"task_id": "HumanEval/33", "completion": ", 3, 4, 8, 9, 2]\n    while l:\n        i = l.index(min(l))\n        l[i], l["}
{"task_id": "HumanEval/34", "completion": "    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5"}
{"task_id": "HumanEval/35", "completion": "    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3"}
{"task_id": "HumanEval/36", "completion": "    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13."}
{"task_id": "HumanEval/37", "completion": "    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l,"}
{"task_id": "HumanEval/38", "completion": "\n    return \"\".join([s[i:i + 3] for i in range(0, len(s), 3)"}
{"task_id": "HumanEval/39", "completion": "    \"\"\"\n    return fib(n - 1) + fib(n - 2)\n"}
{"task_id": "HumanEval/40", "completion": "\n    \"\"\"\n    return sum(l) == 0\n\n"}
{"task_id": "HumanEval/41", "completion": "    return n\n\n"}
{"task_id": "HumanEval/42", "completion": "    \"\"\"Return list with elements decremented by 1.\n    >>> decr_list([1, 2, 3"}
{"task_id": "HumanEval/43", "completion": "    \"\"\"\n    return sum(l) == 0\n\n"}
{"task_id": "HumanEval/44", "completion": "    \"\"\"Return the number of digits in the number x.\n    >>> print(change_base(8, 3))\n    "}
{"task_id": "HumanEval/45", "completion": "    return a * h / 2\n\n"}
{"task_id": "HumanEval/46", "completion": "    \"\"\"\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4"}
{"task_id": "HumanEval/47", "completion": "    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2"}
{"task_id": "HumanEval/48", "completion": "    return text[::-1] == text[::-1][::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3,"}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) +"}
{"task_id": "HumanEval/51", "completion": "    return text.translate(str.maketrans('', '', string.punctuation))"}
{"task_id": "HumanEval/52", "completion": ", t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    "}
{"task_id": "HumanEval/53", "completion": "    \"\"\"Return the sum of two numbers x and y\n    >>>"}
{"task_id": "HumanEval/54", "completion": "\n    return s0.count(s1) == len(s0) and s0 == s1"}
{"task_id": "HumanEval/55", "completion": "    \"\"\"Return n-th Fibonacci number.\n    >>> fib("}
{"task_id": "HumanEval/56", "completion": "    \"\"\"\n    return len(brackets) == 1 and brackets[0] == \">\"\n\n"}
{"task_id": "HumanEval/57", "completion": "    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2,"}
{"task_id": "HumanEval/58", "completion": "    return list(set(l1).intersection(set(l2)))\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    \"\"\"Return the smallest prime factor of n. Assume n > 1 and is not a prime."}
{"task_id": "HumanEval/60", "completion": "    \"\"\"\n    return sum(range(1, n + 1))\n\n"}
{"task_id": "HumanEval/61", "completion": "    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            "}
{"task_id": "HumanEval/62", "completion": "    \"\"\"\n    return [x**i for i in range(1, len(xs) + 1"}
{"task_id": "HumanEval/63", "completion": " fibfib(n-1) + fibfib(n-2) + fibfib(n-3"}
{"task_id": "HumanEval/64", "completion": "    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'."}
{"task_id": "HumanEval/65", "completion": "    \"\"\"Return the number of digits in x.\n    >>> len(circular_shift(12,"}
{"task_id": "HumanEval/66", "completion": "\n    def digitSum(s):\n        return sum(ord(c) for c in s"}
{"task_id": "HumanEval/67", "completion": "\n    def fruit_distribution(self,s,n):\n        \"\"\"\n        In this task, you will be given a string that represents a number of apples and oranges \n        that are distributed in a basket of fruit this basket contains \n        apples, oranges, and mango fruits. Given the string that represents the total number of \n        the oranges and apples and an integer that represent the total number of the fruits \n        in the basket return the number of the mango fruits in the basket.\n        \"\"\"\n        return n//len(s)"}
{"task_id": "HumanEval/68", "completion": "\n        return None\n\n    def even_value(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int"}
{"task_id": "HumanEval/69", "completion": "\n    if len(lst) == 0:\n        return -1\n    else:\n        return max(lst"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) == 0:\n        return []\n    else:\n        return strange_sort_list("}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        return (a + b + c) / 2"}
{"task_id": "HumanEval/72", "completion": "    if q[0] == w:\n        return True\n    return False\n"}
{"task_id": "HumanEval/73", "completion": "\n    for i in range(len(arr)):\n        if arr[i] == arr[i - 1]:\n            continue\n        else:\n            return"}
{"task_id": "HumanEval/74", "completion": "\n    if len(lst1) == 0 or len(lst2) == 0:\n        return []\n    "}
{"task_id": "HumanEval/75", "completion": "    if a % 2 == 0 and a % 3 == 0 and a % 5 == 0:\n        "}
{"task_id": "HumanEval/76", "completion": "    return x**n == x**(n-1)\n\n"}
{"task_id": "HumanEval/77", "completion": "    if a % 2 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/78", "completion": "\n    if num.isalpha():\n        return 0\n    elif num.isdigit():\n        return"}
{"task_id": "HumanEval/79", "completion": "\n    binary = \"\"\n    while decimal > 0:\n        binary = binary + \"0\"\n        decimal = decimal -"}
{"task_id": "HumanEval/80", "completion": "\n    \"\"\"\n    if len(s) < 3:\n        return False\n    return all(c in s"}
{"task_id": "HumanEval/81", "completion": "\n    for i in range(len(grades)):\n        if grades[i] > 0:\n            grade_list.append("}
{"task_id": "HumanEval/82", "completion": "    if len(string) == 0:\n        return False\n    for i in range("}
{"task_id": "HumanEval/83", "completion": "\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n"}
{"task_id": "HumanEval/84", "completion": "\n    return str(bin(N)[2:])[2:]"}
{"task_id": "HumanEval/85", "completion": "\n    \"\"\"Given a non-empty list of integers lst. remove the even elements"}
{"task_id": "HumanEval/86", "completion": "    return ''.join(sorted(s))\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    \"\"\"\n    return [tuple(row[x]) for row in lst]"}
{"task_id": "HumanEval/88", "completion": "\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    "}
{"task_id": "HumanEval/89", "completion": "    return ''.join(rotate(s, 2))\n\n"}
{"task_id": "HumanEval/90", "completion": "\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_largest() that returns the 2nd largest element of the list.\n    Return None if there is no such element.\n    "}
{"task_id": "HumanEval/91", "completion": "    return 0\n"}
{"task_id": "HumanEval/92", "completion": "    if x == y and x == z:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    for i in range(len(message)):\n        if message[i] in 'AEIOU':\n            message[i] ="}
{"task_id": "HumanEval/94", "completion": "\n    for i in lst:\n        if i % prime == 0:\n            return i\n    return"}
{"task_id": "HumanEval/95", "completion": "\n    for key in dict:\n        if not isinstance(dict[key], str):\n            return False\n    return"}
{"task_id": "HumanEval/96", "completion": "    return [i for i in range(2, n + 1) if i % 2 == 0"}
{"task_id": "HumanEval/97", "completion": "\n    return a * b\n"}
{"task_id": "HumanEval/98", "completion": "    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n"}
{"task_id": "HumanEval/99", "completion": "    return int(round(value))\n\n"}
{"task_id": "HumanEval/100", "completion": "\n    def __init__(self, n):\n        self.n = n\n        self.pile = [0] *"}
{"task_id": "HumanEval/101", "completion": "    return [word.lower() for word in s.split(\",\")]\n\n"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0:\n        return x\n    else:\n        return choose_"}
{"task_id": "HumanEval/103", "completion": "\n    return int(bin(n)[2:], 2)\n\n"}
{"task_id": "HumanEval/104", "completion": "    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that has a"}
{"task_id": "HumanEval/105", "completion": "\n    return [int(x) for x in arr]\n\n"}
{"task_id": "HumanEval/106", "completion": "    if n == 0:\n        return []\n    else:\n        return [n * factorial(n - i"}
{"task_id": "HumanEval/107", "completion": "\n    def even_odd_palindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype:"}
{"task_id": "HumanEval/108", "completion": "\n    \"\"\"\n    Write a function reverse which takes an array of integers and returns\n    the array in reverse order.\n    "}
{"task_id": "HumanEval/109", "completion": "\n    if len(arr) == 0:\n        return True\n    else:\n        return"}
{"task_id": "HumanEval/110", "completion": "\n    if lst1 == lst2:\n        return \"YES\"\n    else:\n        return \"NO"}
{"task_id": "HumanEval/111", "completion": "\n    for i in range(len(test)):\n        if test[i] in hist:\n            hist[test[i]] += 1"}
{"task_id": "HumanEval/112", "completion": "\n    if c in s:\n        return True, s.replace(c, \"\")\n    else:\n        return"}
{"task_id": "HumanEval/113", "completion": "    return [str(i) for i in lst if i.isdigit()]\n\n"}
{"task_id": "HumanEval/114", "completion": "\n    \"\"\"\n    Given an array nums, find the contiguous subarray with the largest sum"}
{"task_id": "HumanEval/115", "completion": "        \n    def fill(grid, bucket_capacity):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type bucket_capacity:"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: int(bin(x)[2:].zfill("}
{"task_id": "HumanEval/117", "completion": "\n    \"\"\"\n    if s == \"\":\n        return []\n    \n    words = []\n    \n    for i in range(len(s)):\n        if s[i] in \"bcdf"}
{"task_id": "HumanEval/118", "completion": "\n    if len(word) == 0:\n        return \"\"\n    \n    left_vowels = get_closest_vowel(word[0"}
{"task_id": "HumanEval/119", "completion": "\n    def __init__(self):\n        self.stack = []\n\n    def push(self, x):\n        self.stack.append(x"}
{"task_id": "HumanEval/120", "completion": "\n    def maximum(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n"}
{"task_id": "HumanEval/121", "completion": "\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    \n    "}
{"task_id": "HumanEval/122", "completion": "\n    def sumOfTwoDigits(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k:"}
{"task_id": "HumanEval/123", "completion": "\n    if n % 2 == 0:\n        return [n]\n    else:\n        odd_nums = get_odd_collatz("}
{"task_id": "HumanEval/124", "completion": "\n    if not date:\n        return False\n    if len(date) < 10:\n        return False\n    if len(date) >"}
{"task_id": "HumanEval/125", "completion": "    if len(txt) == 0:\n        return 0\n    \n    words = []\n    \n    for i in range(len(txt)):\n        if txt[i] =='':\n            continue\n        \n        if txt[i] in 'abcdef':\n            words.append(txt[i])\n    \n    return len(words"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) == 0:\n        return False\n    if lst[0] == lst["}
{"task_id": "HumanEval/127", "completion": "        if start1 <= start2 and end1 <= end2:\n            return \"YES\"\n        elif start1 > start2 and end1 > end2:\n            return \"NO\"\n        else:\n            return"}
{"task_id": "HumanEval/128", "completion": "    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all"}
{"task_id": "HumanEval/129", "completion": "        if grid[i][j] == k:\n            return [grid[i][j]]\n        else:\n            "}
{"task_id": "HumanEval/130", "completion": "\n    def fib(self, n):\n        if n < 2:\n            return [1]\n        else:\n            return [1,"}
{"task_id": "HumanEval/131", "completion": "    \"\"\"Given a positive integer n, return the product of the even digits.\n    Return 0 if all digits are"}
{"task_id": "HumanEval/132", "completion": "    if string[0] == '[':\n        return is_nested(string[1:])\n    "}
{"task_id": "HumanEval/133", "completion": "\n    return sum(lst) ** 2"}
{"task_id": "HumanEval/134", "completion": "    if txt[-1] in \"abcdefghijklmnopqrstuvwxyz\":\n        return True\n    "}
{"task_id": "HumanEval/135", "completion": "    return max(arr) if arr else -1\n\n"}
{"task_id": "HumanEval/136", "completion": "    if len(lst) == 0:\n        return None\n    return max(lst), min(lst"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        return float(a)\n    elif isinstance(a, int):\n        return a"}
{"task_id": "HumanEval/138", "completion": "    return n % 2 == 0 and n % 3 == 0 and n % 5 == 0\n\n"}
{"task_id": "HumanEval/139", "completion": "orial(n)\n\n"}
{"task_id": "HumanEval/140", "completion": "    return re.sub(r'\\s+', '_', text)"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) < 3:\n        return \"No\"\n    if file_name[0] == \".\":\n        return \"No\"\n    if file_name[-1] == \".\":\n        return \"No\"\n    if file_name[-2] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return"}
{"task_id": "HumanEval/142", "completion": "\n    return sum(lst)\n"}
{"task_id": "HumanEval/143", "completion": "\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    if not s:\n        return \"\"\n    "}
{"task_id": "HumanEval/144", "completion": "    if n == \"0\":\n        return True\n    if n == \"1\":\n        return False\n    if n[0] == \""}
{"task_id": "HumanEval/145", "completion": "    \"\"\"\n    Write a function which returns the sum of all the digits of a given number.\n    "}
{"task_id": "HumanEval/146", "completion": "\n    return len([i for i in nums if i > 10 and i % 2 == 1 and i"}
{"task_id": "HumanEval/147", "completion": "        \n    def get_triples(self, n):\n        \"\"\"\n        You are given a positive integer n. You have to create an integer array a of length n.\n"}
{"task_id": "HumanEval/148", "completion": "\n    def __init__(self, planet1, planet2):\n        self.planet1 = planet1\n        self.planet2 = planet2"}
{"task_id": "HumanEval/149", "completion": "\n    return sorted(lst, key=lambda x: len(x))\n\n"}
{"task_id": "HumanEval/150", "completion": "    if n % x == 0 or n % y == 0:\n        return n\n    "}
{"task_id": "HumanEval/151", "completion": "\n    if len(lst) == 0:\n        return 0\n    \n    return sum(lst[i"}
{"task_id": "HumanEval/152", "completion": "\n    if guess[i] == score[i]:\n        return i\n    else:\n        return"}
{"task_id": "HumanEval/153", "completion": "\n    for extension in extensions:\n        if extension.count(class_name) > extension.count(class_name[0]):\n            return"}
{"task_id": "HumanEval/154", "completion": "        if a[i] == b[j]:\n            return True\n        else:\n            j += 1\n"}
{"task_id": "HumanEval/155", "completion": "\n    return (num % 2 == 0 and num % 3 == 0)"}
{"task_id": "HumanEval/156", "completion": "\n    if number < 1000:\n        return '{}'.format(number)\n    "}
{"task_id": "HumanEval/157", "completion": "    if a == b and b == c:\n        return True\n    if a == b or b == c or a == c"}
{"task_id": "HumanEval/158", "completion": "    return max(set(words), key=len)\n\n"}
{"task_id": "HumanEval/159", "completion": "\n    if number == need:\n        return [number, remaining]\n    \n    remaining -= number\n    "}
{"task_id": "HumanEval/160", "completion": "\n    if len(operator)!= len(operand):\n        raise ValueError(\"Operator and operand lists must have the same length"}
{"task_id": "HumanEval/161", "completion": "\n    if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n        return"}
{"task_id": "HumanEval/162", "completion": "    return hashlib.md5(text.encode('utf-8')).hexdig"}
{"task_id": "HumanEval/163", "completion": "\n    return [int(x) for x in str(a) + str(b"}
