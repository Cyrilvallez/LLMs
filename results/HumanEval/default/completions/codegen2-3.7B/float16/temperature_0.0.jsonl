{"task_id": "HumanEval/0", "completion": "\n    return any(abs(n - n2) < threshold for n, n2"}
{"task_id": "HumanEval/1", "completion": "\n    return [paren_string[i:j] for i, j in zip("}
{"task_id": "HumanEval/2", "completion": "\n    return math.trunc(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    return all(op < 0 for op in operations"}
{"task_id": "HumanEval/4", "completion": "\n    return sum(abs(x - mean) for x in numbers"}
{"task_id": "HumanEval/5", "completion": "\n    return [delimeter] + numbers + [delimeter"}
{"task_id": "HumanEval/6", "completion": "\n    return [len(list(filter(lambda x: x == ')', paren_string)))"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s"}
{"task_id": "HumanEval/8", "completion": "\n    return sum(numbers), reduce(lambda x, y: x * y,"}
{"task_id": "HumanEval/9", "completion": "\n    return [max(numbers[i:i + n]) for i"}
{"task_id": "HumanEval/10", "completion": "\n    return string[::-1] + string[1"}
{"task_id": "HumanEval/11", "completion": "\n    return ''.join(chr(ord(a[i]) ^ ord(b[i"}
{"task_id": "HumanEval/12", "completion": "\n    return max(strings, key=len) if strings else"}
{"task_id": "HumanEval/13", "completion": "\n    return math.gcd(a, b)\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(len("}
{"task_id": "HumanEval/15", "completion": "\n    return''.join(str(i) for i in range("}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    return [int(note) for note in music_string"}
{"task_id": "HumanEval/18", "completion": "\n    return len(list(filter(lambda x: x == substring,"}
{"task_id": "HumanEval/19", "completion": "\n    return''.join(sorted(numbers.split()"}
{"task_id": "HumanEval/20", "completion": "\n    return min(numbers), max(numbers"}
{"task_id": "HumanEval/21", "completion": "\n    return [x / max(numbers) for x in numbers"}
{"task_id": "HumanEval/22", "completion": "\n    return [int(v) for v in values if isinstance(v,"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(1, n):\n        if n %"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    for i in range(1, n + 1):\n        "}
{"task_id": "HumanEval/26", "completion": "\n    return list(set(numbers))\n\n"}
{"task_id": "HumanEval/27", "completion": "\n    return string.swapcase()\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith("}
{"task_id": "HumanEval/30", "completion": "\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1:\n        return False\n    for i in range(2,"}
{"task_id": "HumanEval/32", "completion": "\n    return poly(xs, 0)"}
{"task_id": "HumanEval/33", "completion": "\n    return sorted(l, key=lambda x: x % 3)"}
{"task_id": "HumanEval/34", "completion": "\n    return list(set(l))\n\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    return sum(1 for i in range(1, n + 1) if"}
{"task_id": "HumanEval/37", "completion": "\n    return [l[i] for i in range(len(l))"}
{"task_id": "HumanEval/38", "completion": "\n    return \"\".join(s.split(\""}
{"task_id": "HumanEval/39", "completion": "\n    if n == 1:\n        return 2\n    elif n == 2:\n        return"}
{"task_id": "HumanEval/40", "completion": "\n    return len(set(l)) == 3"}
{"task_id": "HumanEval/41", "completion": "\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l"}
{"task_id": "HumanEval/44", "completion": "\n    return str(int(x, base))\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return (a * h) / 2\n\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return"}
{"task_id": "HumanEval/47", "completion": "\n    if len(l) == 0:\n        return None\n    "}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    return pow(2, n, p) % p"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) + 5) %"}
{"task_id": "HumanEval/51", "completion": "\n    return ''.join(v for v in text if v not in 'ae"}
{"task_id": "HumanEval/52", "completion": "\n    return all(n < t for n in l)"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    return len(set(s0) & set(s1"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0:\n        return 0\n    "}
{"task_id": "HumanEval/56", "completion": "\n    return all(bracket in brackets for bracket in \"<>\")"}
{"task_id": "HumanEval/57", "completion": "\n    return all(x > y for x, y in zip(l, l"}
{"task_id": "HumanEval/58", "completion": "\n    return list(set(l1) & set(l2"}
{"task_id": "HumanEval/59", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n + 1))"}
{"task_id": "HumanEval/61", "completion": "\n    return all(bracket == bracket[::-1] for bracket in"}
{"task_id": "HumanEval/62", "completion": "\n    return [xs[i + 1] for i in range(len(xs"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return"}
{"task_id": "HumanEval/64", "completion": "\n    return len([c for c in s if c in 'aeiou"}
{"task_id": "HumanEval/65", "completion": "\n    return str(int(x) >> shift) + str(int(x"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(c) for c in s"}
{"task_id": "HumanEval/67", "completion": "\n    return s.count(n)\n"}
{"task_id": "HumanEval/68", "completion": "\n    return sorted(arr, key=lambda x: x[0"}
{"task_id": "HumanEval/69", "completion": "\n    return max(set(lst), key=lst.count"}
{"task_id": "HumanEval/70", "completion": "\n    return sorted(lst, key=lambda x: x %"}
{"task_id": "HumanEval/71", "completion": "\n    s = (a + b + c) / 2\n    return"}
{"task_id": "HumanEval/72", "completion": "\n    return q.is_palindromic() and q.sum"}
{"task_id": "HumanEval/73", "completion": "\n    return min(arr[i] - arr[i - 1] for i in"}
{"task_id": "HumanEval/74", "completion": "\n    return [x for x in lst1 if x not in lst"}
{"task_id": "HumanEval/75", "completion": "\n    if a < 100:\n        return False\n    for i in range(2,"}
{"task_id": "HumanEval/76", "completion": "\n    return n ** int(x) == x\n\n"}
{"task_id": "HumanEval/77", "completion": "\n    return a**3 == int(a**(1/3"}
{"task_id": "HumanEval/78", "completion": "\n    return len(str(num))\n\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    return"}
{"task_id": "HumanEval/81", "completion": "\n    return [str(grade) for grade in"}
{"task_id": "HumanEval/82", "completion": "\n    return len(string) % 2 == 0 or len(string)"}
{"task_id": "HumanEval/83", "completion": "\n    return len(str(n)) - len(str("}
{"task_id": "HumanEval/84", "completion": "\n    return str(bin(N)[2:])"}
{"task_id": "HumanEval/85", "completion": "\n    for i in range(len(lst)):\n        if i %"}
{"task_id": "HumanEval/86", "completion": "\n    return''.join(s.split())\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    return sorted(lst[x], key=lambda x: x["}
{"task_id": "HumanEval/88", "completion": "\n    return sorted(array)\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    return ''.join(sorted(s, key="}
{"task_id": "HumanEval/90", "completion": "\n    return lst[1] if lst else None"}
{"task_id": "HumanEval/91", "completion": "\n    return len([x for x in S if x.startswith(\""}
{"task_id": "HumanEval/92", "completion": "\n    return x + y + z == sum(x, y, z"}
{"task_id": "HumanEval/93", "completion": "\n    return ''.join(swap_case(message))"}
{"task_id": "HumanEval/94", "completion": "\n    return sum(map(int, str(lst)))"}
{"task_id": "HumanEval/95", "completion": "\n    return all(isinstance(key, str) for key in dict."}
{"task_id": "HumanEval/96", "completion": "\n    return [i for i in range(2, n + 1) if"}
{"task_id": "HumanEval/97", "completion": "\n    return a * b\n"}
{"task_id": "HumanEval/98", "completion": "\n    return sum(1 for i, c in enumerate(s) if c"}
{"task_id": "HumanEval/99", "completion": "\n    return int(round(float(value)))\n\n"}
{"task_id": "HumanEval/100", "completion": "\n    return [n, n*2, n*3]"}
{"task_id": "HumanEval/101", "completion": "\n    return s.split(\",\")\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x % 2 == 0:\n        return x // 2\n    "}
{"task_id": "HumanEval/103", "completion": "\n    return bin(n + m)[2:].zfill(m"}
{"task_id": "HumanEval/104", "completion": "\n    return sorted(set(x))\n\n"}
{"task_id": "HumanEval/105", "completion": "\n    return sorted(arr, key=lambda x: x"}
{"task_id": "HumanEval/106", "completion": "\n    return [1] + [n * i for i in range(1,"}
{"task_id": "HumanEval/107", "completion": "\n    return (n // 2, n % 2)"}
{"task_id": "HumanEval/108", "completion": "\n    return len([x for x in arr if x > 0])"}
{"task_id": "HumanEval/109", "completion": "\n    \n    return arr.count(arr."}
{"task_id": "HumanEval/110", "completion": "\n    pass\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    return Counter(test.split()).most_common"}
{"task_id": "HumanEval/112", "completion": "\n    return s[::-1] == c[::-"}
{"task_id": "HumanEval/113", "completion": "\n    return [str(len(lst[i])) for i in"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n    return min"}
{"task_id": "HumanEval/115", "completion": "\n    return math.ceil(grid.sum() / capacity"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: bin(x).count('"}
{"task_id": "HumanEval/117", "completion": "\n    pass\n\n"}
{"task_id": "HumanEval/118", "completion": "\n    return \"\".join(sorted(word, key=lambda x: x"}
{"task_id": "HumanEval/119", "completion": "\n    return 'Yes' if len(lst) % 2 == 0 else '"}
{"task_id": "HumanEval/120", "completion": "\n    return sorted(arr, key=lambda x: x"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(i for i in lst if i % 2!= 0"}
{"task_id": "HumanEval/122", "completion": "\n    return sum(arr[:k]) + sum(arr[k"}
{"task_id": "HumanEval/123", "completion": "\n    return [n, n // 2, n * 3 +"}
{"task_id": "HumanEval/124", "completion": "\n    return True if date else False\n\n"}
{"task_id": "HumanEval/125", "completion": "\n    return [word.strip() for word in txt.split"}
{"task_id": "HumanEval/126", "completion": "\n    return all(x < y for x, y in zip(lst,"}
{"task_id": "HumanEval/127", "completion": "\n    return \"YES\" if interval1[1] >= interval2[0"}
{"task_id": "HumanEval/128", "completion": "\n    return sum(arr * (1 if i > 0 else -1"}
{"task_id": "HumanEval/129", "completion": "\n    pass\n\n"}
{"task_id": "HumanEval/130", "completion": "\n    return [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "\n    return sum(n % 2 == 1 for n in range(1"}
{"task_id": "HumanEval/132", "completion": "\n    return string.count('[') >= string.count('"}
{"task_id": "HumanEval/133", "completion": "\n    return sum([x**2 for x in lst"}
{"task_id": "HumanEval/134", "completion": "\n    return txt[-1].isalpha() and not txt."}
{"task_id": "HumanEval/135", "completion": "\n    def find_largest_index(arr):\n        \"\"\"Return the largest index of an element which is not greater than\n        or"}
{"task_id": "HumanEval/136", "completion": "\n    return max(lst), min(lst"}
{"task_id": "HumanEval/137", "completion": "\n    if a > b:\n        return a\n    else:\n        return"}
{"task_id": "HumanEval/138", "completion": "\n    return n % 4 == 0 and n % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "\n    return n * special_factorial(n - 1"}
{"task_id": "HumanEval/140", "completion": "\n    return re.sub(r'\\s+', '_', text"}
{"task_id": "HumanEval/141", "completion": "\n    return \"Yes\" if len(file_name) <= 3"}
{"task_id": "HumanEval/142", "completion": "\n    return sum([x*x for x in lst"}
{"task_id": "HumanEval/143", "completion": "\n    return sentence.split()\n\n"}
{"task_id": "HumanEval/144", "completion": "\n    return True\n\n"}
{"task_id": "HumanEval/145", "completion": "\n    return sorted(nums, key=lambda x: sum(map(int, str(x"}
{"task_id": "HumanEval/146", "completion": "\n    return len([x for x in nums if x > 10 and x %"}
{"task_id": "HumanEval/147", "completion": "\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/148", "completion": "\n    return planet1, planet2\n\n"}
{"task_id": "HumanEval/149", "completion": "\n    return sorted(lst, key=len)"}
{"task_id": "HumanEval/150", "completion": "\n    if n % 2 == 0:\n        return x\n    else:\n        return"}
{"task_id": "HumanEval/151", "completion": "\n    return sum([x*x for x in lst if x%2"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(game[i]-guess[i]) for i"}
{"task_id": "HumanEval/153", "completion": "\n    return class_name + '.' + extensions[0"}
{"task_id": "HumanEval/154", "completion": "\n    return a.find(b)!= -1 or b.find("}
{"task_id": "HumanEval/155", "completion": "\n    return (num // 2, num % 2)"}
{"task_id": "HumanEval/156", "completion": "\n    roman_numeral = \"\"\n    while number > 0:\n        "}
{"task_id": "HumanEval/157", "completion": "\n    if a == b == c:\n        return True\n    "}
{"task_id": "HumanEval/158", "completion": "\n    return max(set(words), key=len)"}
{"task_id": "HumanEval/159", "completion": "\n    return [number - need, number]\n\n"}
{"task_id": "HumanEval/160", "completion": "\n    return eval(operator[0] + operand["}
{"task_id": "HumanEval/161", "completion": "\n    return \"\".join(sorted(s, key="}
{"task_id": "HumanEval/162", "completion": "\n    if not text:\n        return None\n    return md5(text"}
{"task_id": "HumanEval/163", "completion": "\n    return [i for i in range(a, b + 1"}
