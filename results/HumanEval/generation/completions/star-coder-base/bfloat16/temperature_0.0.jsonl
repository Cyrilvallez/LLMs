{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/1", "completion": "\n    # TODO: Implement this function\n    pass\n\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    return sum(abs(x - mean(numbers)) for x in numbers) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "\n    return [numbers[0]] + [delimeter] + [numbers[i] for i in range(1, len(numbers))]\n\n"}
{"task_id": "HumanEval/6", "completion": "\n    # TODO: Implement this function\n    pass\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [string for string in strings if substring in string]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_list.append(max(max_list[-1], numbers[i]))\n    return max_list\n\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i:][::-1]\n    return string\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    return \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n"}
{"task_id": "HumanEval/13", "completion": "\n    if a == 0:\n        return b\n    return greatest_common_divisor(b % a, a)\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return''.join(str(i) for i in range(n + 1))\n\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    music_list = music_string.split()\n    music_list = [x.replace('o|', '2').replace('o', '4').replace('.', '1') for x in music_list]\n    return [int(x) for x in music_list]\n\n"}
{"task_id": "HumanEval/18", "completion": "\n    if not string or not substring:\n        return 0\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    return''.join(sorted(numbers.split()))\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    return numbers[0], numbers[1]\n\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [\n        (x - min_val) / (max_val - min_val)\n        for x in numbers\n    ]\n\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n, 1, -1):\n        if n % i == 0:\n            return i\n\n"}
{"task_id": "HumanEval/25", "completion": "\n    if n == 1:\n        return []\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "\n    return list(dict.fromkeys(numbers))\n\n"}
{"task_id": "HumanEval/27", "completion": "\n    return string.swapcase()\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [x for x in l if x > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    xs = xs[::-1]\n    for i in range(len(xs) // 2):\n        if xs[i]!= 0:\n            break\n    else:\n        raise ValueError(\"xs must have non zero coefficient\")\n    a = xs[i]\n    b = xs[i + 1]\n    c = xs[i + 2]\n    d = xs[i + 3]\n    if a == 0:\n        return -c / b\n    elif b == 0:\n        return -d / a\n    else:\n        return -b / (2 * a) - math.sqrt(b * b - 4 * a * c) / (2 * a)\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    l_sorted = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_sorted.append(l[i])\n        else:\n            l_sorted.append(sorted(l)[i])\n    return l_sorted\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return list(set(l))\n\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    return sum(1 for i in range(1, n) if (i % 11 == 0 or i % 13 == 0) and i % 7 == 0)\n\n"}
{"task_id": "HumanEval/37", "completion": "\n    l_even = []\n    l_odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_even.append(l[i])\n        else:\n            l_odd.append(l[i])\n    l_odd.sort()\n    return l_even + l_odd\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[2:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n    if n == 6:\n        return 144\n    if n == 7:\n        return 233\n    if n == 8:\n        return 377\n    if n == 9:\n        return 610\n    if n == 10:\n        return 987\n    if n == 11:\n        return 1597\n    if n == 12:\n        return 2584\n    if n == 13:\n        return 4181\n    if n == 14:\n        return 6765\n    if n == 15:\n        return 10946\n    if n == 16:\n        return 17711\n    if n == 17:\n        return 28657\n    if n == 18:\n        return 46368\n    if n == 19:\n        return 75025\n    if n == 20:\n        return 121393\n    if n == 21:\n        return 196418\n    if n == 22:\n        return 317811\n    if n == 23:\n        return 514229\n    if n == 24:\n        return 832040\n    if n == 25:\n        return 1346269\n    if n == 26:\n        return 2178309\n    if n == 27:\n        return 3524578\n    if n == 28:\n        return 5702887\n    if n == 29:\n        return 9227465\n    if n == 30:\n        return 14930352\n    if n == 31:\n        return 24157817\n    if n == 32:\n        return 39088169\n    if n == 33:\n        return 632459"}
{"task_id": "HumanEval/40", "completion": "\n    # Your code here\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return False\n    # return True\n    # return"}
{"task_id": "HumanEval/41", "completion": "\n    # TODO: Implement this function\n    return 0\n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    # Your code here\n    # O(n^2)\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"x must be positive\")\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    return \"\".join(map(str, digits[::-1]))\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    return pow(2, n, p)\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([c for c in text if c not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "\n    return all(x < t for x in l)\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    return set(s0) == set(s1)\n\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(set(l1).intersection(set(l2)))\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    # TODO: implement this function\n    pass\n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return n * (n + 1) // 2\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    return [i * x for i, x in enumerate(xs[1:], 1)]\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "\n    return len([c for c in s if c in 'aeiouAEIOU'])\n"}
{"task_id": "HumanEval/65", "completion": "\n    return str(int(str(x)[-shift:] + str(x)[:-shift]))\n\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(c) for c in s if c.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "\n    # your code here\n    apples, oranges = s.split(\" and \")\n    apples = int(apples.split()[0])\n    oranges = int(oranges.split()[0])\n    return n - apples - oranges\n"}
{"task_id": "HumanEval/68", "completion": "\n    if not arr:\n        return []\n    min_even = float('inf')\n    min_even_index = -1\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < min_even:\n            min_even = node\n            min_even_index = i\n    return [min_even, min_even_index]\n\n"}
{"task_id": "HumanEval/69", "completion": "\n    # Your code here\n    max_num = 0\n    max_count = 0\n    for num in lst:\n        if num > max_num:\n            max_num = num\n            max_count = 1\n        elif num == max_num:\n            max_count += 1\n    if max_count >= max_num:\n        return max_num\n    else:\n        return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    if len(lst) == 0:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    min_max_lst = [min_val, max_val]\n    for i in lst:\n        if i not in min_max_lst:\n            min_max_lst.append(i)\n    return min_max_lst\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\n    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/73", "completion": "\n    # Your code here\n    # O(n) time | O(n) space\n    # n = len(arr)\n    # if n == 1:\n    #     return 0\n    # if n == 2:\n    #     return 1 if arr[0]!= arr[1] else 0\n    # if n == 3:\n    #     return 1 if arr[0]!= arr[1] and arr[0]!= arr[2] and arr[1]!= arr[2] else 0\n    # if n == 4:\n    #     return 1 if arr[0]!= arr[1] and arr[0]!= arr[2] and arr[0]!= arr[3] and arr[1]!= arr[2] and arr[1]!= arr[3] and arr[2]!= arr[3] else 0\n    # if n == 5:\n    #     return 1 if arr[0]!= arr[1] and arr[0]!= arr[2] and arr[0]!= arr[3] and arr[0]!= arr[4] and arr[1]!= arr[2] and arr[1]!= arr[3] and arr[1]!= arr[4] and arr[2]!= arr[3] and arr[2]!= arr[4] and arr[3]!= arr[4] else 0\n    # if n == 6:\n    #     return 1 if arr[0]!= arr[1] and arr[0]!= arr[2] and arr[0]!= arr[3] and arr[0]!= arr[4] and arr[0]!= arr[5] and arr[1]!= arr[2] and arr[1]!= arr[3] and arr[1]!= arr[4] and arr[1]!= arr[5] and arr[2]!= arr[3] and arr[2]!= arr[4] and arr[2]!= arr[5] and arr[3]!= arr[4] and arr[3]!= arr[5] and arr[4]!= arr[5] else 0\n    # if n == 7:\n    #     return 1 if arr[0]!= arr[1] and arr[0]!= arr[2] and arr["}
{"task_id": "HumanEval/74", "completion": "\n    if len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return [i for i in lst1 if i not in lst2]\n    else:\n        return [i for i in lst2 if i not in lst1]\n"}
{"task_id": "HumanEval/75", "completion": "\n    if a < 100:\n        if a % 2 == 0:\n            return False\n        for i in range(3, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/76", "completion": "\n    return n**int(x/n) == x\n\n"}
{"task_id": "HumanEval/77", "completion": "\n    return a**3 == abs(a)\n"}
{"task_id": "HumanEval/78", "completion": "\n    num = num.upper()\n    count = 0\n    for i in num:\n        if i in \"2357BDF\":\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/81", "completion": "\n    # Your code here\n    grades = [round(grade, 1) for grade in grades]\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "\n    return is_prime(len(string))\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    return sum(1 for i in range(1, n + 1) if str(i).startswith('1') or str(i).endswith('1'))\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    # your code here\n    return bin(N).count('1')\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[1::2])\n"}
{"task_id": "HumanEval/86", "completion": "\n    return''.join(sorted(s.split()))\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    # TODO: Write your code here\n    return array\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    # Your code here\n    return ''.join([alphabet[(alphabet.index(c) + 2) % len(alphabet)] for c in s])\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    min_val = min(lst)\n    for i in range(len(lst)):\n        if lst[i]!= min_val:\n            return lst[i]\n    return None\n"}
{"task_id": "HumanEval/91", "completion": "\n    return sum(1 for w in S.split() if w.startswith(\"I\"))\n"}
{"task_id": "HumanEval/92", "completion": "\n    if type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n"}
{"task_id": "HumanEval/93", "completion": "\n    # Your code here\n    return message.translate(str.maketrans(string.ascii_lowercase, string.ascii_uppercase))\n"}
{"task_id": "HumanEval/94", "completion": "\n    # your code here\n    lst = [int(i) for i in lst]\n    lst = [i for i in lst if i > 0]\n    lst = [i for i in lst if i % 2!= 0]\n    lst = [i for i in lst if i % 3!= 0]\n    lst = [i for i in lst if i % 5!= 0]\n    lst = [i for i in lst if i % 7!= 0]\n    lst = [i for i in lst if i % 11!= 0]\n    lst = [i for i in lst if i % 13!= 0]\n    lst = [i for i in lst if i % 17!= 0]\n    lst = [i for i in lst if i % 19!= 0]\n    lst = [i for i in lst if i % 23!= 0]\n    lst = [i for i in lst if i % 29!= 0]\n    lst = [i for i in lst if i % 31!= 0]\n    lst = [i for i in lst if i % 37!= 0]\n    lst = [i for i in lst if i % 41!= 0]\n    lst = [i for i in lst if i % 43!= 0]\n    lst = [i for i in lst if i % 47!= 0]\n    lst = [i for i in lst if i % 53!= 0]\n    lst = [i for i in lst if i % 59!= 0]\n    lst = [i for i in lst if i % 61!= 0]\n    lst = [i for i in lst if i % 67!= 0]\n    lst = [i for i in lst if i % 71!= 0]\n    lst = [i for i in lst if i % 73!= 0]\n    lst = [i for i in lst if i % 79!= 0]\n    lst = [i for i in lst if i % 83!= 0]\n    lst = [i for i in lst if i % 89!= 0]\n    lst = [i for i in lst if i % 97!= 0]\n    lst = [i for i in"}
{"task_id": "HumanEval/95", "completion": "\n    if len(dict) == 0:\n        return False\n    else:\n        keys = list(dict.keys())\n        if keys[0].islower():\n            for key in keys:\n                if not key.islower():\n                    return False\n        else:\n            for key in keys:\n                if not key.isupper():\n                    return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "\n    # TODO: Implement me\n    pass\n\n"}
{"task_id": "HumanEval/97", "completion": "\n    # Your code here\n    a = str(a)\n    b = str(b)\n    if len(a) > len(b):\n        a, b = b, a\n    a = a.zfill(len(b))\n    b = b.zfill(len(a))\n    result = 0\n    for i in range(len(a)):\n        result += int(a[i]) * int(b[i])\n    return result\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    return int(round(float(value)))\n"}
{"task_id": "HumanEval/100", "completion": "\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [n] + make_a_pile(n + 1)\n    else:\n        return [n] + make_a_pile(n + 2)\n\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.split()\n\n"}
{"task_id": "HumanEval/102", "completion": "\n    # Your code here\n    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    elif x % 2 == 0 and y % 2!= 0:\n        return y\n    elif x % 2!= 0 and y % 2 == 0:\n        return x\n    else:\n        return -1\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        return bin(int(round((n + m) / 2)))\n"}
{"task_id": "HumanEval/104", "completion": "\n    return sorted([x for x in x if not any(d % 2 == 0 for d in str(x))])\n\n"}
{"task_id": "HumanEval/105", "completion": "\n    # Your code here\n    arr.sort()\n    arr.reverse()\n    return [str(num) for num in arr if 1 <= num <= 9]\n"}
{"task_id": "HumanEval/106", "completion": "\n    # TODO: Implement this function\n    return [1 if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n\n"}
{"task_id": "HumanEval/107", "completion": "\n    # TODO: 100%\n    pass\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    return sum(1 for x in arr if sum(int(y) for y in str(abs(x))) > 0)\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] <= arr[1]\n    if arr[0] > arr[1]:\n        return False\n    if arr[0] == arr[1]:\n        return move_one_ball(arr[2:])\n    if arr[0] < arr[1]:\n        return move_one_ball(arr[1:])\n\n"}
{"task_id": "HumanEval/110", "completion": "\n    # Your code here\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            if lst2[i] % 2 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n    return \"YES\"\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    # Your code here\n    # return {letter: test.count(letter) for letter in set(test)}\n    # return {letter: test.count(letter) for letter in set(test) if test.count(letter) > 1}\n    # return {letter: test.count(letter) for letter in set(test) if test.count(letter) > 1}\n    # return {letter: test.count(letter) for letter in set(test) if test.count(letter) > 1}\n    # return {letter: test.count(letter) for letter in set(test) if test.count(letter) > 1}\n    # return {letter: test.count(letter) for letter in set(test) if test.count(letter) > 1}\n    # return {letter: test.count(letter) for letter in set(test) if test.count(letter) > 1}\n    # return {letter: test.count(letter) for letter in set(test) if test.count(letter) > 1}\n    # return {letter: test.count(letter) for letter in set(test) if test.count(letter) > 1}\n    # return {letter: test.count(letter) for letter in set(test) if test.count(letter) > 1}\n    # return {letter: test.count(letter) for letter in set(test) if test.count(letter) > 1}\n    # return {letter: test.count(letter) for letter in set(test) if test.count(letter) > 1}\n    # return {letter: test.count(letter) for letter in set(test) if test.count(letter) > 1}\n    # return {letter: test.count(letter) for letter in set(test) if test.count(letter) > 1}\n    # return {letter: test.count(letter) for letter in set(test) if test.count(letter) > 1}\n    # return {letter: test.count(letter) for letter in set(test) if test.count(letter) > 1}\n    # return {letter: test.count(letter) for letter in set(test) if test.count(letter) > 1}\n    # return {letter: test."}
{"task_id": "HumanEval/112", "completion": "\n    # Your code here\n    s = list(s)\n    c = list(c)\n    for i in c:\n        if i in s:\n            s.remove(i)\n    if s == s[::-1]:\n        return (\"\".join(s),True)\n    else:\n        return (\"\".join(s),False)\n"}
{"task_id": "HumanEval/113", "completion": "\n    return [\"the number of odd elements \" + str(len(lst[i]) - sum(int(x) for x in lst[i])) + \"n the str\" + str(i) + \"ng \" + str(i) + \" of the \" + str(i) + \"nput.\" for i in range(len(lst))]\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    cur_sum = 0\n    for num in nums:\n        cur_sum += num\n        min_sum = min(min_sum, cur_sum)\n        if cur_sum < 0:\n            cur_sum = 0\n    return min_sum\n\n"}
{"task_id": "HumanEval/115", "completion": "\n    # Initialize the number of rows and columns\n    rows = len(grid)\n    cols = len(grid[0])\n\n    # Initialize the number of times we need to fill the buckets\n    fills = 0\n\n    # Initialize the number of buckets\n    buckets = 0\n\n    # Initialize the number of units of water in the wells\n    units = 0\n\n    # Iterate through the rows\n    for row in range(rows):\n        # Iterate through the columns\n        for col in range(cols):\n            # If the current cell is a well\n            if grid[row][col] == 1:\n                # Increment the number of buckets\n                buckets += 1\n\n                # Increment the number of units of water in the well\n                units += 1\n\n                # If the number of units of water in the well is greater than the bucket capacity\n                if units > capacity:\n                    # Increment the number of times we need to fill the buckets\n                    fills += 1\n\n                    # Reset the number of units of water in the well\n                    units = 0\n\n    # If the number of buckets is greater than 0\n    if buckets > 0:\n        # Increment the number of times we need to fill the buckets\n        fills += math.ceil(units / capacity)\n\n    # Return the number of times we need to fill the buckets\n    return fills\n\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "\n    # Your code here\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiou\"\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if i == 0 or i == len(word) - 1:\n                return \"\"\n            if word[i - 1] not in vowels and word[i + 1] not in vowels:\n                return word[i]\n    return \"\"\n\n"}
{"task_id": "HumanEval/119", "completion": "\n    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if not stack else 'No'\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    # sort the array\n    arr.sort()\n    # return the last k elements\n    return arr[-k:]\n\n"}
{"task_id": "HumanEval/121", "completion": "\n    # Your code here\n    return sum([x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0])\n"}
{"task_id": "HumanEval/122", "completion": "\n    # TODO: Write your code here\n    # O(n) time | O(1) space\n    # n is the length of the array\n    # k is the number of elements to consider\n    # we need to keep track of the sum of the first k elements\n    # we need to keep track of the sum of the last k elements\n    # we need to keep track of the sum of the first k-1 elements\n    # we need to keep track of the sum of the last k-1 elements\n    # we need to keep track of the sum of the first k-2 elements\n    # we need to keep track of the sum of the last k-2 elements\n    # we need to keep track of the sum of the first k-3 elements\n    # we need to keep track of the sum of the last k-3 elements\n    # we need to keep track of the sum of the first k-4 elements\n    # we need to keep track of the sum of the last k-4 elements\n    # we need to keep track of the sum of the first k-5 elements\n    # we need to keep track of the sum of the last k-5 elements\n    # we need to keep track of the sum of the first k-6 elements\n    # we need to keep track of the sum of the last k-6 elements\n    # we need to keep track of the sum of the first k-7 elements\n    # we need to keep track of the sum of the last k-7 elements\n    # we need to keep track of the sum of the first k-8 elements\n    # we need to keep track of the sum of the last k-8 elements\n    # we need to keep track of the sum of the first k-9 elements\n    # we need to keep track of the sum of the last k-9 elements\n    # we need to keep track of the sum of the first k-10 elements\n    # we need to keep track of the sum of the last k-10 elements\n    # we need to keep track of the sum of the first k-11 elements\n    # we need to keep track of the sum of the last k-11 elements\n    # we need to keep track of the sum of the first k-12 elements\n    # we need to keep track of the sum of the last k-12 elements\n    # we need to keep track of the sum of the first k-13 elements\n    # we need to keep track of the sum"}
{"task_id": "HumanEval/123", "completion": "\n    if n == 1:\n        return [1]\n    else:\n        odd_collatz = []\n        while n!= 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            if n % 2!= 0:\n                odd_collatz.append(n)\n        return sorted(odd_collatz)\n"}
{"task_id": "HumanEval/124", "completion": "\n    if date == '':\n        return False\n    date_list = date.split('-')\n    if len(date_list)!= 3:\n        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    return True\n\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt[i:i+2] for i in range(0, len(txt), 2)]\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return lst[0] <= lst[1]\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n\n"}
{"task_id": "HumanEval/127", "completion": "\n    # your code here\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    return sum(map(lambda x: x * x, arr)) * prod(map(sign, arr))\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    # Write your code here.\n    n = len(grid)\n    if n == 1:\n        return grid[0]\n    if k == 1:\n        return min(grid[0])\n    if k == n:\n        return min(grid[-1])\n    if k == n * n:\n        return min(grid[0][0], grid[0][-1], grid[-1][0], grid[-1][-1])\n    if k == 2:\n        return min(grid[0][0], grid[0][-1], grid[-1][0], grid[-1][-1])\n    if k == 3:\n        return min(grid[0][0], grid[0][-1], grid[-1][0], grid[-1][-1], grid[0][1], grid[0][-2], grid[-1][1], grid[-1][-2])\n    if k == 4:\n        return min(grid[0][0], grid[0][-1], grid[-1][0], grid[-1][-1], grid[0][1], grid[0][-2], grid[-1][1], grid[-1][-2], grid[0][2], grid[0][-3], grid[-1][2], grid[-1][-3])\n    if k == 5:\n        return min(grid[0][0], grid[0][-1], grid[-1][0], grid[-1][-1], grid[0][1], grid[0][-2], grid[-1][1], grid[-1][-2], grid[0][2], grid[0][-3], grid[-1][2], grid[-1][-3], grid[0][3], grid[0][-4], grid[-1][3], grid[-1][-4])\n    if k == 6:\n        return min(grid[0][0], grid[0][-1], grid[-1][0], grid[-1][-1], grid[0][1], grid[0][-2], grid[-1][1], grid[-1][-2], grid[0][2], grid[0][-3], grid[-1][2], grid[-1][-3], grid[0][3], grid[0][-4], grid[-1][3], grid[-1][-4"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n    if n == 3:\n        return [1, 3, 2]\n    if n == 4:\n        return [1, 3, 2, 8]\n    if n == 5:\n        return [1, 3, 2, 8, 10]\n    if n == 6:\n        return [1, 3, 2, 8, 10, 12]\n    if n == 7:\n        return [1, 3, 2, 8, 10, 12, 18]\n    if n == 8:\n        return [1, 3, 2, 8, 10, 12, 18, 20]\n    if n == 9:\n        return [1, 3, 2, 8, 10, 12, 18, 20, 24]\n    if n == 10:\n        return [1, 3, 2, 8, 10, 12, 18, 20, 24, 30]\n    if n == 11:\n        return [1, 3, 2, 8, 10, 12, 18, 20, 24, 30, 32]\n    if n == 12:\n        return [1, 3, 2, 8, 10, 12, 18, 20, 24, 30, 32, 38]\n    if n == 13:\n        return [1, 3, 2, 8, 10, 12, 18, 20, 24, 30, 32, 38, 40]\n    if n == 14:\n        return [1, 3, 2, 8, 10, 12, 18, 20, 24, 30, 32, 38, 40, 48]\n    if n == 15:\n        return ["}
{"task_id": "HumanEval/131", "completion": "\n    if n < 10:\n        return n\n    else:\n        return n % 2 * digits(n // 10)\n\n"}
{"task_id": "HumanEval/132", "completion": "\n    if string == '':\n        return False\n    if string[0] == '[' and string[-1] == ']':\n        return is_nested(string[1:-1])\n    if string[0] == '[' and string[-1]!= ']':\n        return is_nested(string[1:])\n    if string[0]!= '[' and string[-1] == ']':\n        return is_nested(string[:-1])\n    if string[0]!= '[' and string[-1]!= ']':\n        return is_nested(string[:-1]) or is_nested(string[1:])\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum([int(math.ceil(i**2)) for i in lst])\n"}
{"task_id": "HumanEval/134", "completion": "\n    if txt == \"\":\n        return False\n    else:\n        return txt[-1].isalpha() and txt[-1] not in \" \"\n"}
{"task_id": "HumanEval/135", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "HumanEval/136", "completion": "\n    # Your code here\n    lst.sort()\n    if lst[0] < 0:\n        a = lst[0]\n    else:\n        a = None\n    if lst[-1] > 0:\n        b = lst[-1]\n    else:\n        b = None\n    return (a, b)\n"}
{"task_id": "HumanEval/137", "completion": "\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    return False\n\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n\n"}
{"task_id": "HumanEval/140", "completion": "\n    return re.sub(r' +', '-', text)\n"}
{"task_id": "HumanEval/141", "completion": "\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.')!= 1:\n        return 'No'\n    if file_name.split('.')[0] == '':\n        return 'No'\n    if file_name.split('.')[0][0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n\n"}
{"task_id": "HumanEval/142", "completion": "\n    # Your code here\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n            sum += lst[i]**3\n    return sum\n"}
{"task_id": "HumanEval/143", "completion": "\n    words = sentence.split()\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    prime_words = []\n    for word in words:\n        if len(word) in prime_numbers:\n            prime_words.append(word)\n    return \" \".join(prime_words)\n\n"}
{"task_id": "HumanEval/144", "completion": "\n    # Your code here\n    x = Fraction(x)\n    n = Fraction(n)\n    return x * n == Fraction(x.numerator * n.denominator, x.denominator * n.numerator)\n\n"}
{"task_id": "HumanEval/145", "completion": "\n    return sorted(nums, key=lambda x: sum(map(int, str(abs(x)))))\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for i in nums:\n        if i > 10 and i % 10 in [1, 3, 5, 7, 9] and i // 10 % 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n"}
{"task_id": "HumanEval/149", "completion": "\n    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)))\n\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n % 2 == 0:\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "\n    # Your code here\n    return sum([i**2 for i in lst if i%2!=0])\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(guess-score) for score,guess in zip(game,guess)]\n"}
{"task_id": "HumanEval/153", "completion": "\n    # Your code here\n    strength = []\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for letter in extension:\n            if letter.isupper():\n                cap += 1\n            elif letter.islower():\n                sm += 1\n        strength.append(cap - sm)\n    max_strength = max(strength)\n    for i in range(len(strength)):\n        if strength[i] == max_strength:\n            return class_name + '.' + extensions[i]\n"}
{"task_id": "HumanEval/154", "completion": "\n    if len(a) < len(b):\n        return False\n    if a == b:\n        return True\n    if a[0:len(b)] == b:\n        return True\n    if a[0:len(b)] == b[::-1]:\n        return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    if num < 0:\n        num = -num\n    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    # TODO: Implement this function\n    pass\n\n"}
{"task_id": "HumanEval/157", "completion": "\n    return a**2 + b**2 == c**2\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_word = word\n            max_count = count\n    return max_word\n\n"}
{"task_id": "HumanEval/159", "completion": "\n    if number + need <= remaining:\n        return [number + need, remaining - (number + need)]\n    else:\n        return [remaining, 0]\n"}
{"task_id": "HumanEval/160", "completion": "\n    # Your code here\n    #raise NotImplementedError()\n    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"The length of operator list is not equal to the length of operand list minus one.\")\n    if len(operator) == 0:\n        raise ValueError(\"The length of operator list is zero.\")\n    if len(operand) == 0:\n        raise ValueError(\"The length of operand list is zero.\")\n    if len(operand) == 1:\n        raise ValueError(\"The length of operand list is one.\")\n    if len(operand) == 2:\n        raise ValueError(\"The length of operand list is two.\")\n    if len(operator) == 1:\n        if operator[0] == '+':\n            return operand[0] + operand[1]\n        elif operator[0] == '-':\n            return operand[0] - operand[1]\n        elif operator[0] == '*':\n            return operand[0] * operand[1]\n        elif operator[0] == '//':\n            return operand[0] // operand[1]\n        elif operator[0] == '**':\n            return operand[0] ** operand[1]\n        else:\n            raise ValueError(\"The operator is not valid.\")\n    else:\n        if operator[0] == '+':\n            return operand[0] + do_algebra(operator[1:], operand[1:])\n        elif operator[0] == '-':\n            return operand[0] - do_algebra(operator[1:], operand[1:])\n        elif operator[0] == '*':\n            return operand[0] * do_algebra(operator[1:], operand[1:])\n        elif operator[0] == '//':\n            return operand[0] // do_algebra(operator[1:], operand[1:])\n        elif operator[0] == '**':\n            return operand[0] ** do_algebra(operator[1:], operand[1:])\n        else:\n            raise ValueError(\"The operator is not valid.\")\n"}
{"task_id": "HumanEval/161", "completion": "\n    return s.swapcase() if s.isalpha() else s[::-1]\n"}
{"task_id": "HumanEval/162", "completion": "\n    if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    # Your code here\n    return [i for i in range(a, b+1) if i%2==0]\n"}
