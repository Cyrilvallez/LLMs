{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    pass\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    return sum(abs(x - sum(numbers) / len(numbers)) for x in numbers) / len(numbers)\n"}
{"task_id": "HumanEval/5", "completion": "\n    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + [numbers[2]] + [delimeter] + [numbers[3]] + [delimeter] + [numbers[4]] + [delimeter] + [numbers[5]] + [delimeter] + [numbers[6]] + [delimeter] + [numbers[7]] + [delimeter] + [numbers[8]] + [delimeter] + [numbers[9]] + [delimeter] + [numbers[10]] + [delimeter] + [numbers[11]] + [delimeter] + [numbers[12]] + [delimeter] + [numbers[13]] + [delimeter] + [numbers[14]] + [delimeter] + [numbers[15]] + [delimeter] + [numbers[16]] + [delimeter] + [numbers[17]] + [delimeter] + [numbers[18]] + [delimeter] + [numbers[19]] + [delimeter] + [numbers[20]] + [delimeter] + [numbers[21]] + [delimeter] + [numbers[22]] + [delimeter] + [numbers[23]] + [delimeter] + [numbers[24]] + [delimeter] + [numbers[25]] + [delimeter] + [numbers[26]] + [delimeter] + [numbers[27]] + [delimeter] + [numbers[28]] + [delimeter] + [numbers[29]] + [delimeter] + [numbers[30]] + [delimeter] + [numbers[31]] + [delimeter] + [numbers[32]] + [delimeter] + [numbers[33]] + [delimeter] + [numbers[34]] + [delimeter] + [numbers[35]] + [delimeter] + [numbers[36]] + [delimeter] + [numbers[37]] + [delimeter] + [numbers[38]] + [delimeter] + [numbers[39]] + [delimeter] + [numbers[40]] + [delimeter] + [numbers[41]] + [delimeter] + [numbers[42]] + [delimeter] + [numbers[4"}
{"task_id": "HumanEval/6", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:]))\n    return max_list\n"}
{"task_id": "HumanEval/10", "completion": "\n    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[i:][::-1]\n    return ''\n"}
{"task_id": "HumanEval/11", "completion": "\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n"}
{"task_id": "HumanEval/12", "completion": "\n    if len(strings) == 0:\n        return None\n    else:\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\n    if a == 0:\n        return b\n    return greatest_common_divisor(b % a, a)\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "HumanEval/15", "completion": "\n    return''.join(str(i) for i in range(n+1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n"}
{"task_id": "HumanEval/17", "completion": "\n    return [4 if x == 'o' else 2 if x == 'o|' else 1 for x in music_string.split()]\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "\n    return''.join(sorted(numbers.split()))\n"}
{"task_id": "HumanEval/20", "completion": "\n    return min(numbers), max(numbers)\n"}
{"task_id": "HumanEval/21", "completion": "\n    return [i/min(numbers) for i in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n, 1, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "\n    pass\n"}
{"task_id": "HumanEval/26", "completion": "\n    return list(set(numbers))\n"}
{"task_id": "HumanEval/27", "completion": "\n    return string.swapcase()\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    \"\"\"\n    Finds zero point of polynomial with coefficients xs.\n    \"\"\"\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[0] == 0:\n        raise ValueError(\"xs[0] must be non zero\")\n    if xs[-1] == 0:\n        raise ValueError(\"xs[-1] must be non zero\")\n    for i in range(len(xs) // 2, -1, -1):\n        if xs[i]!= 0:\n            break\n    xs = xs[i:]\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            break\n    xs = xs[:i]\n    if len(xs) == 1:\n        return -xs[0] / xs[1]\n    else:\n        return find_zero(xs)\n"}
{"task_id": "HumanEval/33", "completion": "\n    l_new = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_new.append(l[i])\n        else:\n            l_new.append(sorted(l)[i])\n    return l_new\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    l1 = []\n    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    l1.sort()\n    l2.sort()\n    l3 = l1 + l2\n    return l3\n"}
{"task_id": "HumanEval/38", "completion": "\n    \"\"\"\n    returns decoded string by uncycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # uncycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[2:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\n    pass\n"}
{"task_id": "HumanEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if i!= j and j!= k and i!= k:\n                    if l[i] + l[j] + l[k] == 0:\n                        return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n    return 0\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [i+1 for i in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    return bin(x)[2:]\n"}
{"task_id": "HumanEval/45", "completion": "\n    return a * h / 2\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(l)//2]\n"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    return pow(2, n, p)\n"}
{"task_id": "HumanEval/50", "completion": "\n    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiou'\n    return ''.join([c for c in text if c not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "\n    return all(x < t for x in l)\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    return set(s0) == set(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(set(l1).intersection(set(l2)))\n"}
{"task_id": "HumanEval/59", "completion": "\n    \"\"\"\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"\n    if n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return i\n"}
{"task_id": "HumanEval/60", "completion": "\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/62", "completion": "\n    return [xs[i] * (i + 1) for i in range(len(xs) - 1)]\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    return str(x)[shift:] + str(x)[:shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum([ord(i) for i in s if i.isupper()])\n"}
{"task_id": "HumanEval/67", "completion": "\n    return n - int(s.split()[0]) - int(s.split()[3])\n"}
{"task_id": "HumanEval/68", "completion": "\n    if not arr:\n        return []\n    min_val = min(arr)\n    min_index = arr.index(min_val)\n    return [min_val, min_index]\n"}
{"task_id": "HumanEval/69", "completion": "\n    for i in lst:\n        if lst.count(i) > i:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    # Your code here\n    return lst\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and b + c > a and a + c > b:\n        p = (a + b + c) / 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\n    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False\nwill_it_fly([1, 2], 5) # 1+2 is less than the maximum possible weight, but it's unbalanced.\nwill_it_fly([3, 2, 3], 1) # it's balanced, but 3+2+3 is more than the maximum possible weight.\nwill_it_fly([3, 2, 3], 9) # 3+2+3 is less than the maximum possible weight, and it's balanced.\nwill_it_fly([3], 5) # 3 is less than the maximum possible weight, and it's balanced.\n"}
{"task_id": "HumanEval/73", "completion": "\n    # Your code here\n    return 0\n"}
{"task_id": "HumanEval/74", "completion": "\n    if len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return [i for i in lst1 if i not in lst2]\n    else:\n        return [i for i in lst2 if i not in lst1]"}
{"task_id": "HumanEval/75", "completion": "\n    if a < 100:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/76", "completion": "\n    return n**int(x/n) == x\n"}
{"task_id": "HumanEval/77", "completion": "\n    return a**3 == 0\n"}
{"task_id": "HumanEval/78", "completion": "\n    return 0\n"}
{"task_id": "HumanEval/79", "completion": "\n    return \"db\" + bin(decimal)[2:] + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "\n    if len(string) == 1:\n        return True\n    elif len(string) == 2:\n        return True\n    elif len(string) == 3:\n        return True\n    elif len(string) == 4:\n        return True\n    elif len(string) == 5:\n        return True\n    elif len(string) == 6:\n        return True\n    elif len(string) == 7:\n        return True\n    elif len(string) == 8:\n        return True\n    elif len(string) == 9:\n        return True\n    elif len(string) == 10:\n        return True\n    elif len(string) == 11:\n        return True\n    elif len(string) == 12:\n        return True\n    elif len(string) == 13:\n        return True\n    elif len(string) == 14:\n        return True\n    elif len(string) == 15:\n        return True\n    elif len(string) == 16:\n        return True\n    elif len(string) == 17:\n        return True\n    elif len(string) == 18:\n        return True\n    elif len(string) == 19:\n        return True\n    elif len(string) == 20:\n        return True\n    elif len(string) == 21:\n        return True\n    elif len(string) == 22:\n        return True\n    elif len(string) == 23:\n        return True\n    elif len(string) == 24:\n        return True\n    elif len(string) == 25:\n        return True\n    elif len(string) == 26:\n        return True\n    elif len(string) == 27:\n        return True\n    elif len(string) == 28:\n        return True\n    elif len(string) == 29:\n        return True\n    elif len(string) == 30:\n        return True\n    elif len(string) == 31:\n        return True\n    elif len(string) == 32:\n        return True\n    elif len(string) == 33:\n        return True\n    elif len(string) == 34:\n        return True\n    elif len(string) == 35:\n        return True\n    elif len(string) == 36:\n        return True\n    elif len(string) == 37:\n        return True\n    elif len"}
{"task_id": "HumanEval/83", "completion": "\n    count = 0\n    for i in range(1, 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "\n    return bin(N).count('1')\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[::2])\n"}
{"task_id": "HumanEval/86", "completion": "\n    return ''.join(sorted(s))\n"}
{"task_id": "HumanEval/87", "completion": "\n    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: (x[0], -x[1]))\n"}
{"task_id": "HumanEval/88", "completion": "\n    # your code here\n    return array\n"}
{"task_id": "HumanEval/89", "completion": "\n    return ''.join([chr(ord(c) + 2) for c in s])\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    min_val = lst[0]\n    min_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n            min_index = i\n    return lst[min_index + 1]\n"}
{"task_id": "HumanEval/91", "completion": "\n    return S.count(\"I\")\n"}
{"task_id": "HumanEval/92", "completion": "\n    if x == y + z or y == x + z or z == x + y:\n        if x.is_integer() and y.is_integer() and z.is_integer():\n            return True\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "\n    return message.translate(str.maketrans('aeiou', 'AEIOU')).translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz'[2:] + 'abcdefghijklmnopqrstuvwxyz'[0:2]))\n"}
{"task_id": "HumanEval/94", "completion": "\n    # your code here\n    return 0\n"}
{"task_id": "HumanEval/95", "completion": "\n    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if type(key) == str:\n                if key.islower() == False and key.isupper() == False:\n                    return False\n            else:\n                return False\n        return True\n"}
{"task_id": "HumanEval/96", "completion": "\n\n\"\"\"\n"}
{"task_id": "HumanEval/97", "completion": "\n    return a * b\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].isupper():\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    return int(value) if value.is_integer() else int(value) + 1 if value > 0 else int(value) - 1\n"}
{"task_id": "HumanEval/100", "completion": "\n    pile = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n        pile.append(n)\n    return pile\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.split()\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n"}
{"task_id": "HumanEval/104", "completion": "\n    return sorted([i for i in x if not any(d%2==0 for d in str(i))])\n"}
{"task_id": "HumanEval/105", "completion": "\n    # Your code here\n    return []\n"}
{"task_id": "HumanEval/106", "completion": "\n\treturn [i if i%2==0 else sum(range(1,i+1)) for i in range(1,n+1)]\n"}
{"task_id": "HumanEval/107", "completion": "\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n"}
{"task_id": "HumanEval/108", "completion": "\n    return len([x for x in arr if sum(int(i) for i in str(abs(x))) > 0])\n"}
{"task_id": "HumanEval/109", "completion": "\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] <= arr[1]\n    if arr[0] <= arr[1]:\n        return move_one_ball(arr[1:])\n    else:\n        return move_one_ball(arr[1:]) or move_one_ball(arr[1:])\n"}
{"task_id": "HumanEval/110", "completion": "\n    # Your code here\n    return \"YES\" if sum(lst1)%2==0 else \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    # your code here\n    return dict(Counter(test.split()))\n"}
{"task_id": "HumanEval/112", "completion": "\n    pass\n\"\"\"\n"}
{"task_id": "HumanEval/113", "completion": "\n    return [f\"the number of odd elements {sum(int(i)%2 for i in s)} in the string {s} of the input.\" for s in lst]\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    cur_sum = 0\n    for num in nums:\n        cur_sum += num\n        min_sum = min(min_sum, cur_sum)\n        if cur_sum < 0:\n            cur_sum = 0\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    m, n = len(grid), len(grid[0])\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                dp[i][j] = math.inf\n            else:\n                dp[i][j] = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                continue\n            if i - 1 >= 0:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1)\n            if j - 1 >= 0:\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)\n    return dp[m - 1][n - 1]\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "\n    return [word for word in s.split() if len([c for c in word if c.isalpha()]) == n]\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    stack = []\n    for i in lst:\n        if i == '(':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    arr.sort()\n    return arr[-k:]\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2!= 0)\n"}
{"task_id": "HumanEval/122", "completion": "\n    return sum(arr[:k])\n"}
{"task_id": "HumanEval/123", "completion": "\n    # Fill this in.\n"}
{"task_id": "HumanEval/124", "completion": "\n    if len(date) == 0:\n        return False\n    date = date.split('-')\n    if len(date)!= 3:\n        return False\n    if int(date[0]) < 1 or int(date[0]) > 12:\n        return False\n    if int(date[1]) < 1 or int(date[1]) > 31:\n        if int(date[0]) == 1 or int(date[0]) == 3 or int(date[0]) == 5 or int(date[0]) == 7 or int(date[0]) == 8 or int(date[0]) == 10 or int(date[0]) == 12:\n            return False\n        if int(date[0]) == 4 or int(date[0]) == 6 or int(date[0]) == 9 or int(date[0]) == 11:\n            return False\n        if int(date[0]) == 2:\n            if int(date[1]) > 29:\n                return False\n    if int(date[2]) < 1900 or int(date[2]) > 2019:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "\n    return txt.split() if \" \" in txt else txt.split(\",\") if \",\" in txt else sum(ord(c) % 2 for c in txt.lower())\n"}
{"task_id": "HumanEval/126", "completion": "\n    return lst == sorted(lst)\n"}
{"task_id": "HumanEval/127", "completion": "\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    return \"YES\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    # your code here\n    pass\n"}
{"task_id": "HumanEval/129", "completion": "\n    # Write your code here.\n    n = len(grid)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = grid[i][0]\n    for j in range(n):\n        dp[0][j] = grid[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[n-1][n-1]\n"}
{"task_id": "HumanEval/130", "completion": "\n\tif n == 1:\n\t\treturn [1]\n\tif n == 2:\n\t\treturn [1, 3]\n\tif n == 3:\n\t\treturn [1, 3, 2]\n\tif n == 4:\n\t\treturn [1, 3, 2, 8]\n\tif n == 5:\n\t\treturn [1, 3, 2, 8, 18]\n\tif n == 6:\n\t\treturn [1, 3, 2, 8, 18, 11]\n\tif n == 7:\n\t\treturn [1, 3, 2, 8, 18, 11, 20]\n\tif n == 8:\n\t\treturn [1, 3, 2, 8, 18, 11, 20, 15]\n\tif n == 9:\n\t\treturn [1, 3, 2, 8, 18, 11, 20, 15, 26]\n\tif n == 10:\n\t\treturn [1, 3, 2, 8, 18, 11, 20, 15, 26, 21]\n\tif n == 11:\n\t\treturn [1, 3, 2, 8, 18, 11, 20, 15, 26, 21, 38]\n\tif n == 12:\n\t\treturn [1, 3, 2, 8, 18, 11, 20, 15, 26, 21, 38, 28]\n\tif n == 13:\n\t\treturn [1, 3, 2, 8, 18, 11, 20, 15, 26, 21, 38, 28, 45]\n\tif n == 14:\n\t\treturn [1, 3, 2, 8, 18, 11, 20, 15, 26, 21"}
{"task_id": "HumanEval/131", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n%10 * digits(n//10)\n"}
{"task_id": "HumanEval/132", "completion": "\n    if string.count('[') == string.count(']'):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum([int(i**2) for i in lst])\n"}
{"task_id": "HumanEval/134", "completion": "\n    if txt == \"\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \" \":\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    if lst == []:\n        return (None, None)\n    else:\n        neg = []\n        pos = []\n        for i in lst:\n            if i < 0:\n                neg.append(i)\n            elif i > 0:\n                pos.append(i)\n        if neg == []:\n            return (None, min(pos))\n        elif pos == []:\n            return (max(neg), None)\n        else:\n            return (max(neg), min(pos))\n"}
{"task_id": "HumanEval/137", "completion": "\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "\n    # your code here\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "\n    # your code here\n    return 1\n"}
{"task_id": "HumanEval/140", "completion": "\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n"}
{"task_id": "HumanEval/141", "completion": "\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.')!= 1:\n        return 'No'\n    if file_name.split('.')[0] == '':\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\n    # your code here\n    return sum(i**2 if i%3==0 and i%4!=0 else i**3 if i%4==0 else i for i in lst)\n"}
{"task_id": "HumanEval/143", "completion": "\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])\n"}
{"task_id": "HumanEval/144", "completion": "\n    return eval(x) == eval(n)\n"}
{"task_id": "HumanEval/145", "completion": "\n    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n"}
{"task_id": "HumanEval/146", "completion": "\n    return len([x for x in nums if x > 10 and (x % 10) % 2 == 1 and x % 100 % 10 == 1])\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n) if a[i] + a[j] + a[k] % 3 == 0)\n"}
{"task_id": "HumanEval/148", "completion": "\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    return tuple(sorted(planets[planet1] & planets[planet2]))\n"}
{"task_id": "HumanEval/149", "completion": "\n\"\"\"\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n % 2 == 0:\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "\n    return sum([i**2 for i in lst if i%2!=0])\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(g-s) for g,s in zip(guess,game)]\n"}
{"task_id": "HumanEval/153", "completion": "\n    return class_name + '.' + max(extensions, key=lambda x: (sum(c.isupper() for c in x), sum(c.islower() for c in x)))\n"}
{"task_id": "HumanEval/154", "completion": "\n    return b in a or b in a[1:] + a[:1]\n"}
{"task_id": "HumanEval/155", "completion": "\n    even = 0\n    odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"}
{"task_id": "HumanEval/156", "completion": "\n    pass\n\"\"\"\n"}
{"task_id": "HumanEval/157", "completion": "\n    return a**2 + b**2 == c**2\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_word = word\n            max_count = count\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    return [number + need, remaining - need]\n\"\"\"\n"}
{"task_id": "HumanEval/160", "completion": "\n    pass\n\"\"\"\n"}
{"task_id": "HumanEval/161", "completion": "\n    return s[::-1].swapcase()\n"}
{"task_id": "HumanEval/162", "completion": "\n    if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    return [x for x in range(a, b+1) if x % 2 == 0]\n"}
