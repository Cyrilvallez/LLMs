{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    paren_list = []\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', ' ( ')\n    paren_string = paren_string.replace(')', ' ) ')\n    paren_string = paren_string.split()\n    paren_string = ''.join(paren_string)\n    paren_string = paren_string.split(')')\n    for i in paren_string:\n        if i != '':\n            paren_list.append(i)\n    return paren_list\n"}
{"task_id": "HumanEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    # your code here\n    return 0.0"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(delimeter)\n            result.append(numbers[i])\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    # TODO: Write your code here\n    # return []\n    # print(paren_string)\n    # print(paren_string.split())\n    # print(paren_string.split(' '))\n    # print(paren_string.split(' ')[0])\n    # print(paren_string.split(' ')[1])\n    # print(paren_string.split(' ')[2])\n    # print(paren_string.split(' ')[3])\n    # print(paren_string.split(' ')[4])\n    # print(paren_string.split(' ')[5])\n    # print(paren_string.split(' ')[6])\n    # print(paren_string.split(' ')[7])\n    # print(paren_string.split(' ')[8])\n    # print(paren_string.split(' ')[9])\n    # print(paren_string.split(' ')[10])\n    # print(paren_string.split(' ')[11])\n    # print(paren_string.split(' ')[12])\n    # print(paren_string.split(' ')[13])\n    # print(paren_string.split(' ')[14])\n    # print(paren_string.split(' ')[15])\n    # print(paren_string.split(' ')[16])\n    # print(paren_string.split(' ')[17])\n    # print(paren_string.split(' ')[18])\n    # print(paren_string.split(' ')[19])\n    # print(paren_string.split(' ')[20])\n    # print(paren_string.split(' ')[21])\n    # print(paren_string.split(' ')[22])\n    # print(paren_string.split(' ')[23])\n    # print(paren_string.split(' ')[24])\n    # print(paren_string.split(' ')[25])\n    # print(paren_string.split(' ')[26])\n    # print(paren_string.split(' ')[27])\n    # print(paren_string.split(' ')[28])\n    # print(paren_string.split(' ')[29])\n    # print(paren_string.split(' ')[30"}
{"task_id": "HumanEval/7", "completion": "\n    return [string for string in strings if substring in string]\n\nWrite a function filter_by_substring(strings: List[str], substring: str) -> List[str] to solve the following problem:\nFilter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\nfrom typing import List"}
{"task_id": "HumanEval/8", "completion": "\n    if len(numbers) == 0:\n        return 0, 1\n    else:\n        return sum(numbers), reduce(lambda x, y: x * y, numbers)\n"}
{"task_id": "HumanEval/9", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(max(numbers[i], result[i - 1]))\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "\n    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    if not string:\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + make_palindrome(string[i:])\n    return string\n"}
{"task_id": "HumanEval/11", "completion": "\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    return max(strings, key=len)\n"}
{"task_id": "HumanEval/13", "completion": "\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string)+1)]\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n + 1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    # your code here\n    return len(set(string.lower()))\n\nWrite a function count_distinct_characters(string: str) -> int to solve the following problem:\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4"}
{"task_id": "HumanEval/17", "completion": "\n    return [4 if i == 'o' else 2 if i == 'o|' else 1 for i in music_string]\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n\nWrite a function how_many_times(string: str, substring: str) -> int to solve the following problem:\nFind how many times a given substring can be found in the original string. Don't count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n1\n>>> how_many_times('aaaa', 'aa')\n2"}
{"task_id": "HumanEval/19", "completion": "\n    numbers = numbers.split()\n    numbers = [int(i) for i in numbers]\n    numbers.sort()\n    numbers = [str(i) for i in numbers]\n    return ' '.join(numbers)\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    return (numbers[0], numbers[1])\n\n\"\"\"\n\nfrom typing import List, Tuple\n\n"}
{"task_id": "HumanEval/21", "completion": "\n    return [(x-min(numbers))/(max(numbers)-min(numbers)) for x in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if type(value) == int]\n\nWrite a function filter_strings(values: List[Any]) -> List[str] to solve the following problem:\nFilter given list of any python values only for strings\n>>> filter_strings(['a', 3.14, 5])\n['a', 'a']\n>>> filter_strings([1, 2, 3, 'abc', {}, []])\n['abc', 'abc', 'abc']\nfrom typing import List, Any"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\nWrite a function strlen(string: str) -> int to solve the following problem:\nReturn length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n, 1, -1):\n        if n % i == 0:\n            return i\n    return 1\n\nWrite a function smallest_multiple(n: int) -> int to solve the following problem:\nFor a given number n, find the smallest number that divides n evenly, larger than n\n>>> smallest_multiple(15)\n30"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    return list(set(numbers))\n"}
{"task_id": "HumanEval/27", "completion": "\n    return string.swapcase()\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [string for string in strings if string.startswith(prefix)]\n\nWrite a function filter_by_suffix(strings: List[str], suffix: str) -> List[str] to solve the following problem:\nFilter an input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([], 'a')\n[]\n>>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'y')\n['bcd', 'cde']\nfrom typing import List"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]"}
{"task_id": "HumanEval/31", "completion": "\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nWrite a function is_palindrome(s) to check whether a string is a palindrome or not.\n>>> is_palindrome(\"madam\")\nTrue\n>>> is_palindrome(\"madam, i'm madam\")\nTrue\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>> is_palindrome(\"madam, i am madam\")\nFalse\n>>>"}
{"task_id": "HumanEval/32", "completion": "\n    \"\"\"\n    Finds x such that poly(x) = 0.\n    Assumes xs is a list of coefficients of a polynomial.\n    Returns only one zero point.\n    \"\"\"\n    if len(xs) % 2 == 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\")\n    if xs[0] == 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\")\n    if xs[0] < 0:\n        return -find_zero(xs[::-1])\n    xs = xs[1:]\n    return find_zero(xs) / xs[0]\n"}
{"task_id": "HumanEval/33", "completion": "\n    l1 = []\n    l2 = []\n    l3 = []\n    for i in l:\n        if i % 3 == 0:\n            l3.append(i)\n        else:\n            l1.append(i)\n    l2 = sorted(l1)\n    l3.extend(l2)\n    return l3\n\nWrite a function sort_third(l: list) to solve the following problem:\nThis function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1, 2, 3])\n[1, 2, 3]\n>>> sort_third([5, 6, 3, 4, 8, 9, 2])\n[2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(list(set(l)))\n"}
{"task_id": "HumanEval/35", "completion": "\n    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    l1 = []\n    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    l2.sort()\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = l2[0]\n            l2.pop(0)\n    return l\n\nWrite a function sort_odd(l: list) to solve the following problem:\nThis function takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its values at the odd indicies are equal to the values of the odd indicies of l, but sorted.\n>>> sort_odd([1, 2, 3])\n[1, 2, 3]\n>>> sort_odd([5, 6, 3, 4])\n[5, 3, 6, 4]"}
{"task_id": "HumanEval/38", "completion": "\n    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[0:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib = [2, 3]\n        for i in range(4, n + 1):\n            fib.append(fib[i - 1] + fib[i - 2])\n            for j in range(2, int(fib[i] ** 0.5) + 1):\n                if fib[i] % j == 0:\n                    break\n            else:\n                if is_prime(fib[i]):\n                    return fib[i]"}
{"task_id": "HumanEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n    \"\"\"\n    :param n: number of cars\n    :return: number of collisions\n    \"\"\"\n    # your code here\n    return 0\n"}
{"task_id": "HumanEval/42", "completion": "\n    for i in range(len(l)):\n        l[i] += 1\n    return l"}
{"task_id": "HumanEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\nWrite a function is_palindrome(s) that takes a string as an input and returns True if the string is a palindrome and False otherwise.\n>>> is_palindrome('tacocat')\nTrue\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacocatc')\nFalse\n>>> is_palindrome('tacoc"}
{"task_id": "HumanEval/44", "completion": "\n    if base < 10:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n"}
{"task_id": "HumanEval/45", "completion": "\n    return a*h/2"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\nWrite a function median_odd(l: list) to solve the following problem:\nReturn median of elements in the list l.\n>>> median_odd([3, 1, 2, 4, 5])\n3\n>>> median_odd([-10, 4, 6, 1000, 10, 20])\n15.0"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    return pow(2, n, p)\n\nWrite a function modp(n: int, p: int) to solve the following problem:\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1"}
{"task_id": "HumanEval/50", "completion": "\n    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiou'\n    for i in vowels:\n        text = text.replace(i, '')\n    return text\n"}
{"task_id": "HumanEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\nWrite a function below_threshold(l: list, t: int) to solve the following problem:\nReturn True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\nWrite a function subtract(x: int, y: int) to solve the following problem:\nSubtract two numbers x and y\n>>> subtract(2, 3)\n-1\n>>> subtract(5, 7)\n-2"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n\"\"\"\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"}
{"task_id": "HumanEval/56", "completion": "\n    if brackets == \"<\":\n        return False\n    elif brackets == \">\":\n        return True\n    else:\n        return False\n\nWrite a function is_palindrome(word: str) to check if a word is a palindrome.\n>>> is_palindrome(\"madam\")\nTrue\n>>> is_palindrome(\"madam i.m. a.m.\")\nTrue\n>>> is_palindrome(\"madam i.m. a.m\")\nFalse\n>>> is_palindrome(\"madam i.m. a.m. i.m. a.m.\")\nTrue\n>>> is_palindrome(\"madam i.m. a.m. i.m. a.m. i.m. a.m.\")\nFalse\n>>> is_palindrome(\"madam i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m.\")\nFalse\n>>> is_palindrome(\"madam i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m.\")\nFalse\n>>> is_palindrome(\"madam i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m. i.m. a.m"}
{"task_id": "HumanEval/57", "completion": "\n    if l[0] < l[-1]:\n        for i in range(len(l)-1):\n            if l[i] > l[i+1]:\n                return False\n        return True\n    else:\n        for i in range(len(l)-1):\n            if l[i] < l[i+1]:\n                return False\n        return True\n"}
{"task_id": "HumanEval/58", "completion": "\n    l1.sort()\n    l2.sort()\n    i = 0\n    j = 0\n    res = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            res.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return res\n"}
{"task_id": "HumanEval/59", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"}
{"task_id": "HumanEval/61", "completion": "\n    if brackets == \"\":\n        return True\n    if brackets[0] == \")\":\n        return False\n    if brackets[0] == \"(\":\n        return correct_bracketing(brackets[1:])\n    return correct_bracketing(brackets[1:])\n\nWrite a function is_palindrome(word: str) to check if a word is a palindrome.\n>>> is_palindrome(\"\")\nTrue\n>>> is_palindrome(\"a\")\nTrue\n>>> is_palindrome(\"ab\")\nFalse\n>>> is_palindrome(\"abba\")\nTrue\n>>> is_palindrome(\"abcba\")\nTrue\n>>> is_palindrome(\"abc\")\nFalse\n>>> is_palindrome(\"abcba\")\nTrue\n>>> is_palindrome(\"abcdefghijklmnopqrstuvwxyz\")\nTrue\n>>> is_palindrome(\"abcdefghijklmnopqrstuvwxyzabcd\")\nFalse\n>>> is_palindrome(\"abcdefghijklmnopqrstuvwxyzabc\")\nFalse\n>>> is_palindrome(\"abcdefghijklmnopqrstuvwxyzabcdabcd\")\nTrue\n>>> is_palindrome(\"abcdefghijklmnopqrstuvwxyzabcdabce\")\nFalse\n>>> is_palindrome(\"abcdefghijklmnopqrstuvwxyzabcdabcdabcd\")\nTrue\n>>> is_palindrome(\"abcdefghijklmnopqrstuvwxyzabcdabcdabce\")\nFalse\n>>> is_palindrome(\"abcdefghijklmnopqrstuvwxyzabcdabcdabcdabcd\")\nTrue\n>>> is_palindrome(\"abcdefghijklmnopqrstuvwxyzabcdabcdabceabcde\")\nFalse\n>>> is_palindrome(\"abcdefghijklmnopqrstuvwxyzabcdabcdabceabcdeabcde\")\nTrue\n>>> is_palindrome(\"abcdefghijklmnopqrstuvwxyzabcdabcdabceabcdeabcdef\")\nFalse\n"}
{"task_id": "HumanEval/62", "completion": "\n    if len(xs) == 1:\n        return [0]\n    else:\n        return [xs[1]] + [xs[i] * i for i in range(2, len(xs))]\n\nWrite a function integral(xs: list) to solve the following problem:\nxs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\nReturn integral of this polynomial in the same form.\n>>> integral([1, 2, 3])\n[1, 2, 3]\n>>> integral([1, 2, 3, 4])\n[1, 3, 7, 10]"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "\n    count = 0\n    for i in s:\n        if i in 'aeiouy':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n\nWrite a function is_palindrome(x) to check whether the integer x is a palindrome.\n>>> is_palindrome(121)\nTrue\n>>> is_palindrome(1221)\nTrue\n>>> is_palindrome(12321)\nTrue\n>>> is_palindrome(123421)\nTrue\n>>> is_palindrome(123454321)\nTrue\n>>> is_palindrome(123454322)\nFalse"}
{"task_id": "HumanEval/66", "completion": "\n    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i) - ord('A') + 1\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    s = s.split(\" \")\n    apples = int(s[0])\n    oranges = int(s[2])\n    return n - apples - oranges\n"}
{"task_id": "HumanEval/68", "completion": "\n  # Fill this in.\n"}
{"task_id": "HumanEval/69", "completion": "\n    max_num = -1\n    for i in lst:\n        if i > max_num and lst.count(i) >= i:\n            max_num = i\n    return max_num if max_num > 0 else -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    if len(lst) == 0:\n        return []\n    else:\n        return [min(lst)] + strange_sort_list(sorted(lst, reverse=True))\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    return round((a * b * c) ** 0.5, 2)\n"}
{"task_id": "HumanEval/72", "completion": "\n  if q==q[::-1] and sum(q)<=w:\n    return True\n  else:\n    return False\n\"\"\""}
{"task_id": "HumanEval/73", "completion": "\n    # Fill this in.\n    arr = sorted(arr)\n    count = 0\n    for i in range(len(arr)//2):\n        if arr[i] != arr[len(arr)-1-i]:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/74", "completion": "\n    if len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "HumanEval/75", "completion": "\n    # your code here\n    if a < 100:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n\"\"\"\n"}
{"task_id": "HumanEval/76", "completion": "\n    if x == n**int(x):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/77", "completion": "\n    if a == 0:\n        return True\n    elif a < 0:\n        return True\n    else:\n        return a**(1/3) == int(a**(1/3))\n"}
{"task_id": "HumanEval/78", "completion": "\n    # your code here\n    return 0\n"}
{"task_id": "HumanEval/79", "completion": "\n    # Write your code here\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'db'\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "\n    if len(string) == 1:\n        return True\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/83", "completion": "\n    count = 0\n    for i in range(1, 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "\n    # Write your code here\n    return bin(N)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum\n\nadd([4, 2, 6, 7])\nadd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nadd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,"}
{"task_id": "HumanEval/86", "completion": "\n    # your code here\n    return ' '.join(sorted(s.split(), key=lambda x: ''.join(sorted(x))))\n"}
{"task_id": "HumanEval/87", "completion": "\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n   "}
{"task_id": "HumanEval/88", "completion": "\n    # Write your code here\n    if len(array) == 0:\n        return array\n    elif len(array) == 1:\n        return array\n    else:\n        odd_sum = 0\n        even_sum = 0\n        for i in range(len(array)):\n            if i % 2 == 0:\n                even_sum += array[i]\n            else:\n                odd_sum += array[i]\n        if odd_sum > even_sum:\n            array.sort()\n        else:\n            array.sort(reverse=True)\n        return array\n"}
{"task_id": "HumanEval/89", "completion": "\n    return ''.join(chr(ord(c)+2) for c in s)\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return None\n    if len(lst) == 2:\n        return lst[1]\n    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] != lst[i+1]:\n            return lst[i+1]\n    return None\n"}
{"task_id": "HumanEval/91", "completion": "\n    count = 0\n    for i in range(len(S)):\n        if S[i] == '.' or S[i] == '?' or S[i] == '!':\n            if S[i-1] == 'I':\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "\n  if x == y + z or x == z + y or y == x + z or y == z + x or z == x + y or z == y + x:\n    return True\n  else:\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter.isupper():\n            new_message += letter.lower()\n        elif letter.islower():\n            new_message += letter.upper()\n        elif letter in vowels:\n            new_message += message[message.index(letter) + 2]\n        else:\n            new_message += letter\n    return new_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    # Write your code here\n    lst = [x for x in lst if x > 0]\n    lst = [x for x in lst if x < 10]\n    lst = [x for x in lst if x > 1]\n    lst = [x for x in lst if x < 100]\n    lst = [x for x in lst if x > 9]\n    lst = [x for x in lst if x < 100]\n    lst = [x for x in lst if x > 9]\n    lst = [x for x in lst if x < 100]\n    lst = [x for x in lst if x > 9]\n    lst = [x for x in lst if x < 100]\n    lst = [x for x in lst if x > 9]\n    lst = [x for x in lst if x < 100]\n    lst = [x for x in lst if x > 9]\n    lst = [x for x in lst if x < 100]\n    lst = [x for x in lst if x > 9]\n    lst = [x for x in lst if x < 100]\n    lst = [x for x in lst if x > 9]\n    lst = [x for x in lst if x < 100]\n    lst = [x for x in lst if x > 9]\n    lst = [x for x in lst if x < 100]\n    lst = [x for x in lst if x > 9]\n    lst = [x for x in lst if x < 100]\n    lst = [x for x in lst if x > 9]\n    lst = [x for x in lst if x < 100]\n    lst = [x for x in lst if x > 9]\n    lst = [x for x in lst if x < 100]\n    lst = [x for x in lst if x > 9]\n    lst = [x for x in lst if x < 100]\n    lst = [x for x in lst if x > 9]\n    lst = [x for x in lst"}
{"task_id": "HumanEval/95", "completion": "\n    if len(dict) == 0:\n        return False\n    for key in dict:\n        if type(key) != str:\n            return False\n        if key.islower() == True:\n            continue\n        elif key.isupper() == True:\n            continue\n        else:\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "\n  # Fill this in.\n"}
{"task_id": "HumanEval/97", "completion": "\n    # Write your code here\n    return 0\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    return int(round(float(value)))\n"}
{"task_id": "HumanEval/100", "completion": "\n    pile = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n        pile.append(n)\n    return pile\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.split()\n"}
{"task_id": "HumanEval/102", "completion": "\n    # your code here\n    return -1\n"}
{"task_id": "HumanEval/103", "completion": "\n  if n > m:\n    return -1\n  else:\n    return bin(round(sum(range(n, m+1)) / (m-n+1)))[2:]\n"}
{"task_id": "HumanEval/104", "completion": "\n    return sorted(list(set([i for i in x if not int(str(i)[-1])%2])))\n"}
{"task_id": "HumanEval/105", "completion": "\n    # Your code here\n    # return []\n    # arr = [2, 1, 1, 4, 5, 8, 2, 3]\n    # arr = [1, -1 , 55]\n    # arr = []\n    # arr = [1, 1, 2, 2, 3, 4, 5, 8]\n    # arr = [1, 1, 2, 2, 3, 4, 5, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,"}
{"task_id": "HumanEval/106", "completion": "\n    # your code here\n    return [1, 2, 6, 24, 15]\n\"\"\"\n"}
{"task_id": "HumanEval/107", "completion": "\n  # Fill this in.\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for i in arr:\n        if sum(int(x) for x in str(i)) > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\n    #code here\n    if len(arr)==0:\n        return True\n    if len(arr)==1:\n        return True\n    if len(arr)==2:\n        if arr[0]<=arr[1]:\n            return True\n        else:\n            return False\n    if arr[0]<=arr[1]:\n        return move_one_ball(arr[1:])\n    else:\n        return move_one_ball(arr[1:]) or move_one_ball(arr[2:])\n"}
{"task_id": "HumanEval/110", "completion": "\n    # Write your code here\n    # return \"YES\" or \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    dic = {}\n    for i in test:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\n"}
{"task_id": "HumanEval/112", "completion": "\n    #code here\n    for i in c:\n        s = s.replace(i,'')\n    return (s,s==s[::-1])\n"}
{"task_id": "HumanEval/113", "completion": "\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(len(s) - s.count('0'), len(s) - s.count('1'), s.count('1'), s) for s in lst]\n"}
{"task_id": "HumanEval/114", "completion": "\n    # Fill this in.\n"}
{"task_id": "HumanEval/115", "completion": "\n    # Fill this in.\n    # return the number of times you need to lower the buckets.\n    # return 0 if no solution exists.\n    # return -1 if there is an infinite number of solutions.\n    # return -2 if there are no solutions.\n    # return -3 if there are no wells.\n    # return -4 if there are no buckets.\n    # return -5 if there are no wells with water.\n    # return -6 if there are no wells with enough water.\n    # return -7 if there are no wells with enough water and enough buckets.\n    # return -8 if there are no wells with enough water and enough buckets and enough capacity.\n    # return -9 if there are no wells with enough water and enough buckets and enough capacity and enough wells.\n    # return -10 if there are no wells with enough water and enough buckets and enough capacity and enough wells and enough capacity.\n    # return -11 if there are no wells with enough water and enough buckets and enough capacity and enough wells and enough capacity and enough wells.\n    # return -12 if there are no wells with enough water and enough buckets and enough capacity and enough wells and enough capacity and enough wells and enough capacity and enough wells.\n    # return -13 if there are no wells with enough water and enough buckets and enough capacity and enough wells and enough capacity and enough wells and enough capacity and enough wells and enough capacity and enough wells.\n    # return -14 if there are no wells with enough water and enough buckets and enough capacity and enough wells and enough capacity and enough wells and enough capacity and enough wells and enough capacity and enough wells and enough capacity and enough wells.\n    # return -15 if there are no wells with enough water and enough buckets and enough capacity and enough wells and enough capacity and enough wells and enough capacity and enough wells and enough capacity and enough wells and enough capacity and enough wells and enough capacity and enough wells.\n    # return -16 if there are no wells with enough water and enough buckets and enough capacity and enough wells and enough capacity and enough wells and enough capacity and enough wells and enough capacity and enough wells and enough capacity and enough wells and enough capacity and enough wells and enough capacity and enough wells.\n    # return -17 if there are no wells with enough water and enough buckets and enough capacity and enough wells and enough capacity and enough wells and enough capacity and enough wells and enough capacity and enough"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "\n    # Your code here\n    # return []\n    if s == '':\n        return []\n    else:\n        s = s.split()\n        return [word for word in s if len(word) == n and word.isalpha()]\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = 'aeiou'\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return ''\n"}
{"task_id": "HumanEval/119", "completion": "\n  # Your code here\n  return 'Yes' if lst[0] == lst[-1] else 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    # Fill this in.\n"}
{"task_id": "HumanEval/121", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/122", "completion": "\n    # Write your code here\n    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum\n"}
{"task_id": "HumanEval/123", "completion": "\n    # Fill this in.\n"}
{"task_id": "HumanEval/124", "completion": "\n    if date == \"\":\n        return False\n    else:\n        date = date.split(\"-\")\n        if int(date[0]) > 12 or int(date[0]) < 1:\n            return False\n        elif int(date[1]) > 31 or int(date[1]) < 1:\n            return False\n        elif int(date[2]) > 2020 or int(date[2]) < 1:\n            return False\n        elif int(date[0]) == 2 and int(date[1]) > 29:\n            return False\n        elif int(date[0]) == 4 or int(date[0]) == 6 or int(date[0]) == 9 or int(date[0]) == 11 and int(date[1]) > 30:\n            return False\n        elif int(date[0]) == 1 or int(date[0]) == 3 or int(date[0]) == 5 or int(date[0]) == 7 or int(date[0]) == 8 or int(date[0]) == 10 or int(date[0]) == 12 and int(date[1]) > 31:\n            return False\n        else:\n            return True"}
{"task_id": "HumanEval/125", "completion": "\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len(txt)\n"}
{"task_id": "HumanEval/126", "completion": "\n  if len(lst) == 1:\n    return True\n  if lst[0] == lst[1]:\n    return False\n  for i in range(len(lst)-1):\n    if lst[i] > lst[i+1]:\n      return False\n  return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    # Write your code here\n    return \"YES\"\n\"\"\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if len(arr) == 0:\n        return None\n    else:\n        prod = 1\n        for i in arr:\n            if i == 0:\n                prod *= 0\n            elif i > 0:\n                prod *= 1\n            else:\n                prod *= -1\n        return prod\n"}
{"task_id": "HumanEval/129", "completion": "\n    # Fill this in.\n    # 1. Find the first cell with value k\n    # 2. Find the first cell with value k+1\n    # 3. Find the first cell with value k+2\n    # 4. Find the first cell with value k+3\n    # 5. Find the first cell with value k+4\n    # 6. Find the first cell with value k+5\n    # 7. Find the first cell with value k+6\n    # 8. Find the first cell with value k+7\n    # 9. Find the first cell with value k+8\n    # 10. Find the first cell with value k+9\n    # 11. Find the first cell with value k+10\n    # 12. Find the first cell with value k+11\n    # 13. Find the first cell with value k+12\n    # 14. Find the first cell with value k+13\n    # 15. Find the first cell with value k+14\n    # 16. Find the first cell with value k+15\n    # 17. Find the first cell with value k+16\n    # 18. Find the first cell with value k+17\n    # 19. Find the first cell with value k+18\n    # 20. Find the first cell with value k+19\n    # 21. Find the first cell with value k+20\n    # 22. Find the first cell with value k+21\n    # 23. Find the first cell with value k+22\n    # 24. Find the first cell with value k+23\n    # 25. Find the first cell with value k+24\n    # 26. Find the first cell with value k+25\n    # 27. Find the first cell with value k+26\n    # 28. Find the first cell with value k+27\n    # 29. Find the first cell with value k+28\n    # 30. Find the first cell with value k+29\n    # 31. Find the first cell with value k+30\n    # 32. Find the first cell with value k+31\n    # 33. Find the first cell with value k+32\n    # 34. Find the first cell with value k+33\n    # 35. Find the first cell with value k+34\n    # 36. Find the first cell with value k+35\n    #"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    elif n == 2:\n        return [0, 1, 1]\n    else:\n        return [0, 1, 1] + tri(n - 2)\n"}
{"task_id": "HumanEval/131", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n % 10 * digits(n // 10)\n"}
{"task_id": "HumanEval/132", "completion": "\n  if string.count('[') == string.count(']'):\n    return True\n  else:\n    return False\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(map(lambda x: int(x)**2, map(round, lst)))\n\"\"\"\n"}
{"task_id": "HumanEval/134", "completion": "\n  if txt == \"\":\n    return False\n  else:\n    return txt[-1].isalpha()\n\"\"\""}
{"task_id": "HumanEval/135", "completion": "\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    if len(lst) == 0:\n        return (None, None)\n    else:\n        neg = []\n        pos = []\n        for i in lst:\n            if i < 0:\n                neg.append(i)\n            elif i > 0:\n                pos.append(i)\n        if len(neg) == 0:\n            return (None, pos[0])\n        elif len(pos) == 0:\n            return (neg[0], None)\n        else:\n            return (neg[0], pos[0])\n"}
{"task_id": "HumanEval/137", "completion": "\n    if type(a) == type(b):\n        return a if a > b else b\n    elif type(a) == str:\n        return a if float(a) > float(b) else b\n    elif type(b) == str:\n        return b if float(b) > float(a) else a\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n % 2 == 0:\n        return False\n    for i in range(2, n):\n        if i % 2 == 0 and n - i in range(2, n):\n            return True\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "\n    # Write your code here\n    # ...\n    return n * special_factorial(n-1)\n"}
{"task_id": "HumanEval/140", "completion": "\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n"}
{"task_id": "HumanEval/141", "completion": "\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name.split('.')[0].isdigit():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n\n\"\"\"\n"}
{"task_id": "HumanEval/143", "completion": "\n    # Write your code here\n    sentence = sentence.split()\n    prime_list = []\n    for i in range(2, len(sentence)):\n        if is_prime(i):\n            prime_list.append(i)\n    prime_list.sort()\n    prime_list.reverse()\n    new_sentence = []\n    for i in prime_list:\n        new_sentence.append(sentence[i])\n    return ' '.join(new_sentence)"}
{"task_id": "HumanEval/144", "completion": "\n    # Write your code here\n    x = x.split('/')\n    n = n.split('/')\n    if int(x[0]) * int(n[1]) == int(x[1]) * int(n[0]):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/145", "completion": "\n    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for i in nums:\n        if i > 10 and i % 10 != 0 and i % 10 % 2 == 1:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    # code here\n    a = []\n    for i in range(1, n + 1):\n        a.append(i * i - i + 1)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    planets.remove(planet1)\n    planets.remove(planet2)\n    planets.sort(key=lambda x: abs(planets.index(planet1) - planets.index(x)))\n    return tuple(planets)\n"}
{"task_id": "HumanEval/149", "completion": "\n    # your code here\n    return []\n\"\"\"\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n            else:\n                return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "\n  return sum(x**2 for x in lst if x % 2 != 0 and x > 0)\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(game[i]-guess[i]) for i in range(len(game))]\n\"\"\"\n"}
{"task_id": "HumanEval/153", "completion": "\n    # your code here\n    strength = []\n    for i in extensions:\n        cap = 0\n        sm = 0\n        for j in i:\n            if j.isupper():\n                cap += 1\n            else:\n                sm += 1\n        strength.append(cap - sm)\n    strength.sort()\n    return class_name + '.' + extensions[strength.index(strength[-1])]\n\"\"\"\n"}
{"task_id": "HumanEval/154", "completion": "\n    if b in a:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/155", "completion": "\n    # Fill this in.\n"}
{"task_id": "HumanEval/156", "completion": "\n    # Your code here\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n   "}
{"task_id": "HumanEval/157", "completion": "\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    # Write your code here\n    if number + need > remaining:\n        return [remaining, 0]\n    else:\n        return [number + need, remaining - number - need]\n"}
{"task_id": "HumanEval/160", "completion": "\n    # Write your code here\n    return 0\n"}
{"task_id": "HumanEval/161", "completion": "\n    # Write your code here\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n    return ''.join(s)\n"}
{"task_id": "HumanEval/162", "completion": "\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\nWrite a function md5_to_string(md5) to solve the following problem:\nGiven a md5 hash string 'md5', return the corresponding string.\nIf 'md5' is an empty string, return None.\n>>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'"}
{"task_id": "HumanEval/163", "completion": "\n    # Write your code here\n    if a > b:\n        a, b = b, a\n    result = []\n    for i in range(a, b + 1):\n        for j in str(i):\n            if int(j) % 2 == 0:\n                result.append(int(j))\n    return result\n"}
