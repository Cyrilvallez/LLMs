{"task_id": "HumanEval/0", "completion": "\n    std::sort(numbers.begin(), numbers.end());\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        if (numbers[i + 1] - numbers[i] <= threshold) {\n            return true;\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/1", "completion": "\n    std::vector<std::string> result;\n    std::string current_group;\n    int open_paren_count = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n            open_paren_count++;\n            current_group += c;\n        } else if (c == ')') {\n            open_paren_count--;\n            current_group += c;\n        } else if (c == ' ') {\n            continue;\n        } else {\n            assert(0);\n        }\n        if (open_paren_count == 0) {\n            result.push_back(current_group);\n            current_group = \"\";\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/2", "completion": "\n    int integer_part = (int)number;\n    return number - integer_part;"}
{"task_id": "HumanEval/3", "completion": "\n    long balance = 0;\n    for (long operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/4", "completion": "\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (auto number : numbers) {\n        sum += number;\n    }\n    mean = sum / numbers.size();\n    float mad = 0.0f;\n    for (auto number : numbers) {\n        mad += std::abs(number - mean);\n    }\n    return mad / numbers.size();"}
{"task_id": "HumanEval/5", "completion": "\n    std::vector<long> result;\n    for (long i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        if (i != numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/6", "completion": "\n    std::vector<long> max_depths;\n    std::stack<long> depths;\n    depths.push(0);\n    for (char c : paren_string) {\n        if (c == '(') {\n            depths.push(depths.top() + 1);\n        } else if (c == ')') {\n            depths.pop();\n        } else if (c == ' ') {\n            max_depths.push_back(depths.top());\n        }\n    }\n    return max_depths;"}
{"task_id": "HumanEval/7", "completion": "\n    std::vector<std::string> filtered_strings;\n    for (std::string string : strings) {\n        if (string.find(substring) != std::string::npos) {\n            filtered_strings.push_back(string);\n        }\n    }\n    return filtered_strings;"}
{"task_id": "HumanEval/8", "completion": "\n    long sum = 0;\n    long product = 1;\n    for (long number : numbers) {\n        sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum, product);"}
{"task_id": "HumanEval/9", "completion": "\n    std::vector<long> result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n    for (int i = 1; i < numbers.size(); i++) {\n        max_so_far = std::max(max_so_far, numbers[i]);\n        result.push_back(max_so_far);\n    }\n    return result;"}
{"task_id": "HumanEval/10", "completion": "\n    std::string reversed = string;\n    std::reverse(reversed.begin(), reversed.end());\n    return string + reversed;"}
{"task_id": "HumanEval/11", "completion": "\n    assert(a.size() == b.size());\n    std::string result;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/12", "completion": "\n    if (strings.size() == 0) {\n        return std::nullopt;\n    }\n    std::string longest_string = strings[0];\n    for (std::string string : strings) {\n        if (string.size() > longest_string.size()) {\n            longest_string = string;\n        }\n    }\n    return longest_string;"}
{"task_id": "HumanEval/13", "completion": "\n    while (b != 0) {\n        long temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;"}
{"task_id": "HumanEval/14", "completion": "\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return prefixes;"}
{"task_id": "HumanEval/15", "completion": "\n    std::stringstream ss;\n    for (long i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    return ss.str();"}
{"task_id": "HumanEval/16", "completion": "\n    std::set<char> distinct_characters;\n    for (char character : string) {\n        distinct_characters.insert(std::tolower(character));\n    }\n    return distinct_characters.size();"}
{"task_id": "HumanEval/17", "completion": "\n    std::vector<long> result;\n    for (auto c : music_string) {\n        if (c == 'o') {\n            result.push_back(4);\n        } else if (c == '|') {\n            result.back() /= 2;\n        } else if (c == '.') {\n            result.back() /= 4;\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/18", "completion": "\n    long count = 0;\n    for (long i = 0; i < string.size(); i++) {\n        if (string.substr(i, substring.size()) == substring) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/19", "completion": "\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n    std::string num;\n    while (ss >> num) {\n        nums.push_back(num);\n    }\n    std::sort(nums.begin(), nums.end(), [](const std::string& a, const std::string& b) {\n        return std::stoi(a) < std::stoi(b);\n    });\n    std::stringstream res;\n    for (const auto& num : nums) {\n        res << num << \" \";\n    }\n    return res.str();"}
{"task_id": "HumanEval/20", "completion": "\n    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    float closest_sum = numbers[0] + numbers[1];\n    float closest_first = numbers[0];\n    float closest_second = numbers[1];\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        float sum = numbers[i] + numbers[i + 1];\n        if (sum < closest_sum) {\n            closest_sum = sum;\n            closest_first = numbers[i];\n            closest_second = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(closest_first, closest_second);"}
{"task_id": "HumanEval/21", "completion": "\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float> rescaled(numbers.size());\n    for (int i = 0; i < numbers.size(); i++) {\n        rescaled[i] = (numbers[i] - min) / (max - min);\n    }\n    return rescaled;"}
{"task_id": "HumanEval/22", "completion": "\n    std::vector<long> result;\n    for (auto value : values) {\n        if (value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/23", "completion": "\n    return string.length();"}
{"task_id": "HumanEval/24", "completion": "\n    long divisor = 1;\n    for (long i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            divisor = i;\n        }\n    }\n    return divisor;"}
{"task_id": "HumanEval/25", "completion": "\n    std::vector<long> factors;\n    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;"}
{"task_id": "HumanEval/26", "completion": "\n    std::vector<long> result;\n    std::unordered_map<long, int> counts;\n    for (long number : numbers) {\n        if (counts[number] == 0) {\n            result.push_back(number);\n        }\n        counts[number] += 1;\n    }\n    return result;"}
{"task_id": "HumanEval/27", "completion": "\n    std::string result;\n    for (char c : string) {\n        if (std::islower(c)) {\n            result += std::toupper(c);\n        } else if (std::isupper(c)) {\n            result += std::tolower(c);\n        } else {\n            result += c;\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/28", "completion": "\n    std::string result;\n    for (std::string string : strings) {\n        result += string;\n    }\n    return result;"}
{"task_id": "HumanEval/29", "completion": "\n    std::vector<std::string> result;\n    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/30", "completion": "\n    std::vector<long> r;\n    for (long i : l) {\n        if (i > 0) {\n            r.push_back(i);\n        }\n    }\n    return r;"}
{"task_id": "HumanEval/31", "completion": "\n    if (n <= 1) {\n        return false;\n    }\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/33", "completion": "\n    std::vector<long> l_sorted;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_sorted.push_back(l[i]);\n        }\n    }\n    std::sort(l_sorted.begin(), l_sorted.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l[i] = l_sorted[i / 3];\n        }\n    }\n    return l;"}
{"task_id": "HumanEval/34", "completion": "\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;"}
{"task_id": "HumanEval/35", "completion": "\n    long m = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > m) {\n            m = l[i];\n        }\n    }\n    return m;"}
{"task_id": "HumanEval/36", "completion": "\n    long count = 0;\n    for (long i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::stringstream ss;\n            ss << i;\n            std::string s = ss.str();\n            if (s.find('7') != std::string::npos) {\n                count++;\n            }\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/37", "completion": "\n    std::vector<long> l_sorted;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            l_sorted.push_back(l[i]);\n        } else {\n            l_sorted.push_back(l[i]);\n            std::sort(l_sorted.begin() + i, l_sorted.end());\n        }\n    }\n    return l_sorted;"}
{"task_id": "HumanEval/39", "completion": "\n    long a = 0, b = 1, c = 0;\n    for (long i = 0; i < n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n        while (c % 2 == 0) {\n            c /= 2;\n        }\n        while (c % 3 == 0) {\n            c /= 3;\n        }\n        while (c % 5 == 0) {\n            c /= 5;\n        }\n        if (c == 1) {\n            return b;\n        }\n    }\n    return b;"}
{"task_id": "HumanEval/40", "completion": "\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n            } else {\n                k--;\n            }\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/41", "completion": "\n  // The number of collisions is the number of pairs of cars that are moving\n  // in opposite directions.\n  return n * (n - 1) / 2;"}
{"task_id": "HumanEval/42", "completion": "\n    for (int i = 0; i < l.size(); i++) {\n        l[i] = l[i] + 1;\n    }\n    return l;"}
{"task_id": "HumanEval/43", "completion": "\n    std::unordered_set<long> s;\n    for (long i : l) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n        s.insert(-i);\n    }\n    return false;"}
{"task_id": "HumanEval/44", "completion": "\n    std::string result;\n    while (x > 0) {\n        result = std::to_string(x % base) + result;\n        x /= base;\n    }\n    return result;"}
{"task_id": "HumanEval/45", "completion": "\n    return (float) (a * h) / 2;"}
{"task_id": "HumanEval/46", "completion": "\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n == 2) return 2;\n    if(n == 3) return 0;\n    long a = 0, b = 0, c = 2, d = 0;\n    for(long i = 4; i <= n; i++) {\n        a = b;\n        b = c;\n        c = d;\n        d = a + b + c + d;\n    }\n    return d;"}
{"task_id": "HumanEval/47", "completion": "\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0f;\n    } else {\n        return l[l.size() / 2];\n    }"}
{"task_id": "HumanEval/48", "completion": "\n    int n = text.size();\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/49", "completion": "\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long r = modp(n / 2, p);\n        return (r * r) % p;\n    } else {\n        return (2 * modp(n - 1, p)) % p;\n    }"}
{"task_id": "HumanEval/51", "completion": "\n    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (vowels.find(text[i]) == std::string::npos) {\n            result += text[i];\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/52", "completion": "\n    for (long i : l) {\n        if (i > t) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y;"}
{"task_id": "HumanEval/54", "completion": "\n    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n    return s0 == s1;"}
{"task_id": "HumanEval/55", "completion": "\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);"}
{"task_id": "HumanEval/56", "completion": "\n    std::stack<char> s;\n    for (char c : brackets) {\n        if (c == '<') {\n            s.push(c);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();"}
{"task_id": "HumanEval/57", "completion": "\n    if (l.size() == 0) {\n        return true;\n    }\n    bool increasing = l[0] <= l[1];\n    for (int i = 1; i < l.size() - 1; i++) {\n        if (increasing) {\n            if (l[i] > l[i + 1]) {\n                return false;\n            }\n        } else {\n            if (l[i] < l[i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/58", "completion": "\n    std::vector<long> ret;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(ret));\n    return ret;"}
{"task_id": "HumanEval/59", "completion": "\n    long largest_factor = 0;\n    long factor = 2;\n    while (factor * factor <= n) {\n        if (n % factor == 0) {\n            largest_factor = factor;\n            n = n / factor;\n        } else {\n            factor += 1;\n        }\n    }\n    if (largest_factor == 0) {\n        largest_factor = n;\n    }\n    return largest_factor;"}
{"task_id": "HumanEval/60", "completion": "\n    return n * (n + 1) / 2;"}
{"task_id": "HumanEval/61", "completion": "\n    std::stack<char> s;\n    for (char c : brackets) {\n        if (c == '(') {\n            s.push(c);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();"}
{"task_id": "HumanEval/62", "completion": "\n    std::vector<long> ret;\n    for (int i = 1; i < xs.size(); i++) {\n        ret.push_back(xs[i] * i);\n    }\n    return ret;"}
{"task_id": "HumanEval/63", "completion": "\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);"}
{"task_id": "HumanEval/64", "completion": "\n    long count = 0;\n    for (auto c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/65", "completion": "\n    std::string s = std::to_string(x);\n    std::string t = s;\n    std::reverse(t.begin(), t.end());\n    if (shift > s.size()) {\n        return t;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;"}
{"task_id": "HumanEval/66", "completion": "\n    long sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += c;\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/67", "completion": "\n    long apples = 0, oranges = 0;\n    std::stringstream ss(s);\n    std::string temp;\n    while(ss >> temp) {\n        if(temp == \"apples\") {\n            ss >> apples;\n        } else if(temp == \"oranges\") {\n            ss >> oranges;\n        }\n    }\n    return n - apples - oranges;"}
{"task_id": "HumanEval/68", "completion": "\n    std::vector<long> ans;\n    if(arr.size() == 0)\n        return ans;\n    long min = INT_MAX;\n    long index = -1;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if(index == -1)\n        return ans;\n    ans.push_back(min);\n    ans.push_back(index);\n    return ans;"}
{"task_id": "HumanEval/69", "completion": "\n    std::unordered_map<long, long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto i : freq) {\n        if (i.first > 0 && i.second >= i.first) {\n            return i.first;\n        }\n    }\n    return -1;"}
{"task_id": "HumanEval/70", "completion": "\n    std::vector<long> ret;\n    if (lst.size() == 0)\n        return ret;\n    std::vector<long> min_lst;\n    std::vector<long> max_lst;\n    long min = lst[0];\n    long max = lst[0];\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        } else if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] == min) {\n            min_lst.push_back(lst[i]);\n        } else if (lst[i] == max) {\n            max_lst.push_back(lst[i]);\n        }\n    }\n    for (long i = 0; i < min_lst.size(); i++) {\n        ret.push_back(min_lst[i]);\n        if (i < max_lst.size())\n            ret.push_back(max_lst[i]);\n    }\n    return ret;"}
{"task_id": "HumanEval/71", "completion": "\n    float area = -1;\n    if (a + b > c && a + c > b && b + c > a) {\n        float s = (a + b + c) / 2;\n        area = sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return area;"}
{"task_id": "HumanEval/72", "completion": "\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    for (long i = 0; i < q.size() / 2; i++) {\n        if (q[i] != q[q.size() - i - 1]) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/73", "completion": "\n    long n = arr.size();\n    long i = 0;\n    long j = n - 1;\n    long count = 0;\n    while (i < j) {\n        if (arr[i] != arr[j]) {\n            count++;\n        }\n        i++;\n        j--;\n    }\n    return count;"}
{"task_id": "HumanEval/74", "completion": "\n    int sum1 = 0;\n    int sum2 = 0;\n    for(auto i:lst1)\n        sum1 += i.size();\n    for(auto i:lst2)\n        sum2 += i.size();\n    if(sum1 < sum2)\n        return lst1;\n    else if(sum1 > sum2)\n        return lst2;\n    else\n        return lst1;"}
{"task_id": "HumanEval/75", "completion": "\n    if (a < 100) {\n        return true;\n    }\n    return false;"}
{"task_id": "HumanEval/76", "completion": "\n    if(n==1)\n        return true;\n    if(n==0)\n        return false;\n    if(x==1)\n        return true;\n    if(x==0)\n        return false;\n    if(x%n==0)\n        return is_simple_power(x/n,n);\n    return false;"}
{"task_id": "HumanEval/77", "completion": "\n    long x = 1;\n    while (x * x * x < a) {\n        x++;\n    }\n    return x * x * x == a;"}
{"task_id": "HumanEval/78", "completion": "\n    std::unordered_set<int> primes = {2, 3, 5, 7, 11, 13, 17, 19};\n    long count = 0;\n    for (auto c : num) {\n        if (c >= '0' && c <= '9') {\n            if (primes.find(c - '0') != primes.end()) {\n                count++;\n            }\n        } else if (c >= 'A' && c <= 'F') {\n            if (primes.find(c - 'A' + 10) != primes.end()) {\n                count++;\n            }\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/79", "completion": "\n    std::string binary;\n    while (decimal > 0) {\n        binary = (decimal % 2 == 0 ? \"0\" : \"1\") + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";"}
{"task_id": "HumanEval/80", "completion": "\n    if(s.size()<3)\n        return false;\n    for(int i=0;i<s.size()-2;i++)\n    {\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n            continue;\n        else\n            return false;\n    }\n    return true;"}
{"task_id": "HumanEval/81", "completion": "\n    std::vector<std::string> letter_grades;\n    for (auto grade : grades) {\n        if (grade >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grade > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;"}
{"task_id": "HumanEval/82", "completion": "\n    int length = string.length();\n    if (length == 1) {\n        return false;\n    }\n    for (int i = 2; i < length; i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/83", "completion": "\n    long count = 0;\n    for (long i = 1; i < 10; i++) {\n        count += 1;\n        long j = 1;\n        while (j < n) {\n            count += 9 * pow(10, j - 1);\n            j++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/84", "completion": "\n    std::string result;\n    while (N > 0) {\n        result += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(result.begin(), result.end());\n    return result;"}
{"task_id": "HumanEval/85", "completion": "\n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/86", "completion": "\n  std::stringstream ss(s);\n  std::string word;\n  std::vector<std::string> words;\n  while (ss >> word) {\n    words.push_back(word);\n  }\n  for (auto& word : words) {\n    std::sort(word.begin(), word.end());\n  }\n  std::stringstream result;\n  for (auto& word : words) {\n    result << word << \" \";\n  }\n  return result.str();"}
{"task_id": "HumanEval/87", "completion": "\n    std::vector<std::tuple<long, long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a) < std::get<0>(b)) {\n            return true;\n        } else if (std::get<0>(a) == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n        } else {\n            return false;\n        }\n    });\n    return result;"}
{"task_id": "HumanEval/88", "completion": "\n    std::vector<long> res;\n    if (array.size() == 0) return res;\n    if (array.size() == 1) {\n        res.push_back(array[0]);\n        return res;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return array;"}
{"task_id": "HumanEval/89", "completion": "\n    std::string encrypted = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            encrypted += (s[i] + 2) % 26 + 'a';\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            encrypted += (s[i] + 2) % 26 + 'A';\n        } else {\n            encrypted += s[i];\n        }\n    }\n    return encrypted;"}
{"task_id": "HumanEval/90", "completion": "\n    std::sort(lst.begin(), lst.end());\n    std::set<long> s(lst.begin(), lst.end());\n    for (auto i : s) {\n        if (s.find(i + 1) != s.end()) {\n            return i + 1;\n        }\n    }\n    return std::nullopt;"}
{"task_id": "HumanEval/91", "completion": "\n    long count = 0;\n    std::stringstream ss(S);\n    std::string word;\n    while (std::getline(ss, word, '.')) {\n        if (word.find(\"I\") == 0) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/92", "completion": "\n    return (x == y + z) || (y == x + z) || (z == x + y);"}
{"task_id": "HumanEval/93", "completion": "\n    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    for(int i = 0; i < message.size(); i++) {\n        if(vowels.find(message[i]) != std::string::npos) {\n            result += (message[i] - 2);\n        } else {\n            if(isupper(message[i])) {\n                result += tolower(message[i]);\n            } else {\n                result += toupper(message[i]);\n            }\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/94", "completion": "\n    long max = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    long sum = 0;\n    while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;"}
{"task_id": "HumanEval/95", "completion": "\n    if(dict.size() == 0) return false;\n    std::string first_key = dict.begin()->first;\n    bool is_lower = first_key == std::string(first_key.size(), std::tolower(first_key[0]));\n    bool is_upper = first_key == std::string(first_key.size(), std::toupper(first_key[0]));\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower && std::string(it->first.size(), std::tolower(it->first[0])) != it->first) return false;\n        if(is_upper && std::string(it->first.size(), std::toupper(it->first[0])) != it->first) return false;\n    }\n    return true;"}
{"task_id": "HumanEval/96", "completion": "\n    std::vector<long> result;\n    for (long i = 2; i < n; i++) {\n        bool is_prime = true;\n        for (long j = 2; j < i; j++) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            result.push_back(i);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/97", "completion": "\n    return (a%10)*(b%10);"}
{"task_id": "HumanEval/98", "completion": "\n    long count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (i % 2 == 0 && std::isupper(s[i])) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/99", "completion": "\n    // Convert the string to a double\n    double number = std::stod(value);\n    // Round the number to the nearest integer\n    long rounded = std::round(number);\n    // If the number is equidistant from two integers, round it away\n    // from zero\n    if (number - rounded == 0.5) {\n        rounded = (number > 0) ? rounded + 1 : rounded - 1;\n    }\n    // Return the closest integer\n    return rounded;"}
{"task_id": "HumanEval/100", "completion": "\n  std::vector<long> result;\n  result.push_back(n);\n  while (n > 1) {\n    n = (n % 2 == 0) ? n + 1 : n + 2;\n    result.push_back(n);\n  }\n  return result;"}
{"task_id": "HumanEval/101", "completion": "\n    std::vector<std::string> words;\n    std::string word;\n    for (char c : s) {\n        if (c == ' ' || c == ',') {\n            if (word.size() > 0) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (word.size() > 0) {\n        words.push_back(word);\n    }\n    return words;"}
{"task_id": "HumanEval/102", "completion": "\n    if (x > y) {\n        return -1;\n    }\n    if (x % 2 == 0) {\n        return x;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    for (long i = x + 1; i < y; i++) {\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n    return -1;"}
{"task_id": "HumanEval/103", "completion": "\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n + 1);\n    return \"0b\" + std::bitset<32>(avg).to_string();"}
{"task_id": "HumanEval/104", "completion": "\n    std::vector<long> res;\n    for(auto i : x) {\n        bool flag = false;\n        while(i) {\n            if(i % 10 % 2 == 0) {\n                flag = true;\n                break;\n            }\n            i /= 10;\n        }\n        if(!flag)\n            res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n    return res;"}
{"task_id": "HumanEval/105", "completion": "\n    std::vector<std::string> ans;\n    std::vector<std::string> nums = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n            ans.push_back(nums[i - 1]);\n        }\n    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;"}
{"task_id": "HumanEval/106", "completion": "\n    std::vector<long> v;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            long factorial = 1;\n            for (int j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            v.push_back(factorial);\n        } else {\n            long sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            v.push_back(sum);\n        }\n    }\n    return v;"}
{"task_id": "HumanEval/107", "completion": "\n    long even = 0, odd = 0;\n    for (long i = 1; i <= n; i++) {\n        if (std::to_string(i) == std::string(std::to_string(i).rbegin(), std::to_string(i).rend())) {\n            if (i % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return std::make_tuple(even, odd);"}
{"task_id": "HumanEval/108", "completion": "\n    long count = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            i *= -1;\n        }\n        long sum = 0;\n        while (i > 0) {\n            sum += i % 10;\n            i /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/109", "completion": "\n    if(arr.size() == 0) return true;\n    if(arr.size() == 1) return true;\n    if(arr.size() == 2) return true;\n    if(arr.size() == 3) return true;\n    if(arr.size() == 4) return true;\n    if(arr.size() == 5) return true;\n    if(arr.size() == 6) return true;\n    if(arr.size() == 7) return true;\n    if(arr.size() == 8) return true;\n    if(arr.size() == 9) return true;\n    if(arr.size() == 10) return true;\n    if(arr.size() == 11) return true;\n    if(arr.size() == 12) return true;\n    if(arr.size() == 13) return true;\n    if(arr.size() == 14) return true;\n    if(arr.size() == 15) return true;\n    if(arr.size() == 16) return true;\n    if(arr.size() == 17) return true;\n    if(arr.size() == 18) return true;\n    if(arr.size() == 19) return true;\n    if(arr.size() == 20) return true;\n    if(arr.size() == 21) return true;\n    if(arr.size() == 22) return true;\n    if(arr.size() == 23) return true;\n    if(arr.size() == 24) return true;\n    if(arr.size() == 25) return true;\n    if(arr.size() == 26) return true;\n    if(arr.size() == 27) return true;\n    if(arr.size() == 28) return true;\n    if(arr.size() == 29) return true;\n    if(arr.size() == 30) return true;\n    if(arr.size() == 31) return true;\n    if(arr.size() == "}
{"task_id": "HumanEval/110", "completion": "\n    // Your code here\n    int count = 0;\n    for(int i = 0; i < lst1.size(); i++)\n    {\n        if(lst1[i] % 2 == 0)\n        {\n            count++;\n        }\n    }\n    if(count == lst1.size())\n    {\n        return \"YES\";\n    }\n    else\n    {\n        for(int i = 0; i < lst2.size(); i++)\n        {\n            if(lst2[i] % 2 == 0)\n            {\n                count++;\n            }\n        }\n        if(count == lst1.size())\n        {\n            return \"YES\";\n        }\n        else\n        {\n            return \"NO\";\n        }\n    }"}
{"task_id": "HumanEval/111", "completion": "\n  std::map<std::string,long> hist;\n  std::stringstream ss(test);\n  std::string word;\n  while (ss >> word) {\n    hist[word]++;\n  }\n  return hist;"}
{"task_id": "HumanEval/112", "completion": "\n    std::string result;\n    for (auto i : s) {\n        if (c.find(i) == std::string::npos) {\n            result += i;\n        }\n    }\n    return std::make_tuple(result, std::equal(result.begin(), result.begin() + result.size() / 2, result.rbegin()));"}
{"task_id": "HumanEval/113", "completion": "\n    std::vector<std::string> ret;\n    for (std::string s : lst) {\n        int count = 0;\n        for (char c : s) {\n            if (c % 2 == 1) {\n                count++;\n            }\n        }\n        std::stringstream ss;\n        ss << \"the number of odd elements \" << count << \"n the str\" << count << \"ng \" << count << \" of the \" << count << \"nput.\";\n        ret.push_back(ss.str());\n    }\n    return ret;"}
{"task_id": "HumanEval/114", "completion": "\n    long minSum = std::numeric_limits<long>::max();\n    long currentSum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        currentSum = 0;\n        for (long j = i; j < nums.size(); j++) {\n            currentSum += nums[j];\n            if (currentSum < minSum) {\n                minSum = currentSum;\n            }\n        }\n    }\n    return minSum;"}
{"task_id": "HumanEval/115", "completion": "\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    for (long i = 0; i < n; i++) {\n        long water = 0;\n        for (long j = 0; j < m; j++) {\n            water += grid[i][j];\n        }\n        ans += water / capacity;\n    }\n    return ans;"}
{"task_id": "HumanEval/116", "completion": "\n    std::sort(arr.begin(), arr.end(), [](long a, long b) {\n        std::string a_str = std::bitset<64>(a).to_string();\n        std::string b_str = std::bitset<64>(b).to_string();\n        int a_ones = std::count(a_str.begin(), a_str.end(), '1');\n        int b_ones = std::count(b_str.begin(), b_str.end(), '1');\n        if (a_ones == b_ones) {\n            return a < b;\n        }\n        return a_ones < b_ones;\n    });\n    return arr;"}
{"task_id": "HumanEval/117", "completion": "\n    std::vector<std::string> v;\n    std::string word;\n    for(auto c:s){\n        if(c!=' '){\n            word+=c;\n        }\n        else{\n            if(word.size()==n){\n                v.push_back(word);\n            }\n            word=\"\";\n        }\n    }\n    if(word.size()==n){\n        v.push_back(word);\n    }\n    return v;"}
{"task_id": "HumanEval/118", "completion": "\n    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/119", "completion": "\n  std::string s;\n  for (auto i : lst) {\n    s += i;\n  }\n  int count = 0;\n  for (auto i : s) {\n    if (i == '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n      return \"No\";\n    }\n  }\n  return count == 0 ? \"Yes\" : \"No\";"}
{"task_id": "HumanEval/120", "completion": "\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto i : arr) {\n        pq.push(i);\n    }\n    for (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;"}
{"task_id": "HumanEval/121", "completion": "\n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] % 2 == 1 && i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/122", "completion": "\n    long sum = 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 10) {\n            sum += arr[i];\n        } else if (arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/123", "completion": "\n    std::vector<long> result;\n    while (n > 1) {\n        if (n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        if (n % 2 == 1) {\n            result.push_back(n);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;"}
{"task_id": "HumanEval/124", "completion": "\n    if (date.empty())\n        return false;\n    std::stringstream ss(date);\n    std::string token;\n    std::vector<std::string> tokens;\n    while (std::getline(ss, token, '-')) {\n        tokens.push_back(token);\n    }\n    if (tokens.size() != 3)\n        return false;\n    int month = std::stoi(tokens[0]);\n    int day = std::stoi(tokens[1]);\n    int year = std::stoi(tokens[2]);\n    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n        return false;\n    if (month == 2 && day > 29)\n        return false;\n    if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day > 31)\n        return false;\n    if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30)\n        return false;\n    return true;"}
{"task_id": "HumanEval/125", "completion": "\n    std::vector<std::string> words;\n    std::string word;\n    for (char c : txt) {\n        if (c == ' ' || c == ',') {\n            if (!word.empty()) {\n                words.push_back(word);\n                word.clear();\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n    }\n    if (!words.empty()) {\n        return Union_std_vector_std_string__long(words);\n    } else {\n        long count = 0;\n        for (char c : txt) {\n            if (c >= 'a' && c <= 'z') {\n                count += 1;\n            }\n        }\n        return Union_std_vector_std_string__long(count);\n    }"}
{"task_id": "HumanEval/126", "completion": "\n    if (lst.size() == 0) {\n        return true;\n    }\n    long prev = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < prev) {\n            return false;\n        }\n        if (lst[i] == prev && lst[i] != lst[i - 1]) {\n            return false;\n        }\n        prev = lst[i];\n    }\n    return true;"}
{"task_id": "HumanEval/127", "completion": "\n    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    long intersection_start = std::max(start1, start2);\n    long intersection_end = std::min(end1, end2);\n    if (intersection_start <= intersection_end) {\n        long intersection_length = intersection_end - intersection_start + 1;\n        if (intersection_length == 1) {\n            return \"YES\";\n        }\n        for (long i = 2; i <= intersection_length / 2; i++) {\n            if (intersection_length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n    return \"NO\";"}
{"task_id": "HumanEval/128", "completion": "\n  if (arr.size() == 0) {\n    return std::nullopt;\n  }\n  long result = 0;\n  long sign = 1;\n  for (auto i : arr) {\n    if (i == 0) {\n      return 0;\n    }\n    if (i < 0) {\n      sign *= -1;\n    }\n    result += abs(i);\n  }\n  return result * sign;"}
{"task_id": "HumanEval/129", "completion": "\n    long n = grid.size();\n    std::vector<long> ans;\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    std::vector<std::vector<long>> parent(n, std::vector<long>(n, 0));\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            dp[i][j] = grid[i][j];\n            parent[i][j] = -1;\n        }\n    }\n    for (long i = 1; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            if (dp[i - 1][j] < dp[i][j]) {\n                dp[i][j] = dp[i - 1][j];\n                parent[i][j] = i - 1;\n            }\n        }\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j = 1; j < n; j++) {\n            if (dp[i][j - 1] < dp[i][j]) {\n                dp[i][j] = dp[i][j - 1];\n                parent[i][j] = i;\n            }\n        }\n    }\n    long i = n - 1;\n    long j = n - 1;\n    while (k > 0) {\n        ans.push_back(dp[i][j]);\n        if (parent[i][j] == i - 1) {\n            i--;\n        } else {\n            j--;\n        }\n        k--;\n    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;"}
{"task_id": "HumanEval/130", "completion": "\n    std::vector<long> v(n + 1);\n    v[0] = 1;\n    v[1] = 3;\n    v[2] = 2;\n    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            v[i] = i / 2 + 1;\n        } else {\n            v[i] = v[i - 1] + v[i - 2] + v[i + 1];\n        }\n    }\n    return v;"}
{"task_id": "HumanEval/131", "completion": "\n    long product = 1;\n    while (n > 0) {\n        if (n % 2 != 0) {\n            product *= n % 10;\n        }\n        n /= 10;\n    }\n    return product;"}
{"task_id": "HumanEval/132", "completion": "\n    std::stack<char> stack;\n    for (char c : string) {\n        if (c == '[') {\n            stack.push(c);\n        } else if (c == ']') {\n            if (stack.empty()) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return !stack.empty();"}
{"task_id": "HumanEval/133", "completion": "\n    long sum = 0;\n    for (auto i : lst) {\n        sum += std::ceil(i) * std::ceil(i);\n    }\n    return sum;"}
{"task_id": "HumanEval/134", "completion": "\n    if(txt.size() == 0) return false;\n    if(txt.back() == ' ') return false;\n    if(txt.back() >= 'a' && txt.back() <= 'z') return true;\n    if(txt.back() >= 'A' && txt.back() <= 'Z') return true;\n    return false;"}
{"task_id": "HumanEval/135", "completion": "\n    long n = arr.size();\n    long max_index = -1;\n    long max_value = -1;\n    for (long i = n - 1; i >= 0; i--) {\n        if (arr[i] >= max_value) {\n            max_value = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;"}
{"task_id": "HumanEval/136", "completion": "\n    std::optional<long> largest_negative;\n    std::optional<long> smallest_positive;\n    for (auto i : lst) {\n        if (i < 0 && (!largest_negative || i > largest_negative.value())) {\n            largest_negative = i;\n        } else if (i > 0 && (!smallest_positive || i < smallest_positive.value())) {\n            smallest_positive = i;\n        }\n    }\n    return std::make_tuple(largest_negative, smallest_positive);"}
{"task_id": "HumanEval/137", "completion": "\n    if (a == b) {\n        return std::nullopt;\n    }\n    if (a.f0 > b.f0) {\n        return a.f0;\n    }\n    if (a.f1 > b.f1) {\n        return a.f1;\n    }\n    if (a.f2 > b.f2) {\n        return a.f2;\n    }\n    return b;"}
{"task_id": "HumanEval/138", "completion": "\n    if (n % 2 != 0) {\n        return false;\n    }\n    long sum = 0;\n    long count = 0;\n    for (long i = 1; i <= n / 2; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n            count++;\n        }\n        if (sum > n) {\n            return false;\n        }\n        if (sum == n && count == 4) {\n            return true;\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/139", "completion": "\n    long result = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;"}
{"task_id": "HumanEval/140", "completion": "\n    std::string result;\n    int count = 0;\n    for (auto c : text) {\n        if (c == ' ') {\n            count++;\n        } else {\n            if (count > 0) {\n                if (count == 1) {\n                    result += '_';\n                } else {\n                    result += '-';\n                }\n                count = 0;\n            }\n            result += c;\n        }\n    }\n    if (count > 0) {\n        if (count == 1) {\n            result += '_';\n        } else {\n            result += '-';\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/141", "completion": "\n    int count = 0;\n    for (int i = 0; i < file_name.size(); i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n    if (count > 3) {\n        return \"No\";\n    }\n    int dot_index = file_name.find('.');\n    if (dot_index == std::string::npos) {\n        return \"No\";\n    }\n    if (dot_index == 0) {\n        return \"No\";\n    }\n    std::string before_dot = file_name.substr(0, dot_index);\n    if (before_dot.size() == 0) {\n        return \"No\";\n    }\n    if (!(before_dot[0] >= 'a' && before_dot[0] <= 'z') && !(before_dot[0] >= 'A' && before_dot[0] <= 'Z')) {\n        return \"No\";\n    }\n    std::string after_dot = file_name.substr(dot_index + 1);\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";"}
{"task_id": "HumanEval/142", "completion": "\n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            lst[i] *= lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            lst[i] *= lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;"}
{"task_id": "HumanEval/143", "completion": "\n    std::stringstream ss(sentence);\n    std::string word;\n    std::vector<std::string> words;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    std::vector<std::string> prime_words;\n    for (auto word : words) {\n        int length = word.size();\n        if (length == 1) {\n            prime_words.push_back(word);\n        } else {\n            bool is_prime = true;\n            for (int i = 2; i < length; i++) {\n                if (length % i == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                prime_words.push_back(word);\n            }\n        }\n    }\n    std::stringstream result;\n    for (auto word : prime_words) {\n        result << word << \" \";\n    }\n    return result.str().substr(0, result.str().size() - 1);"}
{"task_id": "HumanEval/144", "completion": "\n    int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int gcd = std::gcd(x_numerator, n_denominator);\n    int lcm = std::lcm(x_denominator, n_numerator);\n    return lcm / gcd == x_numerator * n_denominator / n_numerator;"}
{"task_id": "HumanEval/145", "completion": "\n    std::vector<std::pair<long, long>> nums_with_index;\n    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        long num = nums[i];\n        if (num < 0) {\n            num *= -1;\n        }\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        nums_with_index.push_back(std::make_pair(sum, i));\n    }\n    std::sort(nums_with_index.begin(), nums_with_index.end());\n    std::vector<long> result;\n    for (long i = 0; i < nums_with_index.size(); i++) {\n        result.push_back(nums[nums_with_index[i].second]);\n    }\n    return result;"}
{"task_id": "HumanEval/146", "completion": "\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && (num % 10) % 2 == 1 && num / 10 % 10 % 2 == 1) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/147", "completion": "\n    long count = 0;\n    vector<long> a(n);\n    for(long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/148", "completion": "\n    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int index1 = -1, index2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n            index1 = i;\n        }\n        if (planets[i] == planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1 || index2 == -1) {\n        return result;\n    }\n    if (index1 < index2) {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n        }\n    } else {\n        for (int i = index1 + 1; i < planets.size(); i++) {\n            result.push_back(planets[i]);\n        }\n        for (int i = 0; i < index2; i++) {\n            result.push_back(planets[i]);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/149", "completion": "\n    std::vector<std::string> result;\n    for (auto i : lst) {\n        if (i.size() % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;"}
{"task_id": "HumanEval/150", "completion": "\n    if (n == 1)\n        return y;\n    if (n == 2)\n        return x;\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            return y;\n    }\n    return x;"}
{"task_id": "HumanEval/151", "completion": "\n    long sum = 0;\n    for (auto x : lst) {\n        if (x == (long)x && x % 2 == 1) {\n            sum += x * x;\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/152", "completion": "\n    std::vector<long> result;\n    for (int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;"}
{"task_id": "HumanEval/153", "completion": "\n    int max_strength = 0;\n    std::string strongest_extension;\n    for (auto extension : extensions) {\n        int strength = 0;\n        for (auto c : extension) {\n            if (isupper(c)) {\n                strength++;\n            } else if (islower(c)) {\n                strength--;\n            }\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;"}
{"task_id": "HumanEval/154", "completion": "\n    int n = a.size();\n    int m = b.size();\n    if (m > n) {\n        return false;\n    }\n    for (int i = 0; i < m; i++) {\n        if (a.find(b) != std::string::npos) {\n            return true;\n        }\n        b = b[m - 1] + b.substr(0, m - 1);\n    }\n    return false;"}
{"task_id": "HumanEval/155", "completion": "\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2)\n            odd++;\n        else\n            even++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);"}
{"task_id": "HumanEval/156", "completion": "\n    std::string roman_numeral;\n    std::vector<std::string> roman_numerals = {\n        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\n    };\n    std::vector<int> decimal_values = {\n        1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n    };\n    for (int i = 0; i < decimal_values.size(); i++) {\n        while (number >= decimal_values[i]) {\n            number -= decimal_values[i];\n            roman_numeral += roman_numerals[i];\n        }\n    }\n    return roman_numeral;"}
{"task_id": "HumanEval/157", "completion": "\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);"}
{"task_id": "HumanEval/158", "completion": "\n    std::string result = \"\";\n    int max_unique_chars = 0;\n    for (std::string word : words) {\n        std::set<char> unique_chars(word.begin(), word.end());\n        if (unique_chars.size() > max_unique_chars) {\n            max_unique_chars = unique_chars.size();\n            result = word;\n        } else if (unique_chars.size() == max_unique_chars) {\n            if (word < result) {\n                result = word;\n            }\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/159", "completion": "\n    long total = number + need;\n    long left = total - remaining;\n    if (left < 0) {\n        left = 0;\n    }\n    return {total, left};"}
{"task_id": "HumanEval/160", "completion": "\n    assert(op.size() == operand.size() - 1);\n    long result = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i + 1];\n        } else if(op[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if(op[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if(op[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if(op[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/161", "completion": "\n    if(s.empty()) return s;\n    if(std::all_of(s.begin(), s.end(), [](char c){return !std::isalpha(c);}))\n        return std::string(s.rbegin(), s.rend());\n    for(auto &c : s)\n        if(std::isalpha(c))\n            c ^= 0x20;\n    return s;"}
{"task_id": "HumanEval/162", "completion": "\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), (unsigned char*)&digest);\n    char md5string[33];\n    for (int i = 0; i < 16; i++)\n        sprintf(&md5string[i * 2], \"%02x\", (unsigned int)digest[i]);\n    return std::string(md5string);"}
{"task_id": "HumanEval/163", "completion": "\n    std::vector<long> result;\n    if (a > b) {\n        std::swap(a, b);\n    }\n    for (long i = a; i <= b; i++) {\n        std::string s = std::to_string(i);\n        for (char c : s) {\n            if (c % 2 == 0) {\n                result.push_back(c - '0');\n            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;"}
