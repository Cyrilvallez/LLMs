{"task_id": "HumanEval/0", "completion": "\n    std::sort(numbers.begin(), numbers.end());\n    for (auto i = 0; i < numbers.size() - 1; i++) {\n        if (numbers[i] + threshold < numbers[i + 1]) {\n            return true;\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/1", "completion": "\n    std::vector<std::string> result;\n    if (paren_string.size() == 0) {\n        return result;\n    }\n    std::stack<std::string> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(c);\n        }\n        else if (c == ')') {\n            if (stack.empty()) {\n                return result;\n            }\n            std::string tmp = \"\";\n            while (!stack.empty() && stack.top()!= '(') {\n                tmp += stack.top();\n                stack.pop();\n            }\n            stack.pop();\n            result.push_back(tmp);\n        }\n    }\n    while (!stack.empty()) {\n        result.push_back(stack.top());\n        stack.pop();\n    }\n    return result;"}
{"task_id": "HumanEval/2", "completion": "\n    assert(number >= 0);\n    int i = 0;\n    while (number > 0) {\n        number *= 10;\n        i++;\n    }\n    return number / pow(10, i - 1);"}
{"task_id": "HumanEval/3", "completion": "\n    long sum = 0;\n    for (auto op : operations) {\n        if (op < 0) {\n            sum += op;\n        }\n    }\n    return sum < 0;"}
{"task_id": "HumanEval/4", "completion": "\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (auto number : numbers) {\n        sum += abs(number - mean);\n    }\n    return sum / numbers.size();"}
{"task_id": "HumanEval/5", "completion": "\n    std::vector<long> result;\n    for (auto number : numbers) {\n        if (result.empty()) {\n            result.push_back(number);\n        } else {\n            result.push_back(delimeter);\n            result.push_back(number);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/6", "completion": "\n    std::vector<long> result;\n    std::vector<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push_back(1);\n        }\n        else if (c == ')') {\n            long level = stack.back();\n            stack.pop_back();\n            result.push_back(level);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/7", "completion": "\n    std::vector<std::string> result;\n    for (auto string : strings) {\n        if (string.find(substring)!= std::string::npos) {\n            result.push_back(string);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/8", "completion": "\n    long sum = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum, product);"}
{"task_id": "HumanEval/9", "completion": "\n    std::vector<long> result;\n    std::vector<long> max_numbers;\n    max_numbers.push_back(numbers[0]);\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_numbers[i - 1]) {\n            max_numbers.push_back(numbers[i]);\n        } else {\n            max_numbers.push_back(max_numbers[i - 1]);\n        }\n        result.push_back(max_numbers[i]);\n    }\n    return result;"}
{"task_id": "HumanEval/10", "completion": "\n    std::string result;\n    if (string.size() == 0) {\n        return result;\n    }\n    std::string prefix = get_prefix(string);\n    std::string suffix = get_suffix(string);\n    result = prefix + suffix;\n    return result;"}
{"task_id": "HumanEval/11", "completion": "\n    std::string res;\n    for (int i = 0; i < a.size(); i++) {\n        res += (a[i] == '1')? '0' : '1';\n    }\n    for (int i = 0; i < b.size(); i++) {\n        res += (b[i] == '1')? '0' : '1';\n    }\n    return res;"}
{"task_id": "HumanEval/12", "completion": "\n    if (strings.empty()) return std::nullopt;\n    auto longest_string = strings.back();\n    for (auto string : strings) {\n        if (string.size() > longest_string.size()) longest_string = string;\n    }\n    return longest_string;"}
{"task_id": "HumanEval/13", "completion": "\n    assert(a >= 0);\n    assert(b >= 0);\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);"}
{"task_id": "HumanEval/14", "completion": "\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length(); i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return prefixes;"}
{"task_id": "HumanEval/15", "completion": "\n    std::string s;\n    for (long i = 0; i <= n; i++) {\n        s += std::to_string(i) + \" \";\n    }\n    return s;"}
{"task_id": "HumanEval/16", "completion": "\n    std::unordered_set<char> s;\n    for (auto c : string) {\n        s.insert(c);\n    }\n    return s.size();"}
{"task_id": "HumanEval/17", "completion": "\n    std::vector<long> result;\n    std::string::size_type i = 0;\n    std::string::size_type j = 0;\n    std::string::size_type k = 0;\n    std::string::size_type l = 0;\n    std::string::size_type m = 0;\n    std::string::size_type n = 0;\n    std::string::size_type o = 0;\n    std::string::size_type p = 0;\n    std::string::size_type q = 0;\n    std::string::size_type r = 0;\n    std::string::size_type s = 0;\n    std::string::size_type t = 0;\n    std::string::size_type u = 0;\n    std::string::size_type v = 0;\n    std::string::size_type w = 0;\n    std::string::size_type x = 0;\n    std::string::size_type y = 0;\n    std::string::size_type z = 0;\n    while (i < music_string.size()) {\n        if (music_string[i] == 'o') {\n            result.push_back(4);\n            i++;\n            j = i;\n            while (j < music_string.size() && music_string[j] == 'o') {\n                j++;\n            }\n            if (j == music_string.size()) {\n                break;\n            }\n            if (music_string[j] == '|') {\n                result.push_back(2);\n                i = j + 1;\n            }\n            else if (music_string[j] == '.') {\n                result.push_back(1);\n                i = j + 1;\n            }\n            else {\n                result.push_back(2);\n                i = j;\n            }\n        }\n        else if (music_string[i] == '|') {\n            result.push_back(2);\n            i++;\n            j = i;\n            while (j < music_string.size() && music_string[j] == '|') {\n                j++;\n            }\n            if"}
{"task_id": "HumanEval/18", "completion": "\n    long count = 0;\n    for (auto i = 0; i < string.size(); i++) {\n        if (string.substr(i, substring.size()) == substring) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/19", "completion": "\n    std::sort(numbers.begin(), numbers.end());\n    return numbers;"}
{"task_id": "HumanEval/20", "completion": "\n    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    std::vector<float>::iterator it1 = numbers.begin();\n    std::vector<float>::iterator it2 = numbers.end();\n    std::vector<float>::iterator it3 = numbers.begin();\n    std::vector<float>::iterator it4 = numbers.end();\n    std::vector<float>::iterator it5 = numbers.begin();\n    std::vector<float>::iterator it6 = numbers.end();\n    std::vector<float>::iterator it7 = numbers.begin();\n    std::vector<float>::iterator it8 = numbers.end();\n    std::vector<float>::iterator it9 = numbers.begin();\n    std::vector<float>::iterator it10 = numbers.end();\n    std::vector<float>::iterator it11 = numbers.begin();\n    std::vector<float>::iterator it12 = numbers.end();\n    std::vector<float>::iterator it13 = numbers.begin();\n    std::vector<float>::iterator it14 = numbers.end();\n    std::vector<float>::iterator it15 = numbers.begin();\n    std::vector<float>::iterator it16 = numbers.end();\n    std::vector<float>::iterator it17 = numbers.begin();\n    std::vector<float>::iterator it18 = numbers.end();\n    std::vector<float>::iterator it19 = numbers.begin();\n    std::vector<float>::iterator it20 = numbers.end();\n    std::vector<float>::iterator it21 = numbers.begin();\n    std::vector<float>::iterator it22 = numbers.end();\n    std::vector<float>::iterator it23 = numbers.begin();\n    std::vector<float>::iterator it24 = numbers.end();\n    std::vector<float>::iterator it25 = numbers.begin();\n    std::vector<float>::iterator it26 = numbers.end();\n    std::vector<float>::iterator it27 = numbers.begin();\n    std::vector<float>::iterator it28 = numbers.end();\n    std::vector<float>::"}
{"task_id": "HumanEval/21", "completion": "\n    std::sort(numbers.begin(), numbers.end());\n    float min = numbers.begin()->value;\n    float max = numbers.end()->value;\n    float diff = max - min;\n    float scale = 1.0f / diff;\n    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back(number * scale);\n    }\n    return result;"}
{"task_id": "HumanEval/22", "completion": "\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral_constant(value)) {\n            result.push_back(std::integral_constant_value(value));\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/23", "completion": "\n    return string.length();"}
{"task_id": "HumanEval/24", "completion": "\n    long i = 1;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return n;"}
{"task_id": "HumanEval/25", "completion": "\n    std::vector<long> res;\n    while (n!= 1) {\n        long p = std::next_prime(n);\n        res.push_back(p);\n        n /= p;\n    }\n    return res;"}
{"task_id": "HumanEval/26", "completion": "\n    std::set<long> s;\n    std::vector<long> result;\n    for (auto n : numbers) {\n        if (s.find(n) == s.end()) {\n            s.insert(n);\n            result.push_back(n);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/27", "completion": "\n    std::string result;\n    for (auto c : string) {\n        if (c >= 'a' && c <= 'z') {\n            result += c.upper();\n        } else {\n            result += c.lower();\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/28", "completion": "\n    std::string result;\n    for (auto& string : strings) {\n        result += string;\n    }\n    return result;"}
{"task_id": "HumanEval/29", "completion": "\n    std::vector<std::string> result;\n    for (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/30", "completion": "\n    std::vector<long> res;\n    for (auto x: l) {\n        if (x > 0) {\n            res.push_back(x);\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/31", "completion": "\n    assert(n >= 1);\n    if (n == 1) {\n        return false;\n    }\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/33", "completion": "\n    std::vector<long> l_prime;\n    for (long i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_prime.push_back(l[i]);\n        } else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    l_prime.sort();\n    return l_prime;"}
{"task_id": "HumanEval/34", "completion": "\n    std::sort(l.begin(), l.end());\n    std::set<long> s;\n    std::vector<long> res;\n    for (auto x: l) {\n        if (s.find(x) == s.end()) {\n            s.insert(x);\n            res.push_back(x);\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/35", "completion": "\n    long max = l[0];\n    for (auto i : l) {\n        if (i > max) {\n            max = i;\n        }\n    }\n    return max;"}
{"task_id": "HumanEval/36", "completion": "\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if ((i % 11 == 0) || (i % 13 == 0)) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/37", "completion": "\n    std::vector<long> l_prime;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            l_prime.push_back(l[i]);\n        }\n    }\n    l_prime.sort();\n    return l_prime;"}
{"task_id": "HumanEval/39", "completion": "\n    assert(n > 0);\n    long a = 1;\n    long b = 1;\n    long c = 0;\n    for (long i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (c % i == 0) {\n            return c;\n        }\n    }\n    return c;"}
{"task_id": "HumanEval/40", "completion": "\n    // sort the vector\n    sort(l.begin(), l.end());\n    // initialize the set of seen values\n    std::set<long> seen;\n    // iterate through the vector\n    for (auto i : l) {\n        // if the current value is in the set, then we have a triple\n        if (seen.find(i)!= seen.end()) {\n            return true;\n        }\n        // otherwise, add the current value to the set\n        seen.insert(i);\n    }\n    // if we get to the end of the loop, then we did not find a triple\n    return false;"}
{"task_id": "HumanEval/41", "completion": "\n  // Imagine a road that's a perfectly straight infinitely long line.\n  // n cars are driving left to right;  simultaneously, a different set of n cars\n  // are driving right to left.   The two sets of cars start out being very far from\n  // each other.  All cars move in the same speed.  Two cars are said to collide\n  // when a car that's moving left to right hits a car that's moving right to left.\n  // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  // in their trajectory as if they did not collide.\n  // This function outputs the number of such collisions.\n  long answer = 0;\n  // Imagine a road that's a perfectly straight infinitely long line.\n  // n cars are driving left to right;  simultaneously, a different set of n cars\n  // are driving right to left.   The two sets of cars start out being very far from\n  // each other.  All cars move in the same speed.  Two cars are said to collide\n  // when a car that's moving left to right hits a car that's moving right to left.\n  // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  // in their trajectory as if they did not collide.\n  // This function outputs the number of such collisions.\n  long answer = 0;\n  // Imagine a road that's a perfectly straight infinitely long line.\n  // n cars are driving left to right;  simultaneously, a different set of n cars\n  // are driving right to left.   The two sets of cars start out being very far from\n  // each other.  All cars move in the same speed.  Two cars are said to collide\n  // when a car that's moving left to right hits a car that's moving right to left.\n  // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  // in their trajectory as if they did not collide.\n  // This function outputs the number of such collisions.\n  long answer = 0;\n  // Imagine a road that's a perfectly straight infinitely long line.\n  // n cars are driving left to right;  simultaneously, a different set of n cars\n  // are driving right to left.   The two sets"}
{"task_id": "HumanEval/42", "completion": "\n    std::vector<long> r;\n    for (auto i : l) r.push_back(i + 1);\n    return r;"}
{"task_id": "HumanEval/43", "completion": "\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] == l[i + 1]) {\n            continue;\n        }\n        if (l[i] + l[i + 1] == 0) {\n            return true;\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/44", "completion": "\n    std::string res = \"\";\n    while (x > 0) {\n        res += std::to_string(x % base);\n        x /= base;\n    }\n    return res.rbegin()\n        -> std::reverse(res.begin(), res.end());"}
{"task_id": "HumanEval/45", "completion": "\n    return (a * h) / 2;"}
{"task_id": "HumanEval/46", "completion": "\n    assert(n >= 0);\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    long a = 0;\n    long b = 2;\n    for (long i = 3; i <= n; i++) {\n        a = a + b;\n        b = a + b;\n    }\n    return a;"}
{"task_id": "HumanEval/47", "completion": "\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return (float(l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0f);\n    }\n    return float(l[l.size() / 2]);"}
{"task_id": "HumanEval/48", "completion": "\n    std::reverse(text.begin(), text.end());\n    return text == text;"}
{"task_id": "HumanEval/49", "completion": "\n    long r = 1;\n    for (; n; n /= 2) {\n        if (n % 2) r = r * r % p;\n    }\n    return r;"}
{"task_id": "HumanEval/51", "completion": "\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (std::isalpha(text[i])) {\n            result += text[i];\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/52", "completion": "\n    for (auto x: l) {\n        if (x > t) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/53", "completion": "\n    long sum = 0;\n    while (y!= 0) {\n        sum = sum + x;\n        x = y;\n        y = sum / 10;\n        sum = sum % 10;\n    }\n    return sum;"}
{"task_id": "HumanEval/54", "completion": "\n    std::set<char> s0_set, s1_set;\n    for (char c : s0) s0_set.insert(c);\n    for (char c : s1) s1_set.insert(c);\n    return s0_set == s1_set;"}
{"task_id": "HumanEval/55", "completion": "\n    assert(n >= 0);\n    if (n == 0) {\n        return 0;\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    else {\n        return fib(n - 1) + fib(n - 2);\n    }"}
{"task_id": "HumanEval/56", "completion": "\n    if (brackets.size() % 2!= 0) {\n        return false;\n    }\n    stack<char> s;\n    for (auto c : brackets) {\n        if (c == '<') {\n            s.push(c);\n        }\n        else if (c == '>') {\n            if (s.empty()) {\n                return false;\n            }\n            else if (s.top() == '<') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();"}
{"task_id": "HumanEval/57", "completion": "\n    bool increasing = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n            break;\n        }\n    }\n    bool decreasing = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n            break;\n        }\n    }\n    return increasing || decreasing;"}
{"task_id": "HumanEval/58", "completion": "\n    std::set<long> s1, s2;\n    for (auto x: l1) s1.insert(x);\n    for (auto x: l2) s2.insert(x);\n    std::vector<long> res;\n    for (auto x: s1) if (s2.find(x)!= s2.end()) res.push_back(x);\n    return res;"}
{"task_id": "HumanEval/59", "completion": "\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            n /= i;\n            return i;\n        }\n    }\n    return n;"}
{"task_id": "HumanEval/60", "completion": "\n    long sum = 0;\n    for (long i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;"}
{"task_id": "HumanEval/61", "completion": "\n    stack<char> s;\n    for (auto c : brackets) {\n        if (c == '(') {\n            s.push(c);\n        }\n        else if (c == ')') {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();"}
{"task_id": "HumanEval/62", "completion": "\n    std::vector<long> res;\n    for (auto x: xs) {\n        res.push_back(x * (long)2);\n    }\n    return res;"}
{"task_id": "HumanEval/63", "completion": "\n    assert(n >= 0);\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    long fib1 = 0;\n    long fib2 = 1;\n    long fib3 = 0;\n    for (long i = 3; i <= n; i++) {\n        fib3 = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = fib3;\n    }\n    return fib3;"}
{"task_id": "HumanEval/64", "completion": "\n    long count = 0;\n    for (auto c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/65", "completion": "\n    assert(shift >= 0);\n    if (shift == 0) return to_string(x);\n    if (shift > std::numeric_limits<long>::digits) return to_string(x >> std::numeric_limits<long>::digits);\n    return to_string((x % (1L << shift)) >> (shift - 1)) + to_string(x / (1L << shift));"}
{"task_id": "HumanEval/66", "completion": "\n    long sum = 0;\n    for (auto c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum += c - 'A' + 10;\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/67", "completion": "\n    long apple = 0;\n    long orange = 0;\n    long mango = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a') {\n            apple++;\n        }\n        if (s[i] == 'o') {\n            orange++;\n        }\n        if (s[i] =='m') {\n            mango++;\n        }\n    }\n    return n - apple - orange - mango;"}
{"task_id": "HumanEval/68", "completion": "\n    std::sort(arr.begin(), arr.end());\n    if (arr.empty() || arr.back() % 2)\n        return {};\n    else {\n        long min = arr.back();\n        long min_index = arr.size() - 1;\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                min_index = i;\n            }\n        }\n        return {min, min_index};\n    }"}
{"task_id": "HumanEval/69", "completion": "\n    long max = 0;\n    long freq = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            freq = 1;\n        } else if (i == max) {\n            freq++;\n        }\n    }\n    if (freq < max) {\n        return -1;\n    }\n    return max;"}
{"task_id": "HumanEval/70", "completion": "\n    std::sort(lst.begin(), lst.end());\n    std::vector<long> res;\n    for (auto i : lst) {\n        res.push_back(i);\n    }\n    return res;"}
{"task_id": "HumanEval/71", "completion": "\n    assert(a + b > c);\n    assert(a + c > b);\n    assert(b + c > a);\n    if (a + b > c && a + c > b && b + c > a) {\n        return (a + b + c) / 2;\n    }\n    return -1;"}
{"task_id": "HumanEval/72", "completion": "\n    long sum = 0;\n    for (auto x: q) {\n        sum += x;\n    }\n    return sum <= w && is_palindromic(q);"}
{"task_id": "HumanEval/73", "completion": "\n    long n = arr.size();\n    long ans = 0;\n    std::sort(arr.begin(), arr.end());\n    for (long i = 0; i < n; i++) {\n        if (arr[i] % 2 == 0) {\n            ans += (n - i) / 2;\n            break;\n        }\n    }\n    return ans;"}
{"task_id": "HumanEval/74", "completion": "\n    std::vector<std::string> result;\n    if (lst1.size() == 0) {\n        return lst2;\n    }\n    if (lst2.size() == 0) {\n        return lst1;\n    }\n    if (lst1.size() > lst2.size()) {\n        return lst2;\n    }\n    if (lst2.size() > lst1.size()) {\n        return lst1;\n    }\n    if (lst1.size() == lst2.size()) {\n        return lst1;\n    }\n    for (auto i : lst1) {\n        for (auto j : lst2) {\n            if (i.size() < j.size()) {\n                result.push_back(i);\n                break;\n            }\n            if (i.size() > j.size()) {\n                result.push_back(j);\n                break;\n            }\n            if (i.size() == j.size()) {\n                if (i < j) {\n                    result.push_back(i);\n                    break;\n                }\n                if (i > j) {\n                    result.push_back(j);\n                    break;\n                }\n            }\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/75", "completion": "\n    long b = a;\n    long c = a;\n    long d = a;\n    while (b > 1) {\n        while (b > 1) {\n            if (b % 2 == 0) {\n                b /= 2;\n            } else {\n                break;\n            }\n        }\n        while (c > 1) {\n            if (c % 3 == 0) {\n                c /= 3;\n            } else {\n                break;\n            }\n        }\n        while (d > 1) {\n            if (d % 5 == 0) {\n                d /= 5;\n            } else {\n                break;\n            }\n        }\n        if (b == 1 && c == 1 && d == 1) {\n            return true;\n        }\n        b = a;\n        c = a;\n        d = a;\n    }\n    return false;"}
{"task_id": "HumanEval/76", "completion": "\n    if (x == 1) {\n        return true;\n    }\n    if (x == n) {\n        return true;\n    }\n    if (x == 0) {\n        return false;\n    }\n    if (x % n == 0) {\n        return true;\n    }\n    return false;"}
{"task_id": "HumanEval/77", "completion": "\n    long b = a;\n    while (b % 10 == 0) {\n        b /= 10;\n    }\n    if (b == 1) {\n        return true;\n    }\n    return false;"}
{"task_id": "HumanEval/78", "completion": "\n    long res = 0;\n    for (auto i : num) {\n        if (i == '0') continue;\n        if (i == 'A') continue;\n        if (i == 'B') continue;\n        if (i == 'C') continue;\n        if (i == 'D') continue;\n        if (i == 'E') continue;\n        if (i == 'F') continue;\n        if (i == '1') continue;\n        if (i == '2') continue;\n        if (i == '3') continue;\n        if (i == '4') continue;\n        if (i == '5') continue;\n        if (i == '6') continue;\n        if (i == '7') continue;\n        if (i == '8') continue;\n        if (i == '9') continue;\n        if (i == 'A') continue;\n        if (i == 'B') continue;\n        if (i == 'C') continue;\n        if (i == 'D') continue;\n        if (i == 'E') continue;\n        if (i == 'F') continue;\n        res++;\n    }\n    return res;"}
{"task_id": "HumanEval/79", "completion": "\n    std::string binary;\n    while (decimal) {\n        binary += std::to_string((decimal % 2)? 1 : 0) + \"db\";\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";"}
{"task_id": "HumanEval/80", "completion": "\n    if (s.size() < 3) {\n        return false;\n    }\n    std::set<std::string> set;\n    for (int i = 0; i < s.size(); i++) {\n        if (set.find(s.substr(i, 3))!= set.end()) {\n            return false;\n        }\n        set.insert(s.substr(i, 3));\n    }\n    return true;"}
{"task_id": "HumanEval/81", "completion": "\n    std::vector<std::string> result;\n    for(auto grade : grades) {\n        if(grade >= 4.0) {\n            result.push_back(\"A+\");\n        }\n        else if(grade >= 3.7) {\n            result.push_back(\"A\");\n        }\n        else if(grade >= 3.3) {\n            result.push_back(\"A-\");\n        }\n        else if(grade >= 3.0) {\n            result.push_back(\"B+\");\n        }\n        else if(grade >= 2.7) {\n            result.push_back(\"B\");\n        }\n        else if(grade >= 2.3) {\n            result.push_back(\"B-\");\n        }\n        else if(grade >= 2.0) {\n            result.push_back(\"C+\");\n        }\n        else if(grade >= 1.7) {\n            result.push_back(\"C\");\n        }\n        else if(grade >= 1.3) {\n            result.push_back(\"C-\");\n        }\n        else if(grade >= 1.0) {\n            result.push_back(\"D+\");\n        }\n        else if(grade >= 0.7) {\n            result.push_back(\"D\");\n        }\n        else if(grade >= 0.0) {\n            result.push_back(\"D-\");\n        }\n        else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/82", "completion": "\n    int len = string.length();\n    if (len == 1) {\n        return false;\n    }\n    for (int i = 2; i < len; i++) {\n        if (len % i == 0) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/83", "completion": "\n    long res = 0;\n    for (long i = 1; i <= n; i++) {\n        long cnt = 0;\n        while (i > 0) {\n            if (i % 10 == 1)\n                cnt++;\n            i /= 10;\n        }\n        res += cnt;\n    }\n    return res;"}
{"task_id": "HumanEval/84", "completion": "\n    std::string ans;\n    while (N) {\n        ans += std::to_string(N % 2);\n        N /= 2;\n    }\n    return ans;"}
{"task_id": "HumanEval/85", "completion": "\n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/86", "completion": "\n    std::string res;\n    std::vector<std::string> words;\n    std::vector<char> temp;\n    std::vector<char> temp2;\n    std::vector<char> temp3;\n    std::vector<char> temp4;\n    std::vector<char> temp5;\n    std::vector<char> temp6;\n    std::vector<char> temp7;\n    std::vector<char> temp8;\n    std::vector<char> temp9;\n    std::vector<char> temp10;\n    std::vector<char> temp11;\n    std::vector<char> temp12;\n    std::vector<char> temp13;\n    std::vector<char> temp14;\n    std::vector<char> temp15;\n    std::vector<char> temp16;\n    std::vector<char> temp17;\n    std::vector<char> temp18;\n    std::vector<char> temp19;\n    std::vector<char> temp20;\n    std::vector<char> temp21;\n    std::vector<char> temp22;\n    std::vector<char> temp23;\n    std::vector<char> temp24;\n    std::vector<char> temp25;\n    std::vector<char> temp26;\n    std::vector<char> temp27;\n    std::vector<char> temp28;\n    std::vector<char> temp29;\n    std::vector<char> temp30;\n    std::vector<char> temp31;\n    std::vector<char> temp32;\n    std::vector<char> temp33;\n    std::vector<char> temp34;\n    std::vector<char> temp35;\n    std::vector<char> temp36;\n    std::vector<char> temp37;\n    std::vector<char> temp38;\n    std::vector<char> temp39;\n    std::vector<char> temp40;\n    std::vector<char> temp41;\n    std::vector<char> temp42;\n    std::vector<char> temp43;\n    std::vector<char> temp44;\n    std::vector<char> temp45"}
{"task_id": "HumanEval/87", "completion": "\n    std::vector<std::tuple<long, long>> res;\n    std::sort(lst.begin(), lst.end(), [](std::vector<std::vector<long>>::const_iterator it) {\n        return it->begin()->begin()->second();\n    });\n    std::sort(lst.begin(), lst.end(), [](std::vector<std::vector<long>>::const_iterator it) {\n        return it->begin()->end()->second();\n    });\n    std::sort(lst.begin(), lst.end(), [](std::vector<std::vector<long>>::const_iterator it) {\n        return it->end()->begin()->second();\n    });\n    std::sort(lst.begin(), lst.end(), [](std::vector<std::vector<long>>::const_iterator it) {\n        return it->end()->end()->second();\n    });\n    for (auto it = lst.begin(); it!= lst.end(); it++) {\n        for (auto it2 = it->begin(); it2!= it->end(); it2++) {\n            if (it2->second() == x) {\n                res.push_back(std::make_tuple(it->size() - it2 - 1, it2->first()));\n            }\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/88", "completion": "\n    std::sort(array.begin(), array.end());\n    if (array.size() % 2 == 0) {\n        return array;\n    }\n    else {\n        return array.reverse();\n    }"}
{"task_id": "HumanEval/89", "completion": "\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        char c = s[i];\n        if (c >= 'a' && c <= 'z') {\n            result += (c + 2) % 26 + 'a';\n        } else if (c >= 'A' && c <= 'Z') {\n            result += (c + 2) % 26 + 'A';\n        } else {\n            result += c;\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/90", "completion": "\n    if(lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];"}
{"task_id": "HumanEval/91", "completion": "\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            if (S[i] == '!' && i + 1 < S.size() && S[i + 1] == 'I') {\n                count++;\n            }\n            continue;\n        }\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/92", "completion": "\n    if (x == y + z || x == z + y || y == x + z) {\n        return true;\n    }\n    return false;"}
{"task_id": "HumanEval/93", "completion": "\n    std::string encoded;\n    for (int i = 0; i < message.size(); i++) {\n        if (isupper(message[i])) {\n            encoded.push_back(message[i]);\n        } else if (islower(message[i])) {\n            encoded.push_back(message[i]);\n        } else {\n            encoded.push_back(message[i]);\n        }\n    }\n    return encoded;"}
{"task_id": "HumanEval/94", "completion": "\n    long sum = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long n = lst[i];\n        while (n > 0) {\n            long t = n % 10;\n            n = n / 10;\n            sum += t;\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/95", "completion": "\n    if (dict.empty()) {\n        return false;\n    }\n    bool all_lower = true;\n    bool all_upper = true;\n    for (auto it = dict.begin(); it!= dict.end(); it++) {\n        if (it->first!= it->first.lower()) {\n            all_lower = false;\n        }\n        if (it->first!= it->first.upper()) {\n            all_upper = false;\n        }\n    }\n    return all_lower || all_upper;"}
{"task_id": "HumanEval/96", "completion": "\n    std::vector<long> res;\n    for (long i = 2; i <= n; i++) {\n        if (is_prime(i)) {\n            res.push_back(i);\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/97", "completion": "\n    long product = 0;\n    while (b > 0) {\n        product = product * 10 + (a % 10) * (b % 10);\n        a = a / 10;\n        b = b / 10;\n    }\n    return product;"}
{"task_id": "HumanEval/98", "completion": "\n    long count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            if (i % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/99", "completion": "\n    long int n = atol(value.c_str());\n    long int closest = n;\n    long int closest_diff = abs(n - closest);\n    long int next_closest = n;\n    long int next_closest_diff = abs(n - next_closest);\n    while (next_closest_diff < closest_diff) {\n        closest_diff = next_closest_diff;\n        closest = next_closest;\n        next_closest = (n + next_closest) / 2;\n        next_closest_diff = abs(n - next_closest);\n    }\n    return closest;"}
{"task_id": "HumanEval/100", "completion": "\n    std::vector<long> res;\n    if (n % 2 == 0) {\n        res.push_back(n);\n        n = n / 2;\n    }\n    while (n > 1) {\n        res.push_back(n);\n        n = n / 2;\n    }\n    return res;"}
{"task_id": "HumanEval/101", "completion": "\n    std::vector<std::string> words;\n    std::string word;\n    for (auto c : s) {\n        if (c =='') {\n            words.push_back(word);\n            word.clear();\n        } else if (c == ',') {\n            words.push_back(word);\n            word.clear();\n        } else {\n            word += c;\n        }\n    }\n    words.push_back(word);\n    return words;"}
{"task_id": "HumanEval/102", "completion": "\n    long result = -1;\n    for (long i = x; i <= y; i += 2) {\n        if (i % 2 == 0) {\n            result = i;\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/103", "completion": "\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    if (n > m) {\n        return Union_std_string_long(\"-1\");\n    }\n    return Union_std_string_long(sum / (m - n + 1));"}
{"task_id": "HumanEval/104", "completion": "\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (auto i : x) {\n        if (i % 2 == 0) {\n            break;\n        }\n        ans.push_back(i);\n    }\n    return ans;"}
{"task_id": "HumanEval/105", "completion": "\n    std::sort(arr.begin(), arr.end());\n    std::vector<std::string> result;\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n            result.push_back(std::to_string(i));\n        }\n    }\n    std::reverse(result.begin(), result.end());\n    return result;"}
{"task_id": "HumanEval/106", "completion": "\n    std::vector<long> res(n, 1);\n    for (long i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            res[i - 1] = i;\n        } else {\n            res[i - 1] = 1;\n            for (long j = 1; j <= i; j++) {\n                res[i - 1] += j;\n            }\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/107", "completion": "\n    long even = 0, odd = 0;\n    for (long i = 1; i <= n; i++) {\n        long num = i;\n        long rev = 0;\n        while (num > 0) {\n            rev = rev * 10 + num % 10;\n            num /= 10;\n        }\n        if (rev == i) {\n            if (i % 2 == 0)\n                even++;\n            else\n                odd++;\n        }\n    }\n    return std::make_tuple(even, odd);"}
{"task_id": "HumanEval/108", "completion": "\n    long count = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            i = std::abs(i);\n            while (i) {\n                i /= 10;\n                count++;\n            }\n        } else {\n            while (i) {\n                i /= 10;\n                count++;\n            }\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/109", "completion": "\n    if (arr.size() == 0) {\n        return true;\n    }\n    int n = arr.size();\n    int start = 0;\n    int end = n - 1;\n    int mid = 0;\n    while (start <= end) {\n        mid = (start + end) / 2;\n        if (arr[mid] == mid + 1) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n    if (start == n) {\n        return true;\n    }\n    int last = arr[start - 1];\n    for (int i = start; i < n; i++) {\n        if (arr[i] < last) {\n            return false;\n        }\n        last = arr[i];\n    }\n    return true;"}
{"task_id": "HumanEval/110", "completion": "\n    std::vector<long> even(lst1);\n    std::vector<long> odd(lst1);\n    for (auto i : lst1) {\n        if (i % 2 == 0) {\n            even.push_back(i);\n        } else {\n            odd.push_back(i);\n        }\n    }\n    for (auto i : lst2) {\n        if (i % 2 == 0) {\n            even.push_back(i);\n        } else {\n            odd.push_back(i);\n        }\n    }\n    if (odd.size() == 0) {\n        return \"YES\";\n    }\n    if (even.size() == 0) {\n        return \"NO\";\n    }\n    if (odd.size() == even.size()) {\n        return \"YES\";\n    }\n    return \"NO\";"}
{"task_id": "HumanEval/111", "completion": "\n    std::map<std::string,long> ret;\n    std::stringstream ss(test);\n    std::string word;\n    while (std::getline(ss, word)) {\n        std::stringstream ss2(word);\n        std::string letter;\n        while (std::getline(ss2, letter)) {\n            if (ret.count(letter) == 0) {\n                ret[letter] = 1;\n            } else {\n                ret[letter]++;\n            }\n        }\n    }\n    return ret;"}
{"task_id": "HumanEval/112", "completion": "\n    std::string res;\n    for (auto i = s.begin(); i!= s.end(); i++) {\n        if (s[i]!= c[0]) {\n            res += s[i];\n        }\n    }\n    return std::make_tuple(res, res == res[::-1]);"}
{"task_id": "HumanEval/113", "completion": "\n    std::vector<std::string> result;\n    for (auto i : lst) {\n        int count = 0;\n        for (auto j : i) {\n            if (j == '0')\n                continue;\n            if (j == '1')\n                count++;\n            else\n                count += 2;\n        }\n        result.push_back(std::to_string(count));\n    }\n    return result;"}
{"task_id": "HumanEval/114", "completion": "\n    long min_sum = std::numeric_limits<long>::max();\n    long cur_sum = 0;\n    for (auto num : nums) {\n        cur_sum += num;\n        min_sum = min(min_sum, cur_sum);\n        if (cur_sum < 0) {\n            cur_sum = 0;\n        }\n    }\n    return min_sum;"}
{"task_id": "HumanEval/115", "completion": "\n    long n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                long curr = 0;\n                long curr_j = j;\n                while (curr_j < m) {\n                    if (grid[i][curr_j] == 1) {\n                        curr++;\n                        curr_j++;\n                    } else {\n                        break;\n                    }\n                }\n                ans += curr * (m - j);\n            }\n        }\n    }\n    return ans;"}
{"task_id": "HumanEval/116", "completion": "\n    std::sort(arr.begin(), arr.end());\n    return arr;"}
{"task_id": "HumanEval/117", "completion": "\n    std::vector<std::string> res;\n    if (s.size() == 0) {\n        return res;\n    }\n    std::vector<char> vowels;\n    vowels.push_back('a');\n    vowels.push_back('e');\n    vowels.push_back('i');\n    vowels.push_back('o');\n    vowels.push_back('u');\n    std::vector<char> consonants;\n    consonants.push_back('b');\n    consonants.push_back('c');\n    consonants.push_back('d');\n    consonants.push_back('f');\n    consonants.push_back('g');\n    consonants.push_back('h');\n    consonants.push_back('j');\n    consonants.push_back('k');\n    consonants.push_back('l');\n    consonants.push_back('m');\n    consonants.push_back('n');\n    consonants.push_back('p');\n    consonants.push_back('q');\n    consonants.push_back('r');\n    consonants.push_back('s');\n    consonants.push_back('t');\n    consonants.push_back('v');\n    consonants.push_back('w');\n    consonants.push_back('x');\n    consonants.push_back('y');\n    consonants.push_back('z');\n    std::vector<char> temp;\n    std::vector<char> temp2;\n    std::vector<char> temp3;\n    std::vector<char> temp4;\n    std::vector<char> temp5;\n    std::vector<char> temp6;\n    std::vector<char> temp7;\n    std::vector<char> temp8;\n    std::vector<char> temp9;\n    std::vector<char> temp10;\n    std::vector<char> temp11;\n    std::vector<char> temp12;\n    std::vector<char> temp13;\n    std::"}
{"task_id": "HumanEval/118", "completion": "\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' || word[i] == 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U') {\n            return word.substr(i + 1);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/119", "completion": "\n    std::string s1, s2;\n    for (auto i : lst) {\n        s1 += i;\n    }\n    for (auto i : lst) {\n        s2 += i;\n    }\n    return (s1 + s2).find(\"()\") == -1;"}
{"task_id": "HumanEval/120", "completion": "\n    std::sort(arr.begin(), arr.end());\n    std::vector<long> ans(k);\n    for (int i = 0; i < k; i++) {\n        ans[i] = arr[i];\n    }\n    return ans;"}
{"task_id": "HumanEval/121", "completion": "\n    long sum = 0;\n    for (auto i : lst) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/122", "completion": "\n    long sum = 0;\n    for (int i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    return sum;"}
{"task_id": "HumanEval/123", "completion": "\n    std::vector<long> collatz;\n    while (n!= 1) {\n        if (n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        collatz.push_back(n);\n    }\n    return collatz;"}
{"task_id": "HumanEval/124", "completion": "\n    std::string::size_type i = 0;\n    std::string::size_type j = 0;\n    std::string::size_type k = 0;\n    std::string::size_type l = 0;\n    std::string::size_type m = 0;\n    std::string::size_type n = 0;\n    std::string::size_type o = 0;\n    std::string::size_type p = 0;\n    std::string::size_type q = 0;\n    std::string::size_type r = 0;\n    std::string::size_type s = 0;\n    std::string::size_type t = 0;\n    std::string::size_type u = 0;\n    std::string::size_type v = 0;\n    std::string::size_type w = 0;\n    std::string::size_type x = 0;\n    std::string::size_type y = 0;\n    std::string::size_type z = 0;\n    std::string::size_type a = 0;\n    std::string::size_type b = 0;\n    std::string::size_type c = 0;\n    std::string::size_type d = 0;\n    std::string::size_type e = 0;\n    std::string::size_type f = 0;\n    std::string::size_type g = 0;\n    std::string::size_type h = 0;\n    std::string::size_type i = 0;\n    std::string::size_type j = 0;\n    std::string::size_type k = 0;\n    std::string::size_type l = 0;\n    std::string::size_type m = 0;\n    std::string::size_type n = 0;\n    std::string::size_type o = 0;\n    std::string::size_type p = 0;\n    std::string::size_type q = 0;\n    std::string::size_type r = 0;\n    std::string::size_type s = 0;\n    std::string::size_type t = 0;\n    std::string::size_type u = 0;\n    std::string"}
{"task_id": "HumanEval/125", "completion": "\n    std::vector<std::string> res;\n    std::string txt_copy = txt;\n    std::string txt_copy_copy = txt_copy;\n    std::string txt_copy_copy_copy = txt_copy_copy;\n    std::string txt_copy_copy_copy_copy = txt_copy_copy_copy;\n    std::string txt_copy_copy_copy_copy_copy = txt_copy_copy_copy_copy;\n    std::string txt_copy_copy_copy_copy_copy_copy = txt_copy_copy_copy_copy_copy;\n    std::string txt_copy_copy_copy_copy_copy_copy_copy = txt_copy_copy_copy_copy_copy_copy;\n    std::string txt_copy_copy_copy_copy_copy_copy_copy_copy = txt_copy_copy_copy_copy_copy_copy_copy;\n    std::string txt_copy_copy_copy_copy_copy_copy_copy_copy_copy = txt_copy_copy_copy_copy_copy_copy_copy_copy;\n    std::string txt_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = txt_copy_copy_copy_copy_copy_copy_copy_copy_copy;\n    std::string txt_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = txt_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy;\n    std::string txt_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = txt_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy;\n    std::string txt_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = txt_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy;\n    std::string txt_copy_copy_copy"}
{"task_id": "HumanEval/126", "completion": "\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] == lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/127", "completion": "\n    std::tuple<long, long> start, end;\n    if (interval1.first < interval1.second && interval2.first < interval2.second) {\n        start = std::min(interval1.first, interval2.first);\n        end = std::max(interval1.second, interval2.second);\n        if (start <= end) {\n            if (end - start + 1 == is_prime(end - start + 1)) {\n                return \"YES\";\n            }\n            else {\n                return \"NO\";\n            }\n        }\n        else {\n            return \"NO\";\n        }\n    }\n    else {\n        return \"NO\";\n    }"}
{"task_id": "HumanEval/128", "completion": "\n    if (arr.empty()) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n    for (auto x: arr) {\n        sum += abs(x);\n        prod *= (x > 0? 1 : -1);\n    }\n    return sum * prod;"}
{"task_id": "HumanEval/129", "completion": "\n    std::vector<std::vector<long>> dp(k + 1, std::vector<long>(grid.size(), 0));\n    dp[0] = std::vector<long>(grid.size(), 0);\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[i].size(); j++) {\n            dp[0][i] += grid[i][j];\n        }\n    }\n    for (int i = 1; i <= k; i++) {\n        for (int j = 0; j < grid.size(); j++) {\n            for (int k = 0; k < grid[j].size(); k++) {\n                dp[i][j] = std::min(dp[i][j], dp[i - 1][k] + grid[k][j]);\n            }\n        }\n    }\n    std::vector<long> ans;\n    for (int i = 0; i < grid.size(); i++) {\n        ans.push_back(dp[k][i]);\n    }\n    return ans;"}
{"task_id": "HumanEval/130", "completion": "\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n    res.push_back(2);\n    res.push_back(8);\n    for (long i = 4; i <= n; i++) {\n        res.push_back(res[i - 1] + res[i - 2] + res[i - 3]);\n    }\n    return res;"}
{"task_id": "HumanEval/131", "completion": "\n    long prod = 1;\n    while (n) {\n        prod *= n % 10;\n        n /= 10;\n    }\n    return prod;"}
{"task_id": "HumanEval/132", "completion": "\n    std::stack<std::string> stack;\n    for (auto c : string) {\n        if (c == ']') {\n            if (stack.empty()) {\n                return false;\n            }\n            std::string top = stack.top();\n            stack.pop();\n            if (top == '[' || top == '{') {\n                return false;\n            }\n        }\n        else {\n            stack.push(c);\n        }\n    }\n    return stack.empty();"}
{"task_id": "HumanEval/133", "completion": "\n    long sum = 0;\n    for (auto x: lst) {\n        sum += int(x) * int(x);\n    }\n    return sum;"}
{"task_id": "HumanEval/134", "completion": "\n    if (txt.size() == 0) {\n        return false;\n    }\n    return isalpha(txt[txt.size() - 1]) &&!(txt.rfind(\" \") == txt.size() - 1);"}
{"task_id": "HumanEval/135", "completion": "\n    long max_index = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            max_index = i;\n            break;\n        }\n    }\n    return max_index;"}
{"task_id": "HumanEval/136", "completion": "\n    std::optional<long> a = std::nullopt;\n    std::optional<long> b = std::nullopt;\n    for (auto x: lst) {\n        if (!a || x > a) {\n            a = x;\n        }\n        if (!b || x < b) {\n            b = x;\n        }\n    }\n    return std::make_tuple(a, b);"}
{"task_id": "HumanEval/137", "completion": "\n    if(a == b)\n        return std::nullopt;\n    if(a.f0 > b.f0)\n        return a;\n    if(a.f0 < b.f0)\n        return b;\n    if(a.f1 > b.f1)\n        return a;\n    if(a.f1 < b.f1)\n        return b;\n    if(a.f2 > b.f2)\n        return a;\n    if(a.f2 < b.f2)\n        return b;\n    return std::nullopt;"}
{"task_id": "HumanEval/138", "completion": "\n    assert(n >= 0);\n    if (n == 0) {\n        return false;\n    }\n    if (n == 1) {\n        return true;\n    }\n    if (n == 2) {\n        return false;\n    }\n    if (n == 3) {\n        return true;\n    }\n    if (n == 4) {\n        return true;\n    }\n    if (n == 5) {\n        return false;\n    }\n    if (n == 6) {\n        return false;\n    }\n    if (n == 7) {\n        return true;\n    }\n    if (n == 8) {\n        return true;\n    }\n    if (n == 9) {\n        return false;\n    }\n    if (n == 10) {\n        return true;\n    }\n    if (n == 11) {\n        return false;\n    }\n    if (n == 12) {\n        return true;\n    }\n    if (n == 13) {\n        return false;\n    }\n    if (n == 14) {\n        return true;\n    }\n    if (n == 15) {\n        return false;\n    }\n    if (n == 16) {\n        return true;\n    }\n    if (n == 17) {\n        return false;\n    }\n    if (n == 18) {\n        return true;\n    }\n    if (n == 19) {\n        return false;\n    }\n    if (n == 20) {\n        return true;\n    }\n    if (n == 21) {\n        return false;\n    }\n    if (n == 22) {\n        return true;\n    }\n    if (n == 23) {\n        return false;\n    }\n    if (n == 24) {\n        return true;\n    }\n    if (n == 25) {\n        return false;\n    }\n    if (n == 26) {\n        return true;\n    }\n    if (n == 27) {\n        return false;\n    }\n    if (n == 28) {\n        return true;\n    }\n    if (n == 29) {\n        "}
{"task_id": "HumanEval/139", "completion": "\n    long result = 1;\n    for (long i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;"}
{"task_id": "HumanEval/140", "completion": "\n    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] =='') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/141", "completion": "\n    std::string::size_type i = 0;\n    std::string::size_type j = 0;\n    std::string::size_type k = 0;\n    std::string::size_type l = 0;\n    std::string::size_type m = 0;\n    std::string::size_type n = 0;\n    std::string::size_type o = 0;\n    std::string::size_type p = 0;\n    std::string::size_type q = 0;\n    std::string::size_type r = 0;\n    std::string::size_type s = 0;\n    std::string::size_type t = 0;\n    std::string::size_type u = 0;\n    std::string::size_type v = 0;\n    std::string::size_type w = 0;\n    std::string::size_type x = 0;\n    std::string::size_type y = 0;\n    std::string::size_type z = 0;\n    std::string::size_type a = 0;\n    std::string::size_type b = 0;\n    std::string::size_type c = 0;\n    std::string::size_type d = 0;\n    std::string::size_type e = 0;\n    std::string::size_type f = 0;\n    std::string::size_type g = 0;\n    std::string::size_type h = 0;\n    std::string::size_type i = 0;\n    std::string::size_type j = 0;\n    std::string::size_type k = 0;\n    std::string::size_type l = 0;\n    std::string::size_type m = 0;\n    std::string::size_type n = 0;\n    std::string::size_type o = 0;\n    std::string::size_type p = 0;\n    std::string::size_type q = 0;\n    std::string::size_type r = 0;\n    std::string::size_type s = 0;\n    std::string::size_type t = 0;\n    std::string::size_type u = 0;\n    std::string"}
{"task_id": "HumanEval/142", "completion": "\n    long sum = 0;\n    for (auto i : lst) {\n        if (i % 3 == 0)\n            sum += i * i;\n        else if (i % 4 == 0)\n            sum += i * i * i;\n    }\n    return sum;"}
{"task_id": "HumanEval/143", "completion": "\n    std::string res;\n    std::vector<std::string> words;\n    std::string word;\n    for (auto i = 0; i < sentence.size(); i++) {\n        if (sentence[i] =='') {\n            words.push_back(word);\n            word.clear();\n        } else {\n            word += sentence[i];\n        }\n    }\n    for (auto i = 0; i < words.size(); i++) {\n        if (isPrime(words[i].size())) {\n            res += words[i] +'';\n        }\n    }\n    return res.rstrip();"}
{"task_id": "HumanEval/144", "completion": "\n    std::string::size_type i = x.find('/');\n    std::string::size_type j = n.find('/');\n    if (i == std::string::npos || j == std::string::npos)\n        return false;\n    int a = stoi(x.substr(0, i));\n    int b = stoi(x.substr(i + 1, x.size() - i - 1));\n    int c = stoi(n.substr(0, j));\n    int d = stoi(n.substr(j + 1, n.size() - j - 1));\n    if (a * d == b * c)\n        return true;\n    return false;"}
{"task_id": "HumanEval/145", "completion": "\n    std::sort(nums.begin(), nums.end(), [](long a, long b) {\n        return std::sum(std::vector<long>({a, b})) < std::sum(std::vector<long>({b, a}));\n    });\n    return nums;"}
{"task_id": "HumanEval/146", "completion": "\n    long count = 0;\n    for (auto n : nums) {\n        if (n > 10 && ((n % 10) % 2) == 1) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/147", "completion": "\n    long a[n], b[n], c[n], d[n], e[n], f[n], g[n], h[n], i[n], j[n], k[n], l[n], m[n], n[n], o[n], p[n], q[n], r[n], s[n], t[n], u[n], v[n], w[n], x[n], y[n], z[n];\n    a[0] = 1;\n    b[0] = 3;\n    c[0] = 7;\n    d[0] = 13;\n    e[0] = 21;\n    for (int i = 1; i < n; i++) {\n        a[i] = i * i - i + 1;\n        b[i] = a[i] + a[i - 1];\n        c[i] = b[i] + a[i - 1];\n        d[i] = c[i] + a[i - 1];\n        e[i] = d[i] + a[i - 1];\n    }\n    long ans = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] % 3 == 0) {\n                    ans++;\n                }\n            }\n        }\n    }\n    return ans;"}
{"task_id": "HumanEval/148", "completion": "\n    std::vector<std::string> planets;\n    if (planet1 == \"Mercury\" || planet1 == \"Venus\" || planet1 == \"Earth\" || planet1 == \"Mars\" || planet1 == \"Jupiter\" || planet1 == \"Saturn\" || planet1 == \"Uranus\" || planet1 == \"Neptune\") {\n        if (planet2 == \"Mercury\" || planet2 == \"Venus\" || planet2 == \"Earth\" || planet2 == \"Mars\" || planet2 == \"Jupiter\" || planet2 == \"Saturn\" || planet2 == \"Uranus\" || planet2 == \"Neptune\") {\n            if (planet1 == \"Mercury\") {\n                if (planet2 == \"Venus\") {\n                    planets.push_back(\"Earth\");\n                    planets.push_back(\"Mars\");\n                    planets.push_back(\"Jupiter\");\n                    planets.push_back(\"Saturn\");\n                    planets.push_back(\"Uranus\");\n                    planets.push_back(\"Neptune\");\n                }\n                else if (planet2 == \"Earth\") {\n                    planets.push_back(\"Venus\");\n                    planets.push_back(\"Mars\");\n                    planets.push_back(\"Jupiter\");\n                    planets.push_back(\"Saturn\");\n                    planets.push_back(\"Uranus\");\n                    planets.push_back(\"Neptune\");\n                }\n                else if (planet2 == \"Mars\") {\n                    planets.push_back(\"Venus\");\n                    planets.push_back(\"Earth\");\n                    planets.push_back(\"Jupiter\");\n                    planets.push_back(\"Saturn\");\n                    planets.push_back(\"Uranus\");\n                    planets.push_back(\"Neptune\");\n                }\n                else if (planet2 == \"Jupiter\") {\n                    planets.push_back(\"Venus\");\n                    planets.push_back(\"Earth\");\n                    planets.push_back(\"Mars\");\n                    planets.push_back(\"Saturn\");\n                    planets.push_back(\"Uranus\");\n                    planets.push_back(\"Neptune\");\n                }\n"}
{"task_id": "HumanEval/149", "completion": "\n    std::sort(lst.begin(), lst.end());\n    std::vector<std::string> result;\n    for (auto i : lst) {\n        if (i.size() % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/150", "completion": "\n    long result = 0;\n    if (n == x) {\n        result = y;\n    } else if (n == y) {\n        result = x;\n    } else {\n        result = n;\n    }\n    return result;"}
{"task_id": "HumanEval/151", "completion": "\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0 || i!= (long)i)\n            continue;\n        if (i % 2 == 1)\n            sum += i * i;\n    }\n    return sum;"}
{"task_id": "HumanEval/152", "completion": "\n    std::vector<long> result;\n    for (auto i = 0; i < game.size(); i++) {\n        if (game[i] == guess[i]) {\n            result.push_back(0);\n        } else {\n            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/153", "completion": "\n    std::string strongest_extension = \"\";\n    int strongest_extension_strength = 0;\n    for (auto extension : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') CAP++;\n            else SM++;\n        }\n        int strength = CAP - SM;\n        if (strength > strongest_extension_strength) {\n            strongest_extension_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;"}
{"task_id": "HumanEval/154", "completion": "\n    std::string a_rotated;\n    std::string b_rotated;\n    std::string a_rotated_2;\n    std::string b_rotated_2;\n    std::string a_rotated_3;\n    std::string b_rotated_3;\n    std::string a_rotated_4;\n    std::string b_rotated_4;\n    std::string a_rotated_5;\n    std::string b_rotated_5;\n    std::string a_rotated_6;\n    std::string b_rotated_6;\n    std::string a_rotated_7;\n    std::string b_rotated_7;\n    std::string a_rotated_8;\n    std::string b_rotated_8;\n    std::string a_rotated_9;\n    std::string b_rotated_9;\n    std::string a_rotated_10;\n    std::string b_rotated_10;\n    std::string a_rotated_11;\n    std::string b_rotated_11;\n    std::string a_rotated_12;\n    std::string b_rotated_12;\n    std::string a_rotated_13;\n    std::string b_rotated_13;\n    std::string a_rotated_14;\n    std::string b_rotated_14;\n    std::string a_rotated_15;\n    std::string b_rotated_15;\n    std::string a_rotated_16;\n    std::string b_rotated_16;\n    std::string a_rotated_17;\n    std::string b_rotated_17;\n    std::string a_rotated_18;\n    std::string b_rotated_18;\n    std::string a_rotated_19;\n    std::string b_rotated_19;\n    std::string a_rotated_20;\n    std::string b_rotated_20;\n    std::string a_rotated_21;\n    std::string b_rotated_21;\n    std::string a_rotated_22;"}
{"task_id": "HumanEval/155", "completion": "\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 10 % 2 == 0) {\n            even++;\n        }\n        else {\n            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);"}
{"task_id": "HumanEval/156", "completion": "\n    std::string roman;\n    int num = number;\n    while (num > 0) {\n        if (num >= 1000) {\n            roman += \"M\";\n            num -= 1000;\n        }\n        else if (num >= 900) {\n            roman += \"CM\";\n            num -= 900;\n        }\n        else if (num >= 500) {\n            roman += \"D\";\n            num -= 500;\n        }\n        else if (num >= 400) {\n            roman += \"CD\";\n            num -= 400;\n        }\n        else if (num >= 100) {\n            roman += \"C\";\n            num -= 100;\n        }\n        else if (num >= 90) {\n            roman += \"XC\";\n            num -= 90;\n        }\n        else if (num >= 50) {\n            roman += \"L\";\n            num -= 50;\n        }\n        else if (num >= 40) {\n            roman += \"XL\";\n            num -= 40;\n        }\n        else if (num >= 10) {\n            roman += \"X\";\n            num -= 10;\n        }\n        else if (num >= 9) {\n            roman += \"IX\";\n            num -= 9;\n        }\n        else if (num >= 5) {\n            roman += \"V\";\n            num -= 5;\n        }\n        else if (num >= 4) {\n            roman += \"IV\";\n            num -= 4;\n        }\n        else {\n            roman += \"I\";\n            num -= 1;\n        }\n    }\n    return roman;"}
{"task_id": "HumanEval/157", "completion": "\n    assert(a + b > c);\n    assert(b + c > a);\n    assert(a + c > b);\n    return a * a + b * b == c * c;"}
{"task_id": "HumanEval/158", "completion": "\n    std::sort(words.begin(), words.end());\n    std::string ans = words[words.size() - 1];\n    for (auto word : words) {\n        if (word!= ans) {\n            if (count_unique_chars(word) > count_unique_chars(ans)) {\n                ans = word;\n            }\n        }\n    }\n    return ans;"}
{"task_id": "HumanEval/159", "completion": "\n    long result = 0;\n    long left = remaining;\n    long right = need;\n    while (left <= right) {\n        long mid = (left + right) / 2;\n        if (mid > number) {\n            right = mid - 1;\n        } else if (mid < number) {\n            left = mid + 1;\n        } else {\n            result = mid;\n            break;\n        }\n    }\n    if (result == 0) {\n        result = left;\n    }\n    return std::vector<long>(2, {result, left});"}
{"task_id": "HumanEval/160", "completion": "\n    long result = 0;\n    for (int i = 0; i < operand.size(); i++) {\n        if (op[i] == '+') {\n            result += operand[i];\n        }\n        else if (op[i] == '-') {\n            result -= operand[i];\n        }\n        else if (op[i] == '*') {\n            result *= operand[i];\n        }\n        else if (op[i] == '//') {\n            result /= operand[i];\n        }\n        else if (op[i] == '**') {\n            result = pow(result, operand[i]);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/161", "completion": "\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i].isalpha()) {\n            if(s[i].isupper()) {\n                res += s[i].lower();\n            } else {\n                res += s[i].upper();\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/162", "completion": "\n    if (text.empty()) {\n        return std::optional<std::string>();\n    }\n    std::string hash;\n    hash = hashlib::md5(text.c_str());\n    return std::optional<std::string>(hash.c_str());"}
{"task_id": "HumanEval/163", "completion": "\n    std::vector<long> ans;\n    while (a <= b) {\n        if (a % 2 == 0) {\n            ans.push_back(a);\n        }\n        a++;\n    }\n    return ans;"}
