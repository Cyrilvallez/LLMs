{"task_id": "HumanEval/0", "completion": "\n    for (auto i = 0; i < numbers.size(); ++i) {\n        for (auto j = i + 1; j < numbers.size(); ++j) {\n            if (fabs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/1", "completion": "\n    std::vector<std::string> groups;\n    int open_braces = 0;\n    int start = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            open_braces++;\n        } else if (paren_string[i] == ')') {\n            open_braces--;\n            if (open_braces == 0) {\n                groups.push_back(paren_string.substr(start, i - start + 1));\n                start = i + 1;\n            }\n        }\n    }\n    return groups;"}
{"task_id": "HumanEval/2", "completion": "\n    int int_part = floor(number);\n    float dec_part = number - int_part;\n    return dec_part;"}
{"task_id": "HumanEval/3", "completion": "\n    long balance = 0;\n    for (long op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/4", "completion": "\n    // Calculate the mean of the numbers\n    float mean = 0.0f;\n    for (auto number : numbers) {\n        mean += number;\n    }\n    mean /= (float)numbers.size();\n    // Calculate the absolute difference between each number and the mean\n    float sum = 0.0f;\n    for (auto number : numbers) {\n        sum += abs(number - mean);\n    }\n    // Return the average absolute difference\n    return sum / (float)numbers.size();"}
{"task_id": "HumanEval/5", "completion": "\n    std::vector<long> result;\n    for (auto i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        if (i != numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/6", "completion": "\n    std::vector<long> res;\n    std::stack<long> stack;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            stack.push(1);\n        } else if (c == ')') {\n            assert(stack.top() == 1);\n            stack.pop();\n            res.push_back(stack.top());\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/7", "completion": "\n    std::vector<std::string> filtered_strings;\n    for (auto string : strings) {\n        if (string.find(substring) != std::string::npos) {\n            filtered_strings.push_back(string);\n        }\n    }\n    return filtered_strings;"}
{"task_id": "HumanEval/8", "completion": "\n    long sum = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n        product *= i;\n    }\n    return std::make_tuple(sum, product);"}
{"task_id": "HumanEval/9", "completion": "\n    std::vector<long> result(numbers.size());\n    result[0] = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        result[i] = numbers[i] > result[i - 1] ? numbers[i] : result[i - 1];\n    }\n    return result;"}
{"task_id": "HumanEval/10", "completion": "\n    std::string suffix = reverse_string(string);\n    std::string prefix = string;\n    std::string palindrome = suffix;\n    for (int i = 0; i < string.size(); ++i) {\n        if (string[i] == suffix[i]) {\n            continue;\n        }\n        prefix = prefix.substr(0, i);\n        suffix = suffix.substr(i);\n        palindrome = prefix + suffix + reverse_string(suffix);\n        break;\n    }\n    return palindrome;"}
{"task_id": "HumanEval/11", "completion": "\n    assert(a.size() == b.size());\n    std::string result;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == '1' && b[i] == '1') {\n            result += '0';\n        } else if (a[i] == '0' && b[i] == '0') {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/12", "completion": "\n    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::optional<std::string> longest_string = std::nullopt;\n    for (auto& string : strings) {\n        if (longest_string.empty() || string.size() > longest_string.size()) {\n            longest_string = string;\n        }\n    }\n    return longest_string;"}
{"task_id": "HumanEval/13", "completion": "\n    long c, d;\n    if (a < b) {\n        c = a;\n        a = b;\n        b = c;\n    }\n    while (b != 0) {\n        c = a % b;\n        a = b;\n        b = c;\n    }\n    return a;"}
{"task_id": "HumanEval/14", "completion": "\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length(); ++i) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return prefixes;"}
{"task_id": "HumanEval/15", "completion": "\n    std::string s = \"\";\n    for (long i = 0; i < n; i++) {\n        s += std::to_string(i);\n        if (i < n - 1)\n            s += \" \";\n    }\n    return s;"}
{"task_id": "HumanEval/16", "completion": "\n    std::unordered_map<char, int> map;\n    for (auto c : string) {\n        map[c]++;\n    }\n    return map.size();"}
{"task_id": "HumanEval/17", "completion": "\n    std::vector<long> res;\n    for (auto i = 0; i < music_string.size(); i++) {\n        if (music_string[i] == 'o') {\n            res.push_back(4);\n        }\n        else if (music_string[i] == 'o' && music_string[i + 1] == '|') {\n            res.push_back(2);\n        }\n        else if (music_string[i] == '.' && music_string[i + 1] == '|') {\n            res.push_back(1);\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/18", "completion": "\n    int n = string.length();\n    int m = substring.length();\n    int i = 0, j = 0;\n    int count = 0;\n    while (i < n) {\n        if (string[i] == substring[j]) {\n            j++;\n            if (j == m) {\n                count++;\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return count;"}
{"task_id": "HumanEval/19", "completion": "\n    std::vector<std::string> numbers_vector;\n    std::string::size_type i;\n    for (i = 0; i < numbers.size(); i++) {\n        if (numbers[i] == ' ') {\n            numbers_vector.push_back(numbers.substr(i + 1, numbers.size() - i - 1));\n            i = numbers.size();\n        }\n    }\n    std::sort(numbers_vector.begin(), numbers_vector.end());\n    std::string result = \"\";\n    for (i = 0; i < numbers_vector.size(); i++) {\n        result += numbers_vector[i] + \" \";\n    }\n    return result;"}
{"task_id": "HumanEval/20", "completion": "\n    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[1], numbers[2]);"}
{"task_id": "HumanEval/21", "completion": "\n    assert(numbers.size() >= 2);\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float> result;\n    for (auto num : numbers) {\n        result.push_back((num - min_val) / (max_val - min_val));\n    }\n    return result;"}
{"task_id": "HumanEval/22", "completion": "\n    std::vector<long> result;\n    for (auto value : values) {\n        if (std::is_integral_type<std::any>(value)) {\n            result.push_back(static_cast<long>(value));\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/23", "completion": "\n    return string.length();"}
{"task_id": "HumanEval/24", "completion": "\n    long largest = 1;\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            largest = i;\n        }\n    }\n    return largest;"}
{"task_id": "HumanEval/25", "completion": "\n    std::vector<long> factors;\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) factors.push_back(n);\n    return factors;"}
{"task_id": "HumanEval/26", "completion": "\n    std::vector<long> result;\n    std::set<long> seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n            seen.insert(n);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/27", "completion": "\n    std::string result = \"\";\n    for (auto c : string) {\n        if (c >= 'a' && c <= 'z') {\n            result += c.upper();\n        } else {\n            result += c.lower();\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/28", "completion": "\n    std::string result = \"\";\n    for (auto s : strings) {\n        result += s;\n    }\n    return result;"}
{"task_id": "HumanEval/29", "completion": "\n    std::vector<std::string> filtered_strings;\n    for (auto string : strings) {\n        if (string.substr(0, prefix.size()) == prefix) {\n            filtered_strings.push_back(string);\n        }\n    }\n    return filtered_strings;"}
{"task_id": "HumanEval/30", "completion": "\n    std::vector<long> res;\n    for (auto i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/31", "completion": "\n    if (n == 1)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    for (long i = 3; i * i <= n; i += 2) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;"}
{"task_id": "HumanEval/33", "completion": "\n    std::vector<long> l_prime;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] % 3 != 0) {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_prime.begin(), l_prime.end());\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] % 3 == 0) {\n            l_prime.push_back(l[i]);\n        }\n    }\n    return l_prime;"}
{"task_id": "HumanEval/34", "completion": "\n    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    std::unique_ptr<long> p = new long;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        if (*p != *it) {\n            res.push_back(*it);\n            *p = *it;\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/35", "completion": "\n    assert(l.size() > 0);\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n            max = l[i];\n    }\n    return max;"}
{"task_id": "HumanEval/36", "completion": "\n    long ans = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0)\n            ans++;\n    }\n    return ans;"}
{"task_id": "HumanEval/37", "completion": "\n    std::vector<long> l_prime;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            l_prime.push_back(l[i]);\n        } else {\n            std::sort(l_prime.begin(), l_prime.end());\n            l_prime.push_back(l[i]);\n        }\n    }\n    return l_prime;"}
{"task_id": "HumanEval/39", "completion": "\n    long a = 1, b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long A = 1;\n    long B = 1;\n    long C = 1;\n    long D = 1;\n    long E = 1;\n    long F = 1;\n    long G = 1;\n    long H = 1;\n    long I = 1;\n    long J = 1;\n    long K = 1;\n    long L = 1;\n    long M = 1;\n    long N = 1;\n    long O = 1;\n    long P = 1;\n    long Q = 1;\n    long R = 1;\n    long S = 1;\n    long T = 1;\n    long U = 1;\n    long V = 1;\n    long W = 1;\n    long X = 1;\n    long Y = 1;\n    long Z = 1;\n    long aa = 1;\n    long bb = 1;\n    long cc = 1;\n    long dd = 1;\n    long ee = 1;\n    long ff = 1;\n    long gg = 1;\n    long hh = 1;\n    long ii = 1;\n    long jj = 1;\n    long kk = 1;\n    long ll = 1;\n    long mm = 1;\n    long nn = 1;\n    long oo = 1;\n    long pp = 1;\n    long qq = 1;\n    long rr = 1;\n    long ss = 1;\n    long tt = 1"}
{"task_id": "HumanEval/40", "completion": "\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 2; ++i) {\n        if (l[i] == 0) {\n            return true;\n        }\n        if (l[i] > 0) {\n            break;\n        }\n        if (l[i] + l[i + 1] + l[i + 2] == 0) {\n            return true;\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/41", "completion": "\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        ans += (n - i);\n    }\n    return ans;"}
{"task_id": "HumanEval/42", "completion": "\n    std::vector<long> res;\n    for (auto i : l) {\n        res.push_back(i + 1);\n    }\n    return res;"}
{"task_id": "HumanEval/43", "completion": "\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size() - 1; i++) {\n        if (l[i] == 0) {\n            return true;\n        }\n        if (l[i] > 0) {\n            break;\n        }\n        if (l[i] + l[i + 1] == 0) {\n            return true;\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/44", "completion": "\n    std::string res = \"\";\n    while (x > 0) {\n        res = to_char(x % base) + res;\n        x /= base;\n    }\n    return res;"}
{"task_id": "HumanEval/45", "completion": "\n    return (a * h) / 2;"}
{"task_id": "HumanEval/46", "completion": "\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (long i = 4; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;"}
{"task_id": "HumanEval/47", "completion": "\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (float)(l[n / 2] + l[n / 2 - 1]) / 2;\n    } else {\n        return (float)l[n / 2];\n    }"}
{"task_id": "HumanEval/48", "completion": "\n    int left = 0;\n    int right = text.size() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;"}
{"task_id": "HumanEval/49", "completion": "\n    return n % p;"}
{"task_id": "HumanEval/51", "completion": "\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (auto c : text) {\n        if (vowels.find(c) == vowels.end()) {\n            result += c;\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/52", "completion": "\n    for (auto i : l) {\n        if (i > t) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/53", "completion": "\n    // Write your code here\n    return x + y;"}
{"task_id": "HumanEval/54", "completion": "\n    int n = s0.length();\n    int m = s1.length();\n    if (n != m) return false;\n    for (int i = 0; i < n; i++) {\n        if (s0[i] != s1[i]) return false;\n    }\n    return true;"}
{"task_id": "HumanEval/55", "completion": "\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    return fib(n - 1) + fib(n - 2);"}
{"task_id": "HumanEval/56", "completion": "\n    std::stack<char> s;\n    for (auto c : brackets) {\n        if (c == '<') {\n            s.push(c);\n        } else if (c == '>') {\n            if (s.empty()) {\n                return false;\n            } else {\n                s.pop();\n            }\n        }\n    }\n    return s.empty();"}
{"task_id": "HumanEval/57", "completion": "\n    int n = l.size();\n    if (n < 2)\n        return true;\n    int i = 0;\n    int j = 1;\n    while (j < n) {\n        if (l[i] < l[j])\n            i++;\n        else if (l[i] > l[j])\n            return false;\n        j++;\n    }\n    return true;"}
{"task_id": "HumanEval/58", "completion": "\n    std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long>::iterator it1 = l1.begin();\n    std::vector<long>::iterator it2 = l2.begin();\n    while (it1 != l1.end() && it2 != l2.end()) {\n        if (it1->first == it2->first) {\n            res.push_back(it1->first);\n            it1++;\n            it2++;\n        } else if (it1->first < it2->first) {\n            it1++;\n        } else {\n            it2++;\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/59", "completion": "\n    assert(n > 1);\n    long i = 2;\n    while (n % i != 0) {\n        i++;\n    }\n    return i;"}
{"task_id": "HumanEval/60", "completion": "\n    long sum = 0;\n    for (long i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;"}
{"task_id": "HumanEval/61", "completion": "\n    std::stack<char> s;\n    for (auto c : brackets) {\n        if (c == '(') {\n            s.push(c);\n        } else if (c == ')') {\n            if (s.empty()) {\n                return false;\n            } else {\n                s.pop();\n            }\n        }\n    }\n    return s.empty();"}
{"task_id": "HumanEval/62", "completion": "\n    std::vector<long> ans;\n    long n = xs.size();\n    for (int i = 1; i < n; i++) {\n        ans.push_back(xs[i] * i);\n    }\n    return ans;"}
{"task_id": "HumanEval/63", "completion": "\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    long a = 0, b = 0, c = 1;\n    for (int i = 3; i <= n; i++) {\n        long d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;"}
{"task_id": "HumanEval/64", "completion": "\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/65", "completion": "\n    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        return std::reverse(s);\n    }\n    return s.substr(shift, s.size() - shift);"}
{"task_id": "HumanEval/66", "completion": "\n    long sum = 0;\n    for (auto i : s) {\n        if (i >= 'A' && i <= 'Z') {\n            sum += (i - 'A' + 1);\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/67", "completion": "\n    long apples = 0, oranges = 0;\n    long i = 0;\n    while (s[i] != ' ') {\n        if (s[i] == 'a')\n            apples++;\n        else if (s[i] == 'o')\n            oranges++;\n        i++;\n    }\n    i++;\n    while (s[i] != ' ') {\n        if (s[i] == 'a')\n            apples++;\n        else if (s[i] == 'o')\n            oranges++;\n        i++;\n    }\n    return (apples + oranges) % n;"}
{"task_id": "HumanEval/68", "completion": "\n    std::vector<long> res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min_even = arr[0];\n    long min_even_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            min_even_index = i;\n        }\n    }\n    res.push_back(min_even);\n    res.push_back(min_even_index);\n    return res;"}
{"task_id": "HumanEval/69", "completion": "\n    std::sort(lst.begin(), lst.end());\n    long max = -1;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max && lst[i] >= lst[i] && lst[i] >= 1) {\n            max = lst[i];\n        }\n    }\n    return max;"}
{"task_id": "HumanEval/70", "completion": "\n    std::vector<long> res;\n    if (lst.size() == 0) {\n        return res;\n    }\n    std::sort(lst.begin(), lst.end());\n    res.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        res.push_back(lst[lst.size() - i - 1]);\n    }\n    return res;"}
{"task_id": "HumanEval/71", "completion": "\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    else\n        return (a * b * c) / (2 * (a + b + c));"}
{"task_id": "HumanEval/72", "completion": "\n    // Write your code here\n    std::vector<long> v;\n    std::reverse(q.begin(), q.end());\n    for (long i = 0; i < q.size(); i++) {\n        v.push_back(q[i]);\n    }\n    std::reverse(v.begin(), v.end());\n    long sum = 0;\n    for (long i = 0; i < v.size(); i++) {\n        sum += v[i];\n    }\n    if (sum <= w) {\n        return true;\n    } else {\n        return false;\n    }"}
{"task_id": "HumanEval/73", "completion": "\n    // Write your code here\n    // 1. \u5148\u627e\u51fa\u6700\u5927\u503c\uff0c\u7136\u540e\u628a\u6700\u5927\u503c\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u628a\u524d\u9762\u7684\u6570\u5b57\u6392\u5e8f\uff0c\u7136\u540e\u628a\u6700\u5927\u503c\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u628a\u524d\u9762\u7684\u6570\u5b57\u6392\u5e8f\uff0c\u7136\u540e\u628a\u6700\u5927\u503c\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u628a\u524d\u9762\u7684\u6570\u5b57\u6392\u5e8f\uff0c\u7136\u540e\u628a\u6700\u5927\u503c\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u628a\u524d\u9762\u7684\u6570\u5b57\u6392\u5e8f\uff0c\u7136\u540e\u628a\u6700\u5927\u503c\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u628a\u524d\u9762\u7684\u6570\u5b57\u6392\u5e8f\uff0c\u7136\u540e\u628a\u6700\u5927\u503c\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u628a\u524d\u9762\u7684\u6570\u5b57\u6392\u5e8f\uff0c\u7136\u540e\u628a\u6700\u5927\u503c\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u628a\u524d\u9762\u7684\u6570\u5b57\u6392\u5e8f\uff0c\u7136\u540e\u628a\u6700\u5927\u503c\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u628a\u524d\u9762\u7684\u6570\u5b57\u6392\u5e8f\uff0c\u7136\u540e\u628a\u6700\u5927\u503c\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u628a\u524d\u9762\u7684\u6570\u5b57\u6392\u5e8f\uff0c\u7136\u540e\u628a\u6700\u5927\u503c\u653e\u5728\u6700\u540e\uff0c\u7136\u540e\u628a\u524d"}
{"task_id": "HumanEval/74", "completion": "\n    std::vector<std::string> res;\n    int len1 = lst1.size();\n    int len2 = lst2.size();\n    int i = 0;\n    int j = 0;\n    while (i < len1 && j < len2) {\n        if (lst1[i].size() < lst2[j].size()) {\n            res.push_back(lst1[i]);\n            i++;\n        } else if (lst1[i].size() > lst2[j].size()) {\n            res.push_back(lst2[j]);\n            j++;\n        } else {\n            res.push_back(lst1[i]);\n            i++;\n            j++;\n        }\n    }\n    while (i < len1) {\n        res.push_back(lst1[i]);\n        i++;\n    }\n    while (j < len2) {\n        res.push_back(lst2[j]);\n        j++;\n    }\n    return res;"}
{"task_id": "HumanEval/75", "completion": "\n    if (a < 100) {\n        return false;\n    }\n    // Check if a is divisible by 2\n    if (a % 2 == 0) {\n        return false;\n    }\n    // Check if a is divisible by 3\n    if (a % 3 == 0) {\n        return false;\n    }\n    // Check if a is divisible by 5\n    if (a % 5 == 0) {\n        return false;\n    }\n    // Check if a is divisible by 7\n    if (a % 7 == 0) {\n        return false;\n    }\n    // Check if a is divisible by 11\n    if (a % 11 == 0) {\n        return false;\n    }\n    // Check if a is divisible by 13\n    if (a % 13 == 0) {\n        return false;\n    }\n    // Check if a is divisible by 17\n    if (a % 17 == 0) {\n        return false;\n    }\n    // Check if a is divisible by 19\n    if (a % 19 == 0) {\n        return false;\n    }\n    // Check if a is divisible by 23\n    if (a % 23 == 0) {\n        return false;\n    }\n    // Check if a is divisible by 29\n    if (a % 29 == 0) {\n        return false;\n    }\n    // Check if a is divisible by 31\n    if (a % 31 == 0) {\n        return false;\n    }\n    // Check if a is divisible by 37\n    if (a % 37 == 0) {\n        return false;\n    }\n    // Check if a is divisible by 41\n    if (a % 41 == 0) {\n        return false;\n    }\n    // Check if a is divisible by 43\n    if (a % 43 == 0) {\n        return false;\n    }\n    // Check if a is divisible by 47\n    if (a % 47 == 0) {\n        return false;\n    }\n    // Check if a is divisible by 53\n    if (a % 53 == 0) {\n        return false;\n    }\n    // Check if a is divisible by 59\n    if ("}
{"task_id": "HumanEval/76", "completion": "\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x < n)\n        return false;\n    long i = 1;\n    long p = 1;\n    while (p <= x) {\n        p = p * n;\n        i++;\n    }\n    if (p == x)\n        return true;\n    return false;"}
{"task_id": "HumanEval/77", "completion": "\n    long b = (long)(sqrt(a));\n    return (b*b*b == a);"}
{"task_id": "HumanEval/78", "completion": "\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '0' || num[i] == '1' || num[i] == '2' || num[i] == '3' || num[i] == '4' || num[i] == '5' || num[i] == '6' || num[i] == '7' || num[i] == '8' || num[i] == '9' || num[i] == 'A' || num[i] == 'B' || num[i] == 'C' || num[i] == 'D' || num[i] == 'E' || num[i] == 'F') {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/79", "completion": "\n    std::string binary = \"db\";\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary += \"0\";\n        } else {\n            binary += \"1\";\n        }\n        decimal /= 2;\n    }\n    binary += \"db\";\n    return binary;"}
{"task_id": "HumanEval/80", "completion": "\n    int n = s.length();\n    if (n < 3)\n        return false;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2])\n            return false;\n    }\n    return true;"}
{"task_id": "HumanEval/81", "completion": "\n    std::vector<std::string> letter_grades;\n    for (auto grade : grades) {\n        if (grade == 4.0) letter_grades.push_back(\"A+\");\n        else if (grade > 3.7) letter_grades.push_back(\"A\");\n        else if (grade > 3.3) letter_grades.push_back(\"A-\");\n        else if (grade > 3.0) letter_grades.push_back(\"B+\");\n        else if (grade > 2.7) letter_grades.push_back(\"B\");\n        else if (grade > 2.3) letter_grades.push_back(\"B-\");\n        else if (grade > 2.0) letter_grades.push_back(\"C+\");\n        else if (grade > 1.7) letter_grades.push_back(\"C\");\n        else if (grade > 1.3) letter_grades.push_back(\"C-\");\n        else if (grade > 1.0) letter_grades.push_back(\"D+\");\n        else if (grade > 0.7) letter_grades.push_back(\"D\");\n        else if (grade > 0.0) letter_grades.push_back(\"D-\");\n        else letter_grades.push_back(\"E\");\n    }\n    return letter_grades;"}
{"task_id": "HumanEval/82", "completion": "\n    int len = string.length();\n    if (len == 1) {\n        return true;\n    }\n    if (len == 2) {\n        return true;\n    }\n    if (len == 3) {\n        return true;\n    }\n    if (len == 4) {\n        return true;\n    }\n    if (len == 5) {\n        return true;\n    }\n    if (len == 6) {\n        return true;\n    }\n    if (len == 7) {\n        return true;\n    }\n    if (len == 8) {\n        return true;\n    }\n    if (len == 9) {\n        return true;\n    }\n    if (len == 10) {\n        return true;\n    }\n    if (len == 11) {\n        return true;\n    }\n    if (len == 12) {\n        return true;\n    }\n    if (len == 13) {\n        return true;\n    }\n    if (len == 14) {\n        return true;\n    }\n    if (len == 15) {\n        return true;\n    }\n    if (len == 16) {\n        return true;\n    }\n    if (len == 17) {\n        return true;\n    }\n    if (len == 18) {\n        return true;\n    }\n    if (len == 19) {\n        return true;\n    }\n    if (len == 20) {\n        return true;\n    }\n    if (len == 21) {\n        return true;\n    }\n    if (len == 22) {\n        return true;\n    }\n    if (len == 23) {\n        return true;\n    }\n    if (len == 24) {\n        return true;\n    }\n    if (len == 25) {\n        return true;\n    }\n    if (len == 26) {\n        return true;\n    }\n    if (len == 27) {\n        return true;\n    }\n    if (len == 28) {\n        return true;\n    }\n    if (len == 29) {\n        return true;\n    }\n    if (len == 30) {\n"}
{"task_id": "HumanEval/83", "completion": "\n    long ans = 0;\n    for (long i = 1; i <= n; i++) {\n        long j = i;\n        long k = 1;\n        while (j > 0) {\n            k *= 10;\n            j /= 10;\n        }\n        ans += k;\n    }\n    return ans;"}
{"task_id": "HumanEval/84", "completion": "\n    std::string ans = \"\";\n    while (N > 0) {\n        ans = std::to_string(N % 2) + ans;\n        N /= 2;\n    }\n    return ans;"}
{"task_id": "HumanEval/85", "completion": "\n    long sum = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/86", "completion": "\n    std::string res = \"\";\n    std::string temp = \"\";\n    for (auto c : s) {\n        if (c == ' ') {\n            res += temp;\n            res += \" \";\n            temp = \"\";\n        } else {\n            temp += c;\n        }\n    }\n    res += temp;\n    return res;"}
{"task_id": "HumanEval/87", "completion": "\n    std::vector<std::tuple<long, long>> res;\n    for (auto& row : lst) {\n        auto& row_vec = row;\n        auto& row_vec_vec = row_vec;\n        for (auto& elem : row_vec_vec) {\n            if (elem == x) {\n                res.push_back(std::make_tuple(row_vec_vec.size() - 1, row.size() - 1));\n            }\n        }\n    }\n    res.sort(std::less<std::tuple<long, long>>(), [&](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return a.first > b.first;\n    });\n    res.sort(std::greater<std::tuple<long, long>>(), [&](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return a.second < b.second;\n    });\n    return res;"}
{"task_id": "HumanEval/88", "completion": "\n    // Write your code here\n    if (array.size() == 0) {\n        return array;\n    }\n    std::sort(array.begin(), array.end());\n    if (array.size() == 1) {\n        return array;\n    }\n    long sum = 0;\n    for (int i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::reverse(array.begin(), array.end());\n    }\n    return array;"}
{"task_id": "HumanEval/89", "completion": "\n    std::string ans = \"\";\n    for (auto c : s) {\n        if (c == ' ') {\n            ans += ' ';\n        } else {\n            int i = c - 'a';\n            int j = i + 2 * 2;\n            if (j >= 26) {\n                j -= 26;\n            }\n            ans += (char)(j + 'a');\n        }\n    }\n    return ans;"}
{"task_id": "HumanEval/90", "completion": "\n    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2)\n        return std::nullopt;\n    if (lst[0] == lst[1])\n        return std::nullopt;\n    return lst[1];"}
{"task_id": "HumanEval/91", "completion": "\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n"}
{"task_id": "HumanEval/92", "completion": "\n    return (x == y + z || x == z + y || y == x + z || y == z + x || z == x + y || z == y + x);"}
{"task_id": "HumanEval/93", "completion": "\n    std::string result = \"\";\n    for (auto c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            result += message[message.find(c) + 2];\n        } else {\n            result += c.upper();\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/94", "completion": "\n    long max = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long num = lst[i];\n        long prime = 0;\n        while (num > 1) {\n            long j = 2;\n            while (j * j <= num) {\n                if (num % j == 0) {\n                    num /= j;\n                    prime = j;\n                    break;\n                }\n                j++;\n            }\n        }\n        if (prime > max) {\n            max = prime;\n        }\n    }\n    long sum = 0;\n    for (long i = 0; i < max; i++) {\n        sum += i;\n    }\n    return sum;"}
{"task_id": "HumanEval/95", "completion": "\n    if (dict.size() == 0)\n        return false;\n    std::string lower = \"abcdefghijklmnopqrstuvwxyz\";\n    std::string upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    for (auto it = dict.begin(); it != dict.end(); ++it) {\n        if (it->first[0] == 'a' && it->first[1] == 'p' && it->first[2] == 'p' && it->first[3] == 'l' && it->first[4] == 'e')\n            return true;\n        if (it->first[0] == 'A' && it->first[1] == 'P' && it->first[2] == 'P' && it->first[3] == 'L' && it->first[4] == 'E')\n            return true;\n        if (it->first[0] == 'B' && it->first[1] == 'A' && it->first[2] == 'N' && it->first[3] == 'A' && it->first[4] == 'N' && it->first[5] == 'A')\n            return true;\n        if (it->first[0] == 'N' && it->first[1] == 'A' && it->first[2] == 'M' && it->first[3] == 'E' && it->first[4] == 'T' && it->first[5] == 'H')\n            return true;\n        if (it->first[0] == 'Z' && it->first[1] == 'I' && it->first[2] == 'P' && it->first[3] == ' ' && it->first[4] == ' ' && it->first[5] == ' ')\n            return true;\n        if (it->first[0] == 'S' && it->first[1] == 'T' && it->first[2] == 'A' && it->first[3] == 'T' && it->first[4] == 'E' && it->first[5] == ' ')\n            return true;\n        if (it->first["}
{"task_id": "HumanEval/96", "completion": "\n    std::vector<long> res;\n    if (n == 0) {\n        return res;\n    }\n    res.push_back(2);\n    long i = 3;\n    while (i <= n) {\n        bool is_prime = true;\n        for (long j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            res.push_back(i);\n        }\n        i++;\n    }\n    return res;"}
{"task_id": "HumanEval/97", "completion": "\n    long ans = 0;\n    while (a != 0) {\n        long d = a % 10;\n        a = a / 10;\n        while (b != 0) {\n            long e = b % 10;\n            b = b / 10;\n            ans = ans + d * e;\n        }\n    }\n    return ans;"}
{"task_id": "HumanEval/98", "completion": "\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            if (i % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/99", "completion": "\n  // Write your code here\n  long int num = atol(value.c_str());\n  long int num_int = (num + (num > 0)) / (num < 0) ? num / num : num;\n  long int num_int_plus = (num + (num > 0)) / (num < 0) ? num / num + 1 : num;\n  long int num_int_minus = (num + (num > 0)) / (num < 0) ? num / num - 1 : num;\n  long int num_int_plus_minus = (num + (num > 0)) / (num < 0) ? num / num + 1 - 1 : num;\n  long int num_int_minus_plus = (num + (num > 0)) / (num < 0) ? num / num - 1 + 1 : num;\n  long int num_int_plus_plus = (num + (num > 0)) / (num < 0) ? num / num + 1 + 1 : num;\n  long int num_int_minus_minus = (num + (num > 0)) / (num < 0) ? num / num - 1 - 1 : num;\n  long int num_int_plus_minus_plus = (num + (num > 0)) / (num < 0) ? num / num + 1 - 1 + 1 : num;\n  long int num_int_minus_plus_minus = (num + (num > 0)) / (num < 0) ? num / num - 1 + 1 - 1 : num;\n  long int num_int_plus_plus_minus = (num + (num > 0)) / (num < 0) ? num / num + 1 + 1 - 1 : num;\n  long int num_int_minus_minus_plus = (num + (num > 0)) / (num < 0) ? num / num - 1 - 1 + 1 : num;\n  long int num_int_plus_minus_minus = (num + (num > 0)) / (num < 0) ? num / num + 1 - 1 - 1 : num;\n  long int num_int_minus_plus_plus = (num + (num > 0)) / (num < 0) ? num / num - 1 + 1 + 1 : num;\n"}
{"task_id": "HumanEval/100", "completion": "\n    std::vector<long> res;\n    res.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n        }\n        res.push_back(n);\n    }\n    return res;"}
{"task_id": "HumanEval/101", "completion": "\n    std::vector<std::string> res;\n    std::string temp = \"\";\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ',' || s[i] == ' ') {\n            res.push_back(temp);\n            temp = \"\";\n        } else {\n            temp += s[i];\n        }\n    }\n    res.push_back(temp);\n    return res;"}
{"task_id": "HumanEval/102", "completion": "\n    // Write your code here\n    if (x > y) {\n        return -1;\n    }\n    long ans = -1;\n    for (long i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            ans = i;\n        }\n    }\n    return ans;"}
{"task_id": "HumanEval/103", "completion": "\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n + 1);\n    return avg;"}
{"task_id": "HumanEval/104", "completion": "\n    std::vector<long> res;\n    for (auto i : x) {\n        long d = i;\n        while (d > 0) {\n            d = d / 10;\n        }\n        res.push_back(i);\n    }\n    res.sort();\n    return res;"}
{"task_id": "HumanEval/105", "completion": "\n    std::vector<std::string> res;\n    for (auto it : arr) {\n        if (it < 1 || it > 9) continue;\n        res.push_back(std::to_string(it));\n    }\n    res.reverse();\n    res.push_back(\"\");\n    res.push_back(\"\");\n    res.push_back(\"\");\n    res.push_back(\"\");\n    res.push_back(\"\");\n    res.push_back(\"\");\n    res.push_back(\"\");\n    res.push_back(\"\");\n    res.push_back(\"\");\n    return res;"}
{"task_id": "HumanEval/106", "completion": "\n    std::vector<long> res;\n    for (long i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        } else {\n            long sum = 0;\n            for (long j = 1; j <= i; j++) {\n                sum += j;\n            }\n            res.push_back(sum);\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/107", "completion": "\n    long even = 0, odd = 0;\n    for (long i = 1; i <= n; i++) {\n        long s = i;\n        long e = 0;\n        while (s > 0) {\n            e = e * 10 + s % 10;\n            s /= 10;\n        }\n        if (e == i) {\n            even++;\n        }\n        if (e == i && e % 2 == 0) {\n            even++;\n        }\n        if (e == i && e % 2 == 1) {\n            odd++;\n        }\n    }\n    return std::make_tuple(even, odd);"}
{"task_id": "HumanEval/108", "completion": "\n    long n = arr.size();\n    long ans = 0;\n    for (long i = 0; i < n; ++i) {\n        long sum = 0;\n        long num = arr[i];\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        if (sum > 0) {\n            ans += 1;\n        }\n    }\n    return ans;"}
{"task_id": "HumanEval/109", "completion": "\n    // Your code here\n    // return true if the array is sorted in non-decreasing order\n    // return false if the array is not sorted in non-decreasing order\n    // return true if the array is empty\n    if (arr.size() == 0)\n        return true;\n    long* arr_ptr = &arr[0];\n    long* arr_ptr_end = arr_ptr + arr.size();\n    long* arr_ptr_end_prev = arr_ptr_end - 1;\n    long* arr_ptr_end_prev_prev = arr_ptr_end_prev - 1;\n    long* arr_ptr_end_prev_prev_prev = arr_ptr_end_prev_prev - 1;\n    long* arr_ptr_end_prev_prev_prev_prev = arr_ptr_end_prev_prev_prev - 1;\n    long* arr_ptr_end_prev_prev_prev_prev_prev = arr_ptr_end_prev_prev_prev_prev - 1;\n    long* arr_ptr_end_prev_prev_prev_prev_prev_prev = arr_ptr_end_prev_prev_prev_prev_prev - 1;\n    long* arr_ptr_end_prev_prev_prev_prev_prev_prev_prev = arr_ptr_end_prev_prev_prev_prev_prev_prev - 1;\n    long* arr_ptr_end_prev_prev_prev_prev_prev_prev_prev_prev = arr_ptr_end_prev_prev_prev_prev_prev_prev_prev - 1;\n    long* arr_ptr_end_prev_prev_prev_prev_prev_prev_prev_prev_prev = arr_ptr_end_prev_prev_prev_prev_prev_prev_prev_prev - 1;\n    long* arr_ptr_end_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = arr_ptr_end_prev_prev_prev_prev_prev_prev_prev_prev_prev - 1;\n    long* arr_ptr_end_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = arr_"}
{"task_id": "HumanEval/110", "completion": "\n    // Write your code here\n    std::sort(lst1.begin(), lst1.end());\n    std::sort(lst2.begin(), lst2.end());\n    std::vector<long> lst3(lst1.size());\n    std::vector<long> lst4(lst2.size());\n    for(int i=0; i<lst1.size(); i++)\n        lst3[i] = lst1[i];\n    for(int i=0; i<lst2.size(); i++)\n        lst4[i] = lst2[i];\n    std::sort(lst3.begin(), lst3.end());\n    std::sort(lst4.begin(), lst4.end());\n    std::vector<long> lst5(lst3.size());\n    std::vector<long> lst6(lst4.size());\n    for(int i=0; i<lst3.size(); i++)\n        lst5[i] = lst3[i];\n    for(int i=0; i<lst4.size(); i++)\n        lst6[i] = lst4[i];\n    std::sort(lst5.begin(), lst5.end());\n    std::sort(lst6.begin(), lst6.end());\n    std::vector<long> lst7(lst5.size());\n    std::vector<long> lst8(lst6.size());\n    for(int i=0; i<lst5.size(); i++)\n        lst7[i] = lst5[i];\n    for(int i=0; i<lst6.size(); i++)\n        lst8[i] = lst6[i];\n    std::sort(lst7.begin(), lst7.end());\n    std::sort(lst8.begin(), lst8.end());\n    std::vector<long> lst9(lst7.size());\n    std::vector<long> lst10(lst8.size());\n    for(int i=0; i<lst"}
{"task_id": "HumanEval/111", "completion": "\n    std::map<std::string,long> result;\n    std::string letters = test;\n    std::string temp = \"\";\n    for (int i = 0; i < letters.size(); i++) {\n        if (letters[i] != ' ') {\n            temp += letters[i];\n        } else {\n            result[temp] = result[temp] + 1;\n            temp = \"\";\n        }\n    }\n    if (temp != \"\") {\n        result[temp] = result[temp] + 1;\n    }\n    return result;"}
{"task_id": "HumanEval/112", "completion": "\n    std::string res = \"\";\n    for (auto i : s) {\n        if (i != c) {\n            res += i;\n        }\n    }\n    return std::make_tuple(res, res.size() == res.size() && res == res.reverse());"}
{"task_id": "HumanEval/113", "completion": "\n    std::vector<std::string> res;\n    for (auto s : lst) {\n        int cnt = 0;\n        for (auto c : s) {\n            if (c != '0' && c != '2' && c != '4' && c != '6' && c != '8') {\n                ++cnt;\n            }\n        }\n        res.push_back(std::string(std::to_string(cnt) + \"n the str\" + std::to_string(cnt) + \" of the str\" + std::to_string(cnt) + \" of the \" + std::to_string(cnt) + \"nput.\"));\n    }\n    return res;"}
{"task_id": "HumanEval/114", "completion": "\n    // Write your code here\n    long sum = 0;\n    long min_sum = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min_sum)\n            min_sum = sum;\n        if (sum == 0)\n            sum = 0;\n    }\n    return min_sum;"}
{"task_id": "HumanEval/115", "completion": "\n  // Write your code here\n  std::vector<std::vector<long>> grid_copy(grid);\n  std::vector<std::vector<long>> grid_copy_reverse(grid);\n  std::vector<std::vector<long>> grid_copy_reverse_transpose(grid);\n  std::vector<std::vector<long>> grid_copy_transpose(grid);\n  std::vector<std::vector<long>> grid_copy_reverse_transpose_copy(grid_copy_reverse_transpose);\n  std::vector<std::vector<long>> grid_copy_transpose_copy(grid_copy_transpose);\n  std::vector<std::vector<long>> grid_copy_reverse_transpose_copy_copy(grid_copy_reverse_transpose_copy);\n  std::vector<std::vector<long>> grid_copy_transpose_copy_copy(grid_copy_transpose_copy);\n  std::vector<std::vector<long>> grid_copy_reverse_transpose_copy_copy_copy(grid_copy_reverse_transpose_copy_copy);\n  std::vector<std::vector<long>> grid_copy_transpose_copy_copy_copy(grid_copy_transpose_copy_copy);\n  std::vector<std::vector<long>> grid_copy_reverse_transpose_copy_copy_copy_copy(grid_copy_reverse_transpose_copy_copy_copy);\n  std::vector<std::vector<long>> grid_copy_transpose_copy_copy_copy_copy(grid_copy_transpose_copy_copy_copy);\n  std::vector<std::vector<long>> grid_copy_reverse_transpose_copy_copy_copy_copy_copy(grid_copy_reverse_transpose_copy_copy_copy_copy);\n  std::vector<std::vector<long>> grid_copy_transpose_copy_copy_copy_copy_copy(grid_copy_transpose_copy_copy_copy_copy);\n  std::vector<std::vector<long>> grid_copy_reverse_transpose_copy_copy_copy_copy_copy_copy(grid_copy_reverse_transpose_copy"}
{"task_id": "HumanEval/116", "completion": "\n    std::sort(arr.begin(), arr.end(), [](long a, long b) {\n        int a_ones = 0;\n        int b_ones = 0;\n        while (a) {\n            a_ones += a % 2;\n            a /= 2;\n        }\n        while (b) {\n            b_ones += b % 2;\n            b /= 2;\n        }\n        return a_ones < b_ones;\n    });\n    return arr;"}
{"task_id": "HumanEval/117", "completion": "\n    std::vector<std::string> res;\n    std::string::size_type i = 0;\n    std::string::size_type j = 0;\n    std::string::size_type k = 0;\n    std::string::size_type l = 0;\n    std::string::size_type m = 0;\n    std::string::size_type n = 0;\n    std::string::size_type o = 0;\n    std::string::size_type p = 0;\n    std::string::size_type q = 0;\n    std::string::size_type r = 0;\n    std::string::size_type s = 0;\n    std::string::size_type t = 0;\n    std::string::size_type u = 0;\n    std::string::size_type v = 0;\n    std::string::size_type w = 0;\n    std::string::size_type x = 0;\n    std::string::size_type y = 0;\n    std::string::size_type z = 0;\n    std::string::size_type a = 0;\n    std::string::size_type b = 0;\n    std::string::size_type c = 0;\n    std::string::size_type d = 0;\n    std::string::size_type e = 0;\n    std::string::size_type f = 0;\n    std::string::size_type g = 0;\n    std::string::size_type h = 0;\n    std::string::size_type i = 0;\n    std::string::size_type j = 0;\n    std::string::size_type k = 0;\n    std::string::size_type l = 0;\n    std::string::size_type m = 0;\n    std::string::size_type n = 0;\n    std::string::size_type o = 0;\n    std::string::size_type p = 0;\n    std::string::size_type q = 0;\n    std::string::size_type r = 0;\n    std::string::size_type s = 0;\n    std::string::size_type t = 0;\n    std::string::"}
{"task_id": "HumanEval/118", "completion": "\n    std::string vowels = \"aeiou\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyz\";\n    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n    int word_length = word.length();\n    int i = word_length - 1;\n    while (i >= 0) {\n        if (word[i] == ' ') {\n            i--;\n            continue;\n        }\n        if (word[i] == '.' || word[i] == ',' || word[i] == '?' || word[i] == '!' || word[i] == ';' || word[i] == ':') {\n            i--;\n            continue;\n        }\n        if (word[i] == '\\'' || word[i] == '\\\"') {\n            i--;\n            continue;\n        }\n        if (word[i] == '-' || word[i] == '_') {\n            i--;\n            continue;\n        }\n        if (word[i] == '(' || word[i] == ')' || word[i] == '[' || word[i] == ']' || word[i] == '{' || word[i] == '}') {\n            i--;\n            continue;\n        }\n        if (word[i] == '<' || word[i] == '>') {\n            i--;\n            continue;\n        }\n        if (word[i] == '\\\\') {\n            i--;\n            continue;\n        }\n        if (word[i] == '|') {\n            i--;\n            continue;\n        }\n        if (word[i] == '&') {\n            i--;\n            continue;\n        }\n        if (word[i] == '*') {\n            i--;\n            continue;\n        }\n        if (word[i] == '+') {\n            i--;\n            continue;\n        }\n        if (word[i] == '=') {\n            i--;\n            continue;\n        }\n        if (word[i] =="}
{"task_id": "HumanEval/119", "completion": "\n    std::string s = lst[0];\n    std::string t = lst[1];\n    std::string res = \"\";\n    int i = 0;\n    int j = 0;\n    int n = s.size();\n    int m = t.size();\n    while (i < n && j < m) {\n        if (s[i] == '(' && t[j] == ')') {\n            res += s[i];\n            res += t[j];\n            i++;\n            j++;\n        } else if (s[i] == '(' && t[j] != ')') {\n            res += s[i];\n            i++;\n        } else if (s[i] != '(' && t[j] == ')') {\n            res += t[j];\n            j++;\n        } else {\n            return \"No\";\n        }\n    }\n    while (i < n) {\n        res += s[i];\n        i++;\n    }\n    while (j < m) {\n        res += t[j];\n        j++;\n    }\n    return res;"}
{"task_id": "HumanEval/120", "completion": "\n    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    std::vector<long> res(k);\n    for (int i = 0; i < k; ++i) {\n        res[i] = arr[i];\n    }\n    return res;"}
{"task_id": "HumanEval/121", "completion": "\n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/122", "completion": "\n    // Write your code here\n    std::sort(arr.begin(), arr.end());\n    long sum = 0;\n    for (long i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    return sum;"}
{"task_id": "HumanEval/123", "completion": "\n    std::vector<long> res;\n    while (n != 1) {\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        res.push_back(n);\n    }\n    return res;"}
{"task_id": "HumanEval/124", "completion": "\n    std::string month = date.substr(0,2);\n    std::string day = date.substr(3,2);\n    std::string year = date.substr(6,4);\n    int month_int = atoi(month);\n    int day_int = atoi(day);\n    int year_int = atoi(year);\n    if(month_int < 1 || month_int > 12)\n        return false;\n    if(day_int < 1 || day_int > 31)\n        return false;\n    if(month_int == 2 && day_int > 29)\n        return false;\n    if(month_int == 4 || month_int == 6 || month_int == 9 || month_int == 11)\n        if(day_int < 1 || day_int > 30)\n            return false;\n    if(month_int == 1 || month_int == 3 || month_int == 5 || month_int == 7 || month_int == 8 || month_int == 10 || month_int == 12)\n        if(day_int < 1 || day_int > 31)\n            return false;\n    if(year_int < 0 || year_int > 9999)\n        return false;\n    return true;"}
{"task_id": "HumanEval/125", "completion": "\n    std::vector<std::string> res;\n    std::string tmp;\n    for (auto c : txt) {\n        if (c == ' ') {\n            res.push_back(tmp);\n            tmp = \"\";\n        } else {\n            tmp += c;\n        }\n    }\n    res.push_back(tmp);\n    return res;"}
{"task_id": "HumanEval/126", "completion": "\n    // Write your code here\n    if (lst.size() == 0)\n        return true;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1])\n            return false;\n    }\n    return true;"}
{"task_id": "HumanEval/127", "completion": "\n    long start1 = interval1.first;\n    long end1 = interval1.second;\n    long start2 = interval2.first;\n    long end2 = interval2.second;\n    long length = end1 - start1;\n    if (start2 > end1 || start1 > end2)\n        return \"NO\";\n    if (start1 == start2 && end1 == end2)\n        return \"YES\";\n    if (start1 == start2)\n        return \"YES\";\n    if (end1 == end2)\n        return \"YES\";\n    if (start1 < start2)\n        start1 = start2;\n    if (end1 > end2)\n        end1 = end2;\n    if (start1 == end1)\n        return \"YES\";\n    if (start1 == end2)\n        return \"YES\";\n    if (start2 == end1)\n        return \"YES\";\n    if (start2 == end2)\n        return \"YES\";\n    if (start1 < start2)\n        start1 = start2;\n    if (end1 > end2)\n        end1 = end2;\n    if (start1 == end1)\n        return \"YES\";\n    if (start1 == end2)\n        return \"YES\";\n    if (start2 == end1)\n        return \"YES\";\n    if (start2 == end2)\n        return \"YES\";\n    if (start1 < start2)\n        start1 = start2;\n    if (end1 > end2)\n        end1 = end2;\n    if (start1 == end1)\n        return \"YES\";\n    if (start1 == end2)\n        return \"YES\";\n    if (start2 == end1)\n        return \"YES\";\n    if (start2 == end2)\n        return \"YES\";\n    if (start1 < start2)\n        start1 = start2;\n    if (end1 > end2)\n        end1 = end2;\n    if (start1 == end1)\n        return \"YES\";\n    if (start1 == end2)\n        return \"YES\";\n    if (start2 == end1)\n        return"}
{"task_id": "HumanEval/128", "completion": "\n    if (arr.empty()) {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sign = 1;\n    for (auto i : arr) {\n        if (i == 0) {\n            sign = 0;\n        } else if (i < 0) {\n            sign = -1;\n        }\n        prod *= sign;\n    }\n    return prod;"}
{"task_id": "HumanEval/129", "completion": "\n    // Write your code here\n    std::vector<std::vector<long>> dp(grid.size(), grid.size());\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            dp[i][j] = grid[i][j];\n        }\n    }\n    for (int i = 1; i <= k; ++i) {\n        for (int j = 0; j < grid.size(); ++j) {\n            for (int l = 0; l < grid.size(); ++l) {\n                if (j == l) {\n                    continue;\n                }\n                dp[j][l] = std::min(dp[j][l], dp[j][l - 1] + dp[j - 1][l]);\n            }\n        }\n    }\n    std::vector<long> ans;\n    for (int i = 0; i < grid.size(); ++i) {\n        ans.push_back(dp[i][i]);\n    }\n    return ans;"}
{"task_id": "HumanEval/130", "completion": "\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n    res.push_back(2);\n    res.push_back(8);\n    for (long i = 4; i <= n; ++i) {\n        long tmp = res[i - 1] + res[i - 2] + res[i - 3];\n        res.push_back(tmp);\n    }\n    return res;"}
{"task_id": "HumanEval/131", "completion": "\n    long ans = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            ans *= n % 10;\n        }\n        n /= 10;\n    }\n    return ans;"}
{"task_id": "HumanEval/132", "completion": "\n    std::stack<char> stack;\n    for (auto c : string) {\n        if (c == '[') {\n            stack.push(c);\n        } else if (c == ']') {\n            if (stack.empty()) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.empty();"}
{"task_id": "HumanEval/133", "completion": "\n    long sum = 0;\n    for (auto i : lst) {\n        sum += i * i;\n    }\n    return sum;"}
{"task_id": "HumanEval/134", "completion": "\n    if (txt.size() == 0) {\n        return false;\n    }\n    return txt[txt.size() - 1].isalpha();"}
{"task_id": "HumanEval/135", "completion": "\n    long n = arr.size();\n    long max_index = -1;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] >= arr[i - 1]) {\n            max_index = i;\n        }\n    }\n    return max_index;"}
{"task_id": "HumanEval/136", "completion": "\n    std::optional<long> a = std::nullopt;\n    std::optional<long> b = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n            if (a.empty() || a.value() < i)\n                a = i;\n        } else if (b.empty() || b.value() > i)\n            b = i;\n    }\n    return std::make_tuple(a, b);"}
{"task_id": "HumanEval/137", "completion": "\n    if (a == b) {\n        return std::nullopt;\n    }    if (a.f0 > b.f0) {\n        return a;\n    }    if (a.f0 < b.f0) {\n        return b;\n    }    if (a.f1 > b.f1) {\n        return a;\n    }    if (a.f1 < b.f1) {\n        return b;\n    }    if (a.f2 > b.f2) {\n        return a;\n    }    if (a.f2 < b.f2) {\n        return b;\n    }    if (a.f3 > b.f3) {\n        return a;\n    }    if (a.f3 < b.f3) {\n        return b;\n    }    return std::nullopt;"}
{"task_id": "HumanEval/138", "completion": "\n    if (n % 2 != 0)\n        return false;\n    return (n == 4 || n == 6 || n == 8);"}
{"task_id": "HumanEval/139", "completion": "\n    if (n == 0) {\n        return 1;\n    }\n    long result = 1;\n    for (long i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;"}
{"task_id": "HumanEval/140", "completion": "\n    std::string result = text;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result.replace(i, 1, \"_\");\n        }\n    }\n    int i = 0;\n    while (i < result.size()) {\n        if (result[i] == ' ' && result[i + 1] == ' ') {\n            result.replace(i, 1, \"-\");\n            i += 1;\n        }\n        i++;\n    }\n    return result;"}
{"task_id": "HumanEval/141", "completion": "\n    std::string file_name_extension = file_name.substr(file_name.find(\".\") + 1);\n    std::string file_name_before_dot = file_name.substr(0, file_name.find(\".\"));\n    std::string file_name_after_dot = file_name.substr(file_name.find(\".\") + 1);\n    if (file_name_extension != \"txt\" && file_name_extension != \"exe\" && file_name_extension != \"dll\") {\n        return \"No\";\n    }\n    if (file_name_before_dot.length() == 0 || file_name_before_dot[0] < 'a' || file_name_before_dot[0] > 'z') {\n        return \"No\";\n    }\n    if (file_name_after_dot != \"txt\" && file_name_after_dot != \"exe\" && file_name_after_dot != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";"}
{"task_id": "HumanEval/142", "completion": "\n    long sum = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            lst[i] = lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            lst[i] = lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;"}
{"task_id": "HumanEval/143", "completion": "\n    std::vector<std::string> words;\n    std::string word;\n    for (auto c : sentence) {\n        if (c == ' ') {\n            words.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    words.push_back(word);\n    std::vector<std::string> result;\n    for (auto word : words) {\n        if (std::count_if(word.begin(), word.end(), is_prime) == word.size()) {\n            result.push_back(word);\n        }\n    }\n    return result.back();"}
{"task_id": "HumanEval/144", "completion": "\n    // Write your code here\n    int x_numerator = atoi(x.substr(0, x.size() - 1).c_str());\n    int x_denominator = atoi(x.substr(x.size() - 1, x.size()).c_str());\n    int n_numerator = atoi(n.substr(0, n.size() - 1).c_str());\n    int n_denominator = atoi(n.substr(n.size() - 1, n.size()).c_str());\n    int gcd = __gcd(x_denominator, n_denominator);\n    int x_numerator_new = x_numerator * n_denominator / gcd;\n    int x_denominator_new = x_denominator * n_denominator / gcd;\n    int n_numerator_new = n_numerator * x_denominator / gcd;\n    int n_denominator_new = n_denominator * x_denominator / gcd;\n    if (x_numerator_new == x_denominator_new * n_numerator_new && x_denominator_new == n_denominator_new * x_numerator_new)\n        return true;\n    else\n        return false;"}
{"task_id": "HumanEval/145", "completion": "\n    std::vector<long> res;\n    std::sort(nums.begin(), nums.end(), [](long a, long b) {\n        return a + b < b + a;\n    });\n    return nums;"}
{"task_id": "HumanEval/146", "completion": "\n    long count = 0;\n    for (auto i : nums) {\n        if (i > 10 && (i % 10) % 2 == 1 && (i / 10) % 2 == 1) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/147", "completion": "\n    long a[n];\n    for (long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] % 3 == 0) {\n                    ans += 1;\n                }\n            }\n        }\n    }\n    return ans;"}
{"task_id": "HumanEval/148", "completion": "\n    std::vector<std::string> planets;\n    if (planet1 == \"Mercury\" && planet2 == \"Uranus\") {\n        planets.push_back(\"Venus\");\n        planets.push_back(\"Earth\");\n        planets.push_back(\"Mars\");\n        planets.push_back(\"Jupiter\");\n        planets.push_back(\"Saturn\");\n    }\n    if (planet1 == \"Venus\" && planet2 == \"Mercury\") {\n        planets.push_back(\"Uranus\");\n    }\n    if (planet1 == \"Earth\" && planet2 == \"Mercury\") {\n        planets.push_back(\"Venus\");\n        planets.push_back(\"Mars\");\n        planets.push_back(\"Jupiter\");\n        planets.push_back(\"Saturn\");\n    }\n    if (planet1 == \"Mars\" && planet2 == \"Earth\") {\n        planets.push_back(\"Venus\");\n        planets.push_back(\"Jupiter\");\n        planets.push_back(\"Saturn\");\n    }\n    if (planet1 == \"Jupiter\" && planet2 == \"Mars\") {\n        planets.push_back(\"Venus\");\n        planets.push_back(\"Saturn\");\n    }\n    if (planet1 == \"Saturn\" && planet2 == \"Jupiter\") {\n        planets.push_back(\"Venus\");\n        planets.push_back(\"Uranus\");\n    }\n    if (planet1 == \"Uranus\" && planet2 == \"Saturn\") {\n        planets.push_back(\"Venus\");\n    }\n    if (planet1 == \"Venus\" && planet2 == \"Earth\") {\n        planets.push_back(\"Mars\");\n        planets.push_back(\"Jupiter\");\n        planets.push_back(\"Saturn\");\n    }\n    if (planet1 == \"Venus\" && planet2 == \"Mars\") {\n        planets.push_back(\"Jupiter\");\n        planets.push_back(\"Saturn\");\n    }\n    if (planet1 == \"Venus\" && planet2 == \"Jupiter\") {\n        planets.push_back(\"Saturn\");\n    }\n    if (planet1 == \"Venus\" &&"}
{"task_id": "HumanEval/149", "completion": "\n    std::sort(lst.begin(), lst.end(), [](const std::string& a, const std::string& b) {\n        return a.length() < b.length();\n    });\n    return lst;"}
{"task_id": "HumanEval/150", "completion": "\n  if (n == 1)\n    return x;\n  else\n    return y;"}
{"task_id": "HumanEval/151", "completion": "\n    long sum = 0;\n    for (auto i : lst) {\n        if (i < 0 || std::isnan(i))\n            continue;\n        if (i % 2 == 1)\n            sum += i * i;\n    }\n    return sum;"}
{"task_id": "HumanEval/152", "completion": "\n    std::vector<long> res(game.size());\n    for (int i = 0; i < game.size(); ++i) {\n        res[i] = abs(game[i] - guess[i]);\n    }\n    return res;"}
{"task_id": "HumanEval/153", "completion": "\n    std::string res = \"\";\n    std::vector<std::pair<std::string, int>> strength_extensions;\n    for (std::vector<std::string>::iterator it = extensions.begin(); it != extensions.end(); ++it) {\n        int strength = 0;\n        for (std::string::iterator it2 = it->c_str(); it2 != it->c_str() + it->size(); ++it2) {\n            if (it2 >= it->c_str() + it->size() - 1)\n                break;\n            if (it2 >= it->c_str() + it->size() - 1)\n                break;\n            if (it2 >= it->c_str() + it->size() - 1)\n                break;\n            if (it2 >= it->c_str() + it->size() - 1)\n                break;\n            if (it2 >= it->c_str() + it->size() - 1)\n                break;\n            if (it2 >= it->c_str() + it->size() - 1)\n                break;\n            if (it2 >= it->c_str() + it->size() - 1)\n                break;\n            if (it2 >= it->c_str() + it->size() - 1)\n                break;\n            if (it2 >= it->c_str() + it->size() - 1)\n                break;\n            if (it2 >= it->c_str() + it->size() - 1)\n                break;\n            if (it2 >= it->c_str() + it->size() - 1)\n                break;\n            if (it2 >= it->c_str() + it->size() - 1)\n                break;\n            if (it2 >= it->c_str() + it->size() - 1)\n                break;\n            if (it2 >= it->c_str() + it->size() - 1)\n                break;\n            if (it2 >= it->c_str() + it->size() - 1)\n                break;\n            if (it2 >= it->c_str() + it->size() - 1)\n                break;\n            if (it2 >= it"}
{"task_id": "HumanEval/154", "completion": "\n    int n = a.length();\n    int m = b.length();\n    if (n < m) {\n        return false;\n    }\n    for (int i = 0; i < n - m + 1; i++) {\n        if (a.substr(i, m) == b) {\n            return true;\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/155", "completion": "\n    std::tuple<long, long> even_odd_count_t;\n    long even_count = 0;\n    long odd_count = 0;\n    long num_abs = std::abs(num);\n    while (num_abs != 0) {\n        long last_digit = num_abs % 10;\n        if (last_digit % 2 == 0)\n            even_count++;\n        else\n            odd_count++;\n        num_abs /= 10;\n    }\n    even_odd_count_t = std::make_tuple(even_count, odd_count);\n    return even_odd_count_t;"}
{"task_id": "HumanEval/156", "completion": "\n    std::string result;\n    long num = number;\n    long thousands = num / 1000;\n    num %= 1000;\n    long hundreds = num / 100;\n    num %= 100;\n    long tens = num / 10;\n    num %= 10;\n    long ones = num;\n    if (thousands > 0) {\n        result += (thousands == 1) ? \"m\" : \"mm\";\n    }\n    if (hundreds > 0) {\n        result += (hundreds == 1) ? \"c\" : \"cc\";\n    }\n    if (tens > 0) {\n        result += (tens == 1) ? \"x\" : \"xx\";\n    }\n    if (ones > 0) {\n        result += (ones == 1) ? \"i\" : \"ii\";\n    }\n    return result;"}
{"task_id": "HumanEval/157", "completion": "\n    // Write your code here\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);"}
{"task_id": "HumanEval/158", "completion": "\n    std::sort(words.begin(), words.end(), [](const std::string& a, const std::string& b) {\n        return a.length() < b.length();\n    });\n    return words[words.size() - 1];"}
{"task_id": "HumanEval/159", "completion": "\n    long eaten = 0;\n    long left = 0;\n    if (number < need) {\n        eaten = need - number;\n        left = remaining - eaten;\n    } else {\n        left = remaining;\n    }\n    return std::vector<long>({(long)eaten, (long)left});"}
{"task_id": "HumanEval/160", "completion": "\n    std::stack<long> st;\n    for (auto i : operand) {\n        st.push(i);\n    }\n    for (auto i : op) {\n        if (i == \"+\") {\n            long a = st.top();\n            st.pop();\n            long b = st.top();\n            st.pop();\n            st.push(a + b);\n        }\n        if (i == \"-\") {\n            long a = st.top();\n            st.pop();\n            long b = st.top();\n            st.pop();\n            st.push(b - a);\n        }\n        if (i == \"*\") {\n            long a = st.top();\n            st.pop();\n            long b = st.top();\n            st.pop();\n            st.push(a * b);\n        }\n        if (i == \"//\") {\n            long a = st.top();\n            st.pop();\n            long b = st.top();\n            st.pop();\n            st.push(b / a);\n        }\n        if (i == \"**\") {\n            long a = st.top();\n            st.pop();\n            long b = st.top();\n            st.pop();\n            st.push(b ^ a);\n        }\n    }\n    return st.top();"}
{"task_id": "HumanEval/161", "completion": "\n    std::string res = \"\";\n    for (auto c : s) {\n        if (c >= 'a' && c <= 'z') {\n            res += (c >= 'Z' ? 'a' : 'A');\n        } else {\n            res += c;\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/162", "completion": "\n    if (text.empty()) {\n        return std::optional<std::string>();\n    }\n    std::string md5_hash = \"\";\n    std::md5 md5_hash_generator(text.c_str(), text.size());\n    md5_hash = md5_hash_generator.hexdigest();\n    return std::optional<std::string>(md5_hash);"}
{"task_id": "HumanEval/163", "completion": "\n    std::vector<long> res;\n    long i = a;\n    while (i <= b) {\n        long d = i % 10;\n        if (d % 2 == 0) {\n            res.push_back(i);\n        }\n        i = i / 10;\n    }\n    res.sort();\n    return res;"}
