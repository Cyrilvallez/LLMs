{"task_id": "HumanEval/0", "completion": "\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/1", "completion": "\n    std::vector<std::string> result;\n    std::string current_group;\n    int open_braces = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n            open_braces++;\n            current_group += c;\n        } else if (c == ')') {\n            open_braces--;\n            current_group += c;\n            if (open_braces == 0) {\n                result.push_back(current_group);\n                current_group = \"\";\n            }\n        } else {\n            current_group += c;\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/2", "completion": "\n    // assert(number >= 0);\n    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n    return decimal_part;"}
{"task_id": "HumanEval/3", "completion": "\n    long balance = 0;\n    for (auto operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/4", "completion": "\n    float mean = 0.0f;\n    for (float number : numbers) {\n        mean += number;\n    }\n    mean /= numbers.size();\n    float sum = 0.0f;\n    for (float number : numbers) {\n        sum += std::abs(number - mean);\n    }\n    return sum / numbers.size();"}
{"task_id": "HumanEval/5", "completion": "\n    std::vector<long> result;\n    for (auto it = numbers.begin(); it!= numbers.end(); it++) {\n        result.push_back(*it);\n        if (it + 1!= numbers.end()) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/6", "completion": "\n    std::vector<long> result;\n    std::stack<char> stack;\n    for (int i = 0; i < paren_string.length(); i++) {\n        if (paren_string[i] == '(') {\n            stack.push(paren_string[i]);\n        } else if (paren_string[i] == ')') {\n            stack.pop();\n        }\n    }\n    result.push_back(stack.size());\n    return result;"}
{"task_id": "HumanEval/7", "completion": "\n    std::vector<std::string> filtered_strings;\n    for (std::string string : strings) {\n        if (string.find(substring)!= std::string::npos) {\n            filtered_strings.push_back(string);\n        }\n    }\n    return filtered_strings;"}
{"task_id": "HumanEval/8", "completion": "\n    long sum = 0;\n    long product = 1;\n    for (long number : numbers) {\n        sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum, product);"}
{"task_id": "HumanEval/9", "completion": "\n    std::vector<long> result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n    }\n    return result;"}
{"task_id": "HumanEval/10", "completion": "\n    int n = string.size();\n    if (n == 0) {\n        return string;\n    }\n    // Find the longest postfix of supplied string that is a palindrome.\n    int i = n - 1;\n    while (i >= 0 && string[i] == string[0]) {\n        i--;\n    }\n    i++;\n    // Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    std::string prefix = string.substr(0, i);\n    std::string suffix = string.substr(i, n - i);\n    std::reverse(suffix.begin(), suffix.end());\n    return prefix + suffix;"}
{"task_id": "HumanEval/11", "completion": "\n    assert(a.size() == b.size());\n    std::string result;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n            result.push_back('0');\n        } else {\n            result.push_back('1');\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/12", "completion": "\n    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string longest_string = strings[0];\n    for (std::string s : strings) {\n        if (s.size() > longest_string.size()) {\n            longest_string = s;\n        }\n    }\n    return longest_string;"}
{"task_id": "HumanEval/13", "completion": "\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a % b);"}
{"task_id": "HumanEval/14", "completion": "\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length(); i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return prefixes;"}
{"task_id": "HumanEval/15", "completion": "\n    std::string s;\n    for (long i = 0; i <= n; i++) {\n        s += std::to_string(i) + \" \";\n    }\n    return s;"}
{"task_id": "HumanEval/16", "completion": "\n    std::unordered_set<char> set;\n    for (auto c : string) {\n        set.insert(std::tolower(c));\n    }\n    return set.size();"}
{"task_id": "HumanEval/17", "completion": "\n    std::vector<long> beats;\n    for(int i=0;i<music_string.length();i++){\n        if(music_string[i]=='o'){\n            beats.push_back(4);\n        }\n        else if(music_string[i]=='o|'){\n            beats.push_back(2);\n        }\n        else if(music_string[i]=='.|'){\n            beats.push_back(1);\n        }\n    }\n    return beats;"}
{"task_id": "HumanEval/18", "completion": "\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        if (string.substr(i, substring.size()) == substring) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/19", "completion": "\n    std::vector<std::string> v;\n    std::stringstream ss(numbers);\n    std::string token;\n    while (std::getline(ss, token,'')) {\n        v.push_back(token);\n    }\n    std::sort(v.begin(), v.end());\n    std::string res;\n    for (auto i : v) {\n        res += i + \" \";\n    }\n    return res;"}
{"task_id": "HumanEval/20", "completion": "\n    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = std::numeric_limits<float>::min();\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i + 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);"}
{"task_id": "HumanEval/21", "completion": "\n    assert(numbers.size() >= 2);\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float> rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back((number - min_val) / (max_val - min_val));\n    }\n    return rescaled_numbers;"}
{"task_id": "HumanEval/22", "completion": "\n    std::vector<long> result;\n    for (auto const& value : values) {\n        if (std::holds_alternative<long>(value)) {\n            result.push_back(std::get<long>(value));\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/23", "completion": "\n    return string.length();"}
{"task_id": "HumanEval/24", "completion": "\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return n;"}
{"task_id": "HumanEval/25", "completion": "\n    std::vector<long> factors;\n    for (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;"}
{"task_id": "HumanEval/26", "completion": "\n    std::vector<long> result;\n    std::set<long> seen;\n    for (auto number : numbers) {\n        if (seen.find(number) == seen.end()) {\n            result.push_back(number);\n            seen.insert(number);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/27", "completion": "\n    std::string result;\n    for (char c : string) {\n        if (c >= 'a' && c <= 'z') {\n            result += c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c - 'A' + 'a';\n        } else {\n            result += c;\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/28", "completion": "\n    std::string result = \"\";\n    for (std::string s : strings) {\n        result += s;\n    }\n    return result;"}
{"task_id": "HumanEval/29", "completion": "\n    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;"}
{"task_id": "HumanEval/30", "completion": "\n    std::vector<long> res;\n    for (long i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/31", "completion": "\n    if (n == 1) {\n        return false;\n    }\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/33", "completion": "\n    std::vector<long> l_prime;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_prime.push_back(l[i]);\n        }\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3!= 0) {\n            l_prime.push_back(l[i]);\n        }\n    }\n    return l_prime;"}
{"task_id": "HumanEval/34", "completion": "\n    std::sort(l.begin(), l.end());\n    std::vector<long>::iterator new_end = std::unique(l.begin(), l.end());\n    l.erase(new_end, l.end());\n    return l;"}
{"task_id": "HumanEval/35", "completion": "\n    long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;"}
{"task_id": "HumanEval/36", "completion": "\n    long count = 0;\n    for (long i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/37", "completion": "\n    std::vector<long> l_prime;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            l_prime.push_back(l[i]);\n        } else {\n            l_prime.push_back(l[i]);\n        }\n    }\n    return l_prime;"}
{"task_id": "HumanEval/39", "completion": "\n    assert(n >= 1);\n    long a = 1, b = 1, c = 2;\n    for (long i = 3; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n        if (is_prime(c)) {\n            return c;\n        }\n    }\n    return c;"}
{"task_id": "HumanEval/40", "completion": "\n    // sort the vector\n    std::sort(l.begin(), l.end());\n    // iterate over the vector\n    for (int i = 0; i < l.size() - 2; i++) {\n        // if the current element is zero, return true\n        if (l[i] == 0) {\n            return true;\n        }\n        // if the current element is less than zero, skip it\n        if (l[i] < 0) {\n            continue;\n        }\n        // use two pointers to find the two elements that sum to zero\n        int left = i + 1, right = l.size() - 1;\n        while (left < right) {\n            long sum = l[i] + l[left] + l[right];\n            if (sum == 0) {\n                return true;\n            }\n            if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/41", "completion": "\n    // Write your code here.\n    return 0;"}
{"task_id": "HumanEval/42", "completion": "\n    std::vector<long> ret;\n    for (auto x : l) {\n        ret.push_back(x + 1);\n    }\n    return ret;"}
{"task_id": "HumanEval/43", "completion": "\n    // Write your code here.\n    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(i)==s.end()){\n            s.insert(i);\n        }\n        else{\n            return true;\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/44", "completion": "\n    // Write your code here\n    std::string result;\n    while (x) {\n        result += std::to_string(x % base);\n        x /= base;\n    }\n    std::reverse(result.begin(), result.end());\n    return result;"}
{"task_id": "HumanEval/45", "completion": "\n    return (a * h) / 2;"}
{"task_id": "HumanEval/46", "completion": "\n    long a = 0, b = 0, c = 2, d = 0;\n    for (int i = 0; i < n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;"}
{"task_id": "HumanEval/47", "completion": "\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return (l[(l.size() / 2) - 1] + l[l.size() / 2]) / 2.0f;\n    } else {\n        return l[l.size() / 2];\n    }"}
{"task_id": "HumanEval/48", "completion": "\n    int n = text.length();\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i]!= text[n - i - 1]) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/49", "completion": "\n    if (n < 0) n += p;\n    long ret = 1;\n    while (n) {\n        if (n & 1) ret = ret * n % p;\n        n >>= 1;\n        if (n) ret = ret * ret % p;\n    }\n    return ret;"}
{"task_id": "HumanEval/51", "completion": "\n    std::string result;\n    for (char c : text) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            continue;\n        }\n        result += c;\n    }\n    return result;"}
{"task_id": "HumanEval/52", "completion": "\n    for (auto i : l) {\n        if (i > t) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y;"}
{"task_id": "HumanEval/54", "completion": "\n    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n    return s0 == s1;"}
{"task_id": "HumanEval/55", "completion": "\n    assert(n >= 0);\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n    return fib(n - 1) + fib(n - 2);"}
{"task_id": "HumanEval/56", "completion": "\n    std::stack<char> s;\n    for (char c : brackets) {\n        if (c == '<') {\n            s.push(c);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();"}
{"task_id": "HumanEval/57", "completion": "\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;"}
{"task_id": "HumanEval/58", "completion": "\n    std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(res));\n    return res;"}
{"task_id": "HumanEval/59", "completion": "\n    assert(n > 1);\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return n;"}
{"task_id": "HumanEval/60", "completion": "\n    if (n == 1) return 1;\n    return n + sum_to_n(n - 1);"}
{"task_id": "HumanEval/61", "completion": "\n    std::stack<char> s;\n    for (auto c : brackets) {\n        if (c == '(') {\n            s.push(c);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();"}
{"task_id": "HumanEval/62", "completion": "\n    std::vector<long> res;\n    for (int i = 1; i < xs.size(); i++) {\n        res.push_back(i * xs[i]);\n    }\n    return res;"}
{"task_id": "HumanEval/63", "completion": "\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n    long a = 0, b = 0, c = 1;\n    for (int i = 3; i <= n; i++) {\n        c = a + b + c;\n        a = b;\n        b = c;\n    }\n    return c;"}
{"task_id": "HumanEval/64", "completion": "\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/65", "completion": "\n    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        return std::string(s.rbegin(), s.rend());\n    }\n    return s.substr(s.size() - shift) + s.substr(0, s.size() - shift);"}
{"task_id": "HumanEval/66", "completion": "\n    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'A' && s[i] <= 'Z'){\n            sum += s[i];\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/67", "completion": "\n    std::vector<std::string> v;\n    std::string temp;\n    for(int i=0;i<s.size();i++){\n        if(s[i]!=' '){\n            temp+=s[i];\n        }\n        else{\n            v.push_back(temp);\n            temp=\"\";\n        }\n    }\n    v.push_back(temp);\n    long a=std::stol(v[0]);\n    long b=std::stol(v[2]);\n    long c=a+b;\n    long d=n-c;\n    long e=d/3;\n    return e;"}
{"task_id": "HumanEval/68", "completion": "\n    // Write your code here\n    std::vector<long> res;\n    if(arr.size() == 0) return res;\n    long min_even = INT_MAX;\n    int min_even_index = -1;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0 && arr[i] < min_even){\n            min_even = arr[i];\n            min_even_index = i;\n        }\n    }\n    if(min_even_index == -1) return res;\n    res.push_back(min_even);\n    res.push_back(min_even_index);\n    return res;"}
{"task_id": "HumanEval/69", "completion": "\n    // Fill this in.\n    std::sort(lst.begin(), lst.end());\n    int n = lst.size();\n    int i = 0;\n    while (i < n) {\n        if (lst[i] > 0) {\n            return lst[i];\n        }\n        i++;\n    }\n    return -1;"}
{"task_id": "HumanEval/70", "completion": "\n    if (lst.size() == 0) {\n        return lst;\n    }\n    std::vector<long> result;\n    long min_val = *std::min_element(lst.begin(), lst.end());\n    result.push_back(min_val);\n    lst.erase(std::remove(lst.begin(), lst.end(), min_val), lst.end());\n    while (lst.size() > 0) {\n        long max_val = *std::max_element(lst.begin(), lst.end());\n        result.push_back(max_val);\n        lst.erase(std::remove(lst.begin(), lst.end(), max_val), lst.end());\n        if (lst.size() == 0) {\n            break;\n        }\n        long min_val = *std::min_element(lst.begin(), lst.end());\n        result.push_back(min_val);\n        lst.erase(std::remove(lst.begin(), lst.end(), min_val), lst.end());\n    }\n    return result;"}
{"task_id": "HumanEval/71", "completion": "\n    // Write your code here\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1.0f;\n    }\n    return (a + b + c) / 2.0f;"}
{"task_id": "HumanEval/72", "completion": "\n    // Fill this in.\n    int n = q.size();\n    if (n == 0) return true;\n    if (n == 1) return q[0] <= w;\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += q[i];\n        if (sum > w) return false;\n    }\n    return sum <= w;"}
{"task_id": "HumanEval/73", "completion": "\n    // Write your code here\n    long n = arr.size();\n    long count = 0;\n    for(long i=0;i<n;i++){\n        if(arr[i]!= arr[n-i-1]){\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/74", "completion": "\n    std::vector<std::string> res;\n    if(lst1.size() == 0 || lst2.size() == 0) return res;\n    int count1 = 0, count2 = 0;\n    for(int i = 0; i < lst1.size(); i++) count1 += lst1[i].size();\n    for(int i = 0; i < lst2.size(); i++) count2 += lst2[i].size();\n    if(count1 < count2) return lst1;\n    else if(count1 > count2) return lst2;\n    else return lst1;"}
{"task_id": "HumanEval/75", "completion": "\n    if(a<100) return false;\n    for(int i=2;i<a;i++){\n        if(a%i==0){\n            int j=2;\n            while(j*j<=i){\n                if(i%j==0) break;\n                j++;\n            }\n            if(j*j>i) return true;\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/76", "completion": "\n    if (x == 1) return true;\n    if (x == 0) return false;\n    if (n == 0) return false;\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n == 3) return false;\n    if (n == 4) return true;\n    if (n == 5) return false;\n    if (n == 6) return true;\n    if (n == 7) return false;\n    if (n == 8) return true;\n    if (n == 9) return false;\n    if (n == 10) return true;\n    if (n == 11) return false;\n    if (n == 12) return true;\n    if (n == 13) return false;\n    if (n == 14) return true;\n    if (n == 15) return false;\n    if (n == 16) return true;\n    if (n == 17) return false;\n    if (n == 18) return true;\n    if (n == 19) return false;\n    if (n == 20) return true;\n    if (n == 21) return false;\n    if (n == 22) return true;\n    if (n == 23) return false;\n    if (n == 24) return true;\n    if (n == 25) return false;\n    if (n == 26) return true;\n    if (n == 27) return false;\n    if (n == 28) return true;\n    if (n == 29) return false;\n    if (n == 30) return true;\n    if (n == 31) return false;\n    if (n == 32) return true;\n    if (n == 33) return false;\n    if (n == 34) return true;\n    if (n == 35) return false;\n    if (n == 36) return true;\n    if (n == 37) return false;\n    if (n == 38) return true;\n    if (n == 39) return false;\n    if (n == 40) return true;\n    if (n == 41"}
{"task_id": "HumanEval/77", "completion": "\n    if(a==0) return true;\n    if(a<0) a=-a;\n    long root=sqrt(a);\n    if(root*root*root==a) return true;\n    return false;"}
{"task_id": "HumanEval/78", "completion": "\n    // write your code here\n    long count = 0;\n    for(int i = 0; i < num.size(); i++){\n        if(num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D'){\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/79", "completion": "\n    std::string binary = \"\";\n    while (decimal > 0) {\n        binary = std::to_string(decimal % 2) + binary;\n        decimal = decimal / 2;\n    }\n    return \"db\" + binary + \"db\";"}
{"task_id": "HumanEval/80", "completion": "\n    int n = s.size();\n    if (n < 3) return false;\n    std::unordered_set<char> set;\n    for (int i = 0; i < n; i++) {\n        if (set.find(s[i])!= set.end()) return false;\n        set.insert(s[i]);\n    }\n    return true;"}
{"task_id": "HumanEval/81", "completion": "\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/82", "completion": "\n    // Your code here\n    int length = string.length();\n    if (length == 1) {\n        return true;\n    }\n    if (length == 2) {\n        return true;\n    }\n    if (length == 3) {\n        return true;\n    }\n    if (length == 4) {\n        return false;\n    }\n    if (length == 5) {\n        return true;\n    }\n    if (length == 6) {\n        return false;\n    }\n    if (length == 7) {\n        return true;\n    }\n    if (length == 8) {\n        return false;\n    }\n    if (length == 9) {\n        return false;\n    }\n    if (length == 10) {\n        return false;\n    }\n    if (length == 11) {\n        return true;\n    }\n    if (length == 12) {\n        return false;\n    }\n    if (length == 13) {\n        return true;\n    }\n    if (length == 14) {\n        return false;\n    }\n    if (length == 15) {\n        return false;\n    }\n    if (length == 16) {\n        return false;\n    }\n    if (length == 17) {\n        return true;\n    }\n    if (length == 18) {\n        return false;\n    }\n    if (length == 19) {\n        return true;\n    }\n    if (length == 20) {\n        return false;\n    }\n    if (length == 21) {\n        return false;\n    }\n    if (length == 22) {\n        return false;\n    }\n    if (length == 23) {\n        return true;\n    }\n    if (length == 24) {\n        return false;\n    }\n    if (length == 25) {\n        return false;\n    }\n    if (length == 26) {\n        return false;\n    }\n    if (length == 27) {\n        return true;\n    }\n    if (length == 28) {\n        return false;\n    }\n    if (length == 29) {\n        return false;\n    }\n    if (length == 30) {\n        return false;\n    }\n    if (length == 31) {\n        return true;\n    }\n    if (length == 32) {\n        return"}
{"task_id": "HumanEval/83", "completion": "\n    // Write your code here\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        string s = to_string(i);\n        if (s[0] == '1' || s[s.size() - 1] == '1') {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/84", "completion": "\n    std::string res;\n    while(N){\n        res.push_back(N%2+'0');\n        N/=2;\n    }\n    std::reverse(res.begin(),res.end());\n    return res;"}
{"task_id": "HumanEval/85", "completion": "\n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/86", "completion": "\n    // Fill this in.\n    std::string res = \"\";\n    std::vector<std::string> words;\n    std::istringstream iss(s);\n    for (std::string word; iss >> word;) {\n        words.push_back(word);\n    }\n    for (int i = 0; i < words.size(); i++) {\n        std::sort(words[i].begin(), words[i].end());\n        res += words[i];\n        if (i!= words.size() - 1) {\n            res += \" \";\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/87", "completion": "\n    std::vector<std::tuple<long, long>> res;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/88", "completion": "\n    // write your code here\n    long sum = 0;\n    for (int i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n    }\n    return array;"}
{"task_id": "HumanEval/89", "completion": "\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += (char)((s[i] - 'a' + 2) % 26 + 'a');\n        }\n        else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += (char)((s[i] - 'A' + 2) % 26 + 'A');\n        }\n        else {\n            result += s[i];\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/90", "completion": "\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] < lst[i + 1]) {\n            return lst[i + 1];\n        }\n    }\n    return std::nullopt;"}
{"task_id": "HumanEval/91", "completion": "\n    std::vector<std::string> words;\n    std::istringstream iss(S);\n    for (std::string s; iss >> s;) {\n        words.push_back(s);\n    }\n    int bored = 0;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i] == \"I\") {\n            bored++;\n        }\n    }\n    return bored;"}
{"task_id": "HumanEval/92", "completion": "\n    // Your code here\n    if (x == (y + z) || y == (x + z) || z == (x + y)) {\n        return true;\n    }\n    return false;"}
{"task_id": "HumanEval/93", "completion": "\n    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n                result += message[i + 2];\n            } else {\n                result += message[i + 1];\n            }\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            if (message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n                result += message[i + 2];\n            } else {\n                result += message[i + 1];\n            }\n        } else {\n            result += message[i];\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/94", "completion": "\n    long sum = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0) {\n            bool isPrime = true;\n            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                sum += lst[i];\n            }\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/95", "completion": "\n    bool flag = true;\n    for(auto it = dict.begin(); it!= dict.end(); it++) {\n        if(it->first!= it->first.lower() && it->first!= it->first.upper()) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;"}
{"task_id": "HumanEval/96", "completion": "\n    std::vector<long> result;\n    for (long i = 2; i < n; i++) {\n        bool is_prime = true;\n        for (long j = 2; j < i; j++) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            result.push_back(i);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/97", "completion": "\n    long a_unit = a % 10;\n    long b_unit = b % 10;\n    long a_ten = a / 10;\n    long b_ten = b / 10;\n    long result = a_unit * b_unit;\n    result += a_ten * b_ten * 10;\n    result += a_ten * b_unit;\n    result += a_unit * b_ten;\n    return result;"}
{"task_id": "HumanEval/98", "completion": "\n    long count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/99", "completion": "\n    // Your code here\n    long num = std::stol(value);\n    if(num > 0) {\n        return (num + (num % 10 == 0? 0 : 10 - num % 10)) / 10 * 10;\n    }\n    else {\n        return (num - (num % 10 == 0? 0 : num % 10 - 10)) / 10 * 10;\n    }"}
{"task_id": "HumanEval/100", "completion": "\n    std::vector<long> result;\n    result.push_back(n);\n    while (n > 1) {\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = (n * 3) + 1;\n        }\n        result.push_back(n);\n    }\n    return result;"}
{"task_id": "HumanEval/101", "completion": "\n    std::vector<std::string> v;\n    std::istringstream iss(s);\n    for (std::string word; iss >> word;) {\n        v.push_back(word);\n    }\n    return v;"}
{"task_id": "HumanEval/102", "completion": "\n    // Write your code here\n    if(x%2==0 and y%2==0):\n        return y\n    elif(x%2==0 and y%2!=0):\n        return y-1\n    elif(x%2!=0 and y%2==0):\n        return y-1\n    else:\n        return y-2"}
{"task_id": "HumanEval/103", "completion": "\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i = n; i <= m; i++) sum += i;\n    long avg = sum / (m - n + 1);\n    std::string ans = \"0b\";\n    while (avg > 0) {\n        ans += (avg % 2 == 0? \"0\" : \"1\");\n        avg /= 2;\n    }\n    return Union_std_string_long(ans);"}
{"task_id": "HumanEval/104", "completion": "\n    std::vector<long> res;\n    for(auto i:x){\n        int c=0;\n        while(i){\n            if(i%10%2==0)\n                c++;\n            i/=10;\n        }\n        if(c==0)\n            res.push_back(i);\n    }\n    return res;"}
{"task_id": "HumanEval/105", "completion": "\n    std::vector<std::string> result;\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n            result.push_back(std::to_string(i));\n        }\n    }\n    std::sort(result.begin(), result.end(), [](std::string a, std::string b) {\n        return a.size() < b.size();\n    });\n    std::reverse(result.begin(), result.end());\n    for (auto i = 0; i < result.size(); i++) {\n        if (result[i] == \"1\") {\n            result[i] = \"One\";\n        } else if (result[i] == \"2\") {\n            result[i] = \"Two\";\n        } else if (result[i] == \"3\") {\n            result[i] = \"Three\";\n        } else if (result[i] == \"4\") {\n            result[i] = \"Four\";\n        } else if (result[i] == \"5\") {\n            result[i] = \"Five\";\n        } else if (result[i] == \"6\") {\n            result[i] = \"Six\";\n        } else if (result[i] == \"7\") {\n            result[i] = \"Seven\";\n        } else if (result[i] == \"8\") {\n            result[i] = \"Eight\";\n        } else if (result[i] == \"9\") {\n            result[i] = \"Nine\";\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/106", "completion": "\n    std::vector<long> v;\n    for(long i=1;i<=n;i++){\n        if(i%2==0)\n            v.push_back(std::accumulate(std::begin(v),std::end(v),1,std::multiplies<long>()));\n        else\n            v.push_back(i);\n    }\n    return v;"}
{"task_id": "HumanEval/107", "completion": "\n    // Fill this in.\n    long even = 0, odd = 0;\n    for (long i = 1; i <= n; i++) {\n        long num = i;\n        while (num > 0) {\n            long rem = num % 10;\n            num = num / 10;\n            if (rem!= 0 && rem == num) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n    }\n    return std::make_tuple(even, odd);"}
{"task_id": "HumanEval/108", "completion": "\n    long count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        long sum = 0;\n        long num = arr[i];\n        while(num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        if(sum > 0) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/109", "completion": "\n    // Write your code here\n    int n = arr.size();\n    if(n==0) return true;\n    int i = 0;\n    while(i<n-1){\n        if(arr[i]<=arr[i+1]){\n            i++;\n        }\n        else{\n            int j = i+1;\n            while(j<n-1 and arr[j]<=arr[j+1]){\n                j++;\n            }\n            if(j==n-1) return false;\n            else{\n                swap(arr[i],arr[j]);\n                i = j+1;\n            }\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/110", "completion": "\n    // Fill this in.\n    std::vector<long> lst1_copy = lst1;\n    std::vector<long> lst2_copy = lst2;\n    std::sort(lst1_copy.begin(), lst1_copy.end());\n    std::sort(lst2_copy.begin(), lst2_copy.end());\n    for (int i = 0; i < lst1_copy.size(); i++) {\n        if (lst1_copy[i] % 2!= 0) {\n            return \"NO\";\n        }\n    }\n    for (int i = 0; i < lst2_copy.size(); i++) {\n        if (lst2_copy[i] % 2!= 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";"}
{"task_id": "HumanEval/111", "completion": "\n    std::map<std::string,long> result;\n    std::istringstream iss(test);\n    std::string word;\n    while (iss >> word) {\n        result[word]++;\n    }\n    return result;"}
{"task_id": "HumanEval/112", "completion": "\n    // Write your code here\n    std::string result;\n    for(int i=0;i<s.size();i++){\n        if(c.find(s[i])==std::string::npos){\n            result+=s[i];\n        }\n    }\n    bool isPalindrome=true;\n    for(int i=0;i<result.size()/2;i++){\n        if(result[i]!=result[result.size()-i-1]){\n            isPalindrome=false;\n            break;\n        }\n    }\n    return std::make_tuple(result,isPalindrome);"}
{"task_id": "HumanEval/113", "completion": "\n    std::vector<std::string> res;\n    for (auto i : lst) {\n        int count = 0;\n        for (auto j : i) {\n            if (j % 2!= 0) {\n                count++;\n            }\n        }\n        res.push_back(\"the number of odd elements \" + std::to_string(count) + \"n the str\" + std::to_string(count) + \"ng \" + std::to_string(count) + \" of the \" + std::to_string(count) + \"nput.\");\n    }\n    return res;"}
{"task_id": "HumanEval/114", "completion": "\n    // Write your code here.\n    long sum = 0;\n    long min_sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < 0) {\n            sum = 0;\n        } else if (sum < min_sum) {\n            min_sum = sum;\n        }\n    }\n    return min_sum;"}
{"task_id": "HumanEval/115", "completion": "\n    // 1. Find the wells\n    std::vector<std::pair<long, long>> wells;\n    for (long i = 0; i < grid.size(); i++) {\n        for (long j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j] == 1) {\n                wells.push_back({i, j});\n            }\n        }\n    }\n    // 2. Find the buckets\n    std::vector<std::pair<long, long>> buckets;\n    for (long i = 0; i < grid[0].size(); i++) {\n        buckets.push_back({0, i});\n    }\n    // 3. Fill the buckets\n    long count = 0;\n    while (wells.size() > 0) {\n        count++;\n        // 3.1. Find the wells that can be filled\n        std::vector<std::pair<long, long>> filled_wells;\n        for (long i = 0; i < wells.size(); i++) {\n            if (buckets[wells[i].second].first + 1 <= capacity) {\n                filled_wells.push_back(wells[i]);\n            }\n        }\n        // 3.2. Fill the buckets\n        for (long i = 0; i < filled_wells.size(); i++) {\n            buckets[filled_wells[i].second].first++;\n        }\n        // 3.3. Remove the filled wells\n        for (long i = 0; i < filled_wells.size(); i++) {\n            wells.erase(std::remove(wells.begin(), wells.end(), filled_wells[i]), wells.end());\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/116", "completion": "\n    std::sort(arr.begin(), arr.end(), [](long a, long b) {\n        return std::bitset<64>(a).count() == std::bitset<64>(b).count()? a < b : std::bitset<64>(a).count() < std::bitset<64>(b).count();\n    });\n    return arr;"}
{"task_id": "HumanEval/117", "completion": "\n    std::vector<std::string> res;\n    std::string word;\n    for(int i=0;i<s.size();i++){\n        if(s[i]!=' '){\n            word+=s[i];\n        }\n        else{\n            if(word.size()==n){\n                res.push_back(word);\n            }\n            word=\"\";\n        }\n    }\n    if(word.size()==n){\n        res.push_back(word);\n    }\n    return res;"}
{"task_id": "HumanEval/118", "completion": "\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])!= std::string::npos) {\n            result = word[i];\n            break;\n        }\n    }\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])!= std::string::npos) {\n            if (result == \"\") {\n                result = word[i];\n            } else {\n                if (abs(word[i] - result) > abs(word[i] - 'a')) {\n                    result = word[i];\n                }\n            }\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/119", "completion": "\n    std::stack<char> stk;\n    for (auto s : lst) {\n        for (auto c : s) {\n            if (c == '(') {\n                stk.push(c);\n            } else {\n                if (stk.empty()) {\n                    return \"No\";\n                }\n                stk.pop();\n            }\n        }\n    }\n    return stk.empty()? \"Yes\" : \"No\";"}
{"task_id": "HumanEval/120", "completion": "\n    // 1. sort the array\n    std::sort(arr.begin(), arr.end());\n    // 2. return the first k elements\n    return std::vector<long>(arr.begin(), arr.begin() + k);"}
{"task_id": "HumanEval/121", "completion": "\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 == 0 && lst[i] % 2!= 0){\n            sum += lst[i];\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/122", "completion": "\n    long sum = 0;\n    for (int i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    return sum;"}
{"task_id": "HumanEval/123", "completion": "\n    std::vector<long> res;\n    while (n!= 1) {\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        res.push_back(n);\n    }\n    return res;"}
{"task_id": "HumanEval/124", "completion": "\n    // Write your code here\n    std::vector<std::string> date_list;\n    std::string temp;\n    for(int i=0;i<date.size();i++){\n        if(date[i]=='-'){\n            date_list.push_back(temp);\n            temp=\"\";\n        }\n        else{\n            temp+=date[i];\n        }\n    }\n    date_list.push_back(temp);\n    int month=std::stoi(date_list[0]);\n    int day=std::stoi(date_list[1]);\n    int year=std::stoi(date_list[2]);\n    if(month<1 or month>12){\n        return false;\n    }\n    if(day<1 or day>31){\n        if(month==1 or month==3 or month==5 or month==7 or month==8 or month==10 or month==12){\n            if(day<1 or day>31){\n                return false;\n            }\n        }\n        else if(month==4 or month==6 or month==9 or month==11){\n            if(day<1 or day>30){\n                return false;\n            }\n        }\n        else{\n            if(day<1 or day>29){\n                return false;\n            }\n        }\n    }\n    if(year<1900 or year>2020){\n        return false;\n    }\n    return true;"}
{"task_id": "HumanEval/125", "completion": "\n    std::vector<std::string> res;\n    std::string word;\n    for (int i = 0; i < txt.size(); i++) {\n        if (txt[i] =='' || txt[i] == ',') {\n            res.push_back(word);\n            word = \"\";\n        } else {\n            word += txt[i];\n        }\n    }\n    if (word.size() > 0) {\n        res.push_back(word);\n    }\n    if (res.size() == 0) {\n        long count = 0;\n        for (int i = 0; i < txt.size(); i++) {\n            if (txt[i] >= 'a' && txt[i] <= 'z') {\n                if (i % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return Union_std_vector_std_string__long(count);\n    }\n    return Union_std_vector_std_string__long(res);"}
{"task_id": "HumanEval/126", "completion": "\n    if (lst.size() == 0) {\n        return true;\n    }\n    for (int i = 0; i < (lst.size() - 1); i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/127", "completion": "\n    long start1, end1, start2, end2;\n    std::tie(start1, end1) = interval1;\n    std::tie(start2, end2) = interval2;\n    if (start1 > end1) {\n        std::swap(start1, end1);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n    }\n    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    long length = std::min(end1, end2) - std::max(start1, start2) + 1;\n    if (length == 0) {\n        return \"NO\";\n    }\n    if (length == 1) {\n        return \"YES\";\n    }\n    if (length == 2) {\n        return \"YES\";\n    }\n    if (length == 3) {\n        return \"YES\";\n    }\n    if (length == 4) {\n        return \"YES\";\n    }\n    if (length == 5) {\n        return \"YES\";\n    }\n    if (length == 6) {\n        return \"YES\";\n    }\n    if (length == 7) {\n        return \"YES\";\n    }\n    if (length == 8) {\n        return \"YES\";\n    }\n    if (length == 9) {\n        return \"YES\";\n    }\n    if (length == 10) {\n        return \"YES\";\n    }\n    if (length == 11) {\n        return \"YES\";\n    }\n    if (length == 12) {\n        return \"YES\";\n    }\n    if (length == 13) {\n        return \"YES\";\n    }\n    if (length == 14) {\n        return \"YES\";\n    }\n    if (length == 15) {\n        return \"YES\";\n    }\n    if (length == 16) {\n        return \"YES\";\n    }\n    if (length == 17) {\n        return \"YES\";\n    }\n    if (length == 18) {\n        return \"YES\";\n    }\n    if (length == 19) {\n        return \"YES\";\n    }\n    if (length == 20) {\n        return \"YES\";\n    }\n    if (length == 21) {\n        return \"YES\";\n    }\n    if (length == "}
{"task_id": "HumanEval/128", "completion": "\n    long sum = 0;\n    long prod = 1;\n    for (long i : arr) {\n        if (i == 0) {\n            return 0;\n        }\n        if (i > 0) {\n            sum += i;\n            prod *= i;\n        } else {\n            sum -= i;\n            prod *= -i;\n        }\n    }\n    return sum * prod;"}
{"task_id": "HumanEval/129", "completion": "\n    // assert(grid.size() >= 2);\n    // assert(grid[0].size() == grid.size());\n    // assert(k >= 1);\n    // assert(k <= grid.size() * grid.size());\n    // Write your code here\n    std::vector<long> res;\n    std::vector<long> path;\n    std::vector<long> path_next;\n    std::vector<long> path_next_next;\n    std::vector<long> path_next_next_next;\n    std::vector<long> path_next_next_next_next;\n    std::vector<long> path_next_next_next_next_next;\n    std::vector<long> path_next_next_next_next_next_next;\n    std::vector<long> path_next_next_next_next_next_next_next;\n    std::vector<long> path_next_next_next_next_next_next_next_next;\n    std::vector<long> path_next_next_next_next_next_next_next_next_next;\n    std::vector<long> path_next_next_next_next_next_next_next_next_next_next;\n    std::vector<long> path_next_next_next_next_next_next_next_next_next_next_next;\n    std::vector<long> path_next_next_next_next_next_next_next_next_next_next_next_next;\n    std::vector<long> path_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    std::vector<long> path_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    std::vector<long> path_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    std::vector<long> path_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n    std::vector<long> path_next_next_next_next_next_next_"}
{"task_id": "HumanEval/130", "completion": "\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n    for (long i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            res.push_back(res[i - 1] + res[i / 2]);\n        } else {\n            res.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/131", "completion": "\n    long res = 1;\n    while (n) {\n        res *= n % 10;\n        n /= 10;\n    }\n    return res;"}
{"task_id": "HumanEval/132", "completion": "\n    std::stack<char> stack;\n    for (auto c : string) {\n        if (c == '[') {\n            stack.push(c);\n        } else if (c == ']') {\n            if (stack.empty()) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.empty();"}
{"task_id": "HumanEval/133", "completion": "\n    long sum = 0;\n    for (auto i : lst) {\n        sum += ceil(i) * ceil(i);\n    }\n    return sum;"}
{"task_id": "HumanEval/134", "completion": "\n    // Your code here\n    if(txt.size() == 0) return false;\n    if(txt[txt.size()-1] >= 'a' && txt[txt.size()-1] <= 'z' || txt[txt.size()-1] >= 'A' && txt[txt.size()-1] <= 'Z') return true;\n    return false;"}
{"task_id": "HumanEval/135", "completion": "\n    // Write your code here\n    long n = arr.size();\n    long max_index = -1;\n    long max_value = -1;\n    for(long i=0;i<n;i++){\n        if(arr[i]>=max_value){\n            max_value = arr[i];\n            max_index = i;\n        }\n    }\n    if(max_index==-1){\n        return -1;\n    }\n    long count = 0;\n    for(long i=max_index;i>=0;i--){\n        if(arr[i]>=max_value){\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/136", "completion": "\n    std::optional<long> largest = std::nullopt;\n    std::optional<long> smallest = std::nullopt;\n    for (long i : lst) {\n        if (i < 0) {\n            if (largest.has_value() == false || largest.value() < i) {\n                largest = i;\n            }\n        } else if (i > 0) {\n            if (smallest.has_value() == false || smallest.value() > i) {\n                smallest = i;\n            }\n        }\n    }\n    return std::make_tuple(largest, smallest);"}
{"task_id": "HumanEval/137", "completion": "\n    if (a == b) {\n        return std::nullopt;\n    }\n    if (a > b) {\n        return a;\n    }\n    return b;"}
{"task_id": "HumanEval/138", "completion": "\n    if (n % 2 == 1) {\n        return false;\n    }\n    std::vector<long> v;\n    for (long i = 2; i <= n; i += 2) {\n        v.push_back(i);\n    }\n    long sum = 0;\n    for (long i = 0; i < v.size(); i++) {\n        sum += v[i];\n    }\n    return sum == n;"}
{"task_id": "HumanEval/139", "completion": "\n    long result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;"}
{"task_id": "HumanEval/140", "completion": "\n    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] =='') {\n            if (result.size() == 0) {\n                result += '_';\n            } else if (result.size() == 1) {\n                result += '-';\n            } else if (result[result.size() - 1] == '_') {\n                result += '-';\n            } else {\n                result += '_';\n            }\n        } else {\n            result += text[i];\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/141", "completion": "\n    // Write your code here\n    int count = 0;\n    for(int i=0;i<file_name.length();i++){\n        if(file_name[i]>='0' && file_name[i]<='9'){\n            count++;\n        }\n    }\n    if(count>3){\n        return \"No\";\n    }\n    int dot_index = file_name.find('.');\n    if(dot_index==-1){\n        return \"No\";\n    }\n    if(dot_index==0){\n        return \"No\";\n    }\n    if(file_name[dot_index-1]>='a' && file_name[dot_index-1]<='z' || file_name[dot_index-1]>='A' && file_name[dot_index-1]<='Z'){\n        if(file_name.substr(dot_index+1)==\"txt\" || file_name.substr(dot_index+1)==\"exe\" || file_name.substr(dot_index+1)==\"dll\"){\n            return \"Yes\";\n        }\n        else{\n            return \"No\";\n        }\n    }\n    else{\n        return \"No\";\n    }"}
{"task_id": "HumanEval/142", "completion": "\n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/143", "completion": "\n    std::vector<std::string> words;\n    std::istringstream iss(sentence);\n    std::string word;\n    while (iss >> word) {\n        words.push_back(word);\n    }\n    std::string result;\n    for (auto word : words) {\n        if (is_prime(word.size())) {\n            result += word + \" \";\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/144", "completion": "\n    // Fill this in.\n    int x_num = std::stoi(x.substr(0, x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    return (x_num * n_den) == (x_den * n_num);"}
{"task_id": "HumanEval/145", "completion": "\n    std::vector<long> res;\n    std::map<long, std::vector<long>> m;\n    for (int i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        while (nums[i] > 0) {\n            sum += nums[i] % 10;\n            nums[i] /= 10;\n        }\n        m[sum].push_back(nums[i]);\n    }\n    for (auto it = m.begin(); it!= m.end(); it++) {\n        for (int i = 0; i < it->second.size(); i++) {\n            res.push_back(it->second[i]);\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/146", "completion": "\n    long count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 10 && nums[i] % 10 == 1 && nums[i] % 100!= 11 && nums[i] % 100!= 13 && nums[i] % 100!= 15 && nums[i] % 100!= 17 && nums[i] % 100!= 19){\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/147", "completion": "\n    // Write your code here\n    long count = 0;\n    for(long i=1;i<=n;i++){\n        for(long j=i+1;j<=n;j++){\n            for(long k=j+1;k<=n;k++){\n                if((i*i+j*j)==(k*k)){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/148", "completion": "\n    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int index1 = -1, index2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n            index1 = i;\n        }\n        if (planets[i] == planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 == -1 || index2 == -1) {\n        return result;\n    }\n    for (int i = index1; i <= index2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;"}
{"task_id": "HumanEval/149", "completion": "\n    std::sort(lst.begin(), lst.end(), [](std::string a, std::string b) {\n        return a.size() < b.size();\n    });\n    std::sort(lst.begin(), lst.end());\n    return lst;"}
{"task_id": "HumanEval/150", "completion": "\n    if (n == 1)\n        return x;\n    else\n        return y;"}
{"task_id": "HumanEval/151", "completion": "\n    long sum = 0;\n    for (auto i : lst) {\n        if (i % 2!= 0) {\n            sum += i * i;\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/152", "completion": "\n    std::vector<long> result;\n    for (int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;"}
{"task_id": "HumanEval/153", "completion": "\n    std::string strongest_extension = \"\";\n    int strongest_strength = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n        int strength = 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                strength -= 1;\n            }\n            else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                strength += 1;\n            }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength = strength;\n            strongest_extension = extensions[i];\n        }\n        else if (strength == strongest_strength) {\n            if (extensions[i] < strongest_extension) {\n                strongest_extension = extensions[i];\n            }\n        }\n    }\n    return class_name + \".\" + strongest_extension;"}
{"task_id": "HumanEval/154", "completion": "\n    // Write your code here\n    if(a.find(b)!= std::string::npos)\n        return true;\n    else{\n        std::string temp = b;\n        for(int i = 0; i < b.size(); i++){\n            temp = temp.substr(1) + temp[0];\n            if(a.find(temp)!= std::string::npos)\n                return true;\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/155", "completion": "\n    long even_count = 0;\n    long odd_count = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num = num / 10;\n    }\n    return std::make_tuple(even_count, odd_count);"}
{"task_id": "HumanEval/156", "completion": "\n    std::string roman_numeral = \"\";\n    std::vector<std::string> roman_numerals = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    std::vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < values.size(); i++) {\n        while (number >= values[i]) {\n            roman_numeral += roman_numerals[i];\n            number -= values[i];\n        }\n    }\n    return roman_numeral;"}
{"task_id": "HumanEval/157", "completion": "\n    // Fill this in.\n    long sum = a + b + c;\n    long max = std::max(a, std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n    return (max * max) == (sum * sum) && (max * max)!= (min * min);"}
{"task_id": "HumanEval/158", "completion": "\n    std::string max_word = words[0];\n    int max_unique_chars = 0;\n    for (int i = 0; i < words.size(); i++) {\n        int unique_chars = 0;\n        for (int j = 0; j < words[i].size(); j++) {\n            if (words[i][j] >= 'a' && words[i][j] <= 'z') {\n                unique_chars++;\n            }\n        }\n        if (unique_chars > max_unique_chars) {\n            max_unique_chars = unique_chars;\n            max_word = words[i];\n        }\n    }\n    return max_word;"}
{"task_id": "HumanEval/159", "completion": "\n    std::vector<long> result;\n    if (number >= need) {\n        result.push_back(number);\n        result.push_back(remaining - (number - need));\n    } else {\n        result.push_back(need);\n        result.push_back(remaining - need);\n    }\n    return result;"}
{"task_id": "HumanEval/160", "completion": "\n    // assert(op.size() == operand.size() - 1);\n    std::stack<long> stk;\n    for (int i = 0; i < operand.size(); ++i) {\n        if (op[i] == \"+\") {\n            stk.push(stk.top() + operand[i]);\n        } else if (op[i] == \"-\") {\n            stk.push(stk.top() - operand[i]);\n        } else if (op[i] == \"*\") {\n            stk.push(stk.top() * operand[i]);\n        } else if (op[i] == \"//\") {\n            stk.push(stk.top() / operand[i]);\n        } else if (op[i] == \"**\") {\n            stk.push(stk.top() ** operand[i]);\n        }\n    }\n    return stk.top();"}
{"task_id": "HumanEval/161", "completion": "\n    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n            res+=s[i]-32;\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n            res+=s[i]+32;\n        }\n        else{\n            res+=s[i];\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/162", "completion": "\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::string md5_hash = std::string(md5(text));\n    return md5_hash;"}
{"task_id": "HumanEval/163", "completion": "\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;"}
