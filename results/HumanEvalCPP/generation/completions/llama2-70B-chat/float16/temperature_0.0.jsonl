{"task_id": "HumanEval/0", "completion": "\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            float diff = std::abs(numbers[i] - numbers[j]);\n            if (diff < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/1", "completion": "\n    std::vector<std::string> result;\n    std::stack<char> stack;\n    for (char c : paren_string) {\n        if (c == '(') {\n            stack.push('(');\n        } else if (c == ')') {\n            stack.pop();\n            if (stack.empty()) {\n                result.push_back(std::string(stack.top(), stack.size()));\n                stack.clear();\n            }\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/2", "completion": "\n    return number - (int)number;"}
{"task_id": "HumanEval/3", "completion": "\n    long balance = 0; // initialize balance to 0\n    for (long operation : operations) {\n        balance += operation; // update balance by operation\n        if (balance < 0) { // check if balance falls below 0\n            return true; // return true if balance falls below 0\n        }\n    }\n    return false; // return false if balance never falls below 0"}
{"task_id": "HumanEval/4", "completion": "\n    // Calculate the mean of the input vector\n    float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f) // sum\n                       / numbers.size();                                 // average\n\n    // Calculate the absolute difference between each element and the mean\n    std::vector<float> diffs(numbers.size());\n    std::transform(numbers.begin(), numbers.end(), diffs.begin(),\n                   [mean](float x) { return std::abs(x - mean); });\n\n    // Calculate the average of the absolute differences\n    return std::accumulate(diffs.begin(), diffs.end(), 0.0f)\n           / diffs.size();"}
{"task_id": "HumanEval/5", "completion": "\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        if (i != numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/6", "completion": "\n    // Your code here\n    std::vector<long> result;\n    for (const auto &group : std::vector<std::string>{std::string(paren_string).split(\" \")})) {\n        long max_depth = 0;\n        for (const auto &paren : group) {\n            if (paren == '(') {\n                max_depth++;\n            } else if (paren == ')') {\n                max_depth--;\n            }\n            if (max_depth < 0) {\n                max_depth = 0;\n            }\n        }\n        result.push_back(max_depth);\n    }\n    return result;"}
{"task_id": "HumanEval/7", "completion": "\n    std::vector<std::string> result;\n    for (const auto &s : strings) {\n        if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/8", "completion": "\n    if (numbers.empty()) {\n        return std::make_tuple(0, 1);\n    }\n    long sum = 0;\n    long product = 1;\n    for (auto num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return std::make_tuple(sum, product);"}
{"task_id": "HumanEval/9", "completion": "\n    std::vector<long> result;\n    long max_so_far = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        max_so_far = std::max(max_so_far, numbers[i]);\n        result.push_back(max_so_far);\n    }\n    return result;"}
{"task_id": "HumanEval/10", "completion": "\n    int n = string.size();\n    int max_len = 0;\n    int start = 0;\n    for (int i = 0; i < n; i++) {\n        int j = n - i - 1;\n        int len = i - start + 1;\n        if (string[i] == string[j]) {\n            max_len = len > max_len ? len : max_len;\n            start = i - (len - 1);\n        }\n    }\n    return string.substr(0, start) + string.substr(start, max_len).reverse() + string.substr(start + max_len);"}
{"task_id": "HumanEval/11", "completion": "\n    std::string result;\n    for (int i = 0; i < a.size(); i++) {\n        result.push_back(a[i] ^ b[i]);\n    }\n    return result;"}
{"task_id": "HumanEval/12", "completion": "\n    if (strings.empty()) {\n        return std::nullopt;\n    }\n    auto max_len = *std::max_element(strings.begin(), strings.end(),\n                                    [](const std::string& a, const std::string& b) {\n                                        return a.size() < b.size();\n                                    });\n    return *std::find(strings.begin(), strings.end(), max_len);"}
{"task_id": "HumanEval/13", "completion": "\n    if (a == 0 || b == 0) return 0;\n    return greatest_common_divisor(b, a % b);"}
{"task_id": "HumanEval/14", "completion": "\n    std::vector<std::string> result;\n    for (int i = 0; i <= string.size(); i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;"}
{"task_id": "HumanEval/15", "completion": "\n    std::string res;\n    for (long i = 0; i <= n; i++) {\n        res += std::to_string(i) + \" \";\n    }\n    return res;"}
{"task_id": "HumanEval/16", "completion": "\n    std::map<char, int> char_map;\n    for (char c : string) {\n        char_map[tolower(c)]++;\n    }\n    return char_map.size();"}
{"task_id": "HumanEval/17", "completion": "\n    std::vector<long> result;\n    int current_note = 0;\n    int current_beats = 0;\n    for (char c : music_string) {\n        if (c == 'o') {\n            current_note = 4;\n        } else if (c == 'o' && music_string[music_string.size() - 1] == '|') {\n            current_note = 2;\n        } else if (c == '.' && music_string[music_string.size() - 1] == '|') {\n            current_note = 1;\n        } else if (c == '|') {\n            current_beats += current_note;\n            result.push_back(current_beats);\n            current_note = 0;\n        }\n    }\n    result.push_back(current_beats);\n    return result;"}
{"task_id": "HumanEval/18", "completion": "\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        int j = i;\n        while (j < string.size() && substring[j - i] == string[j]) {\n            j++;\n        }\n        count += j - i;\n    }\n    return count;"}
{"task_id": "HumanEval/19", "completion": "\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        nums.push_back(item);\n    }\n    std::sort(nums.begin(), nums.end(), [](const std::string& a, const std::string& b) {\n        return std::stoi(a) < std::stoi(b);\n    });\n    std::string res;\n    for (const auto& num : nums) {\n        res += num + \" \";\n    }\n    return res.substr(0, res.size() - 1);"}
{"task_id": "HumanEval/20", "completion": "\n    // Base case: If there are only one or two elements in the vector, return them\n    if (numbers.size() <= 2) {\n        return std::make_tuple(numbers[0], numbers[1]);\n    }\n    // Sort the vector in ascending order\n    std::sort(numbers.begin(), numbers.end());\n    // Find the closest pair of elements\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index1 = -1;\n    float min_diff_index2 = -1;\n    for (int i = 1; i < numbers.size(); i++) {\n        float diff = std::abs(numbers[i] - numbers[i - 1]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index1 = i - 1;\n            min_diff_index2 = i;\n        }\n    }\n    // Return the closest pair of elements\n    return std::make_tuple(numbers[min_diff_index1], numbers[min_diff_index2]);"}
{"task_id": "HumanEval/21", "completion": "\n    assert(numbers.size() >= 2, \"Vector must have at least two elements\");\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n    float range = max_val - min_val;\n    std::vector<float> rescaled(numbers.size());\n    for (int i = 0; i < numbers.size(); i++) {\n        rescaled[i] = (numbers[i] - min_val) / range;\n    }\n    return rescaled;"}
{"task_id": "HumanEval/22", "completion": "\n    std::vector<long> integers;\n    for (const auto &value : values) {\n        if (std::holds_alternative<long>(value)) {\n            integers.push_back(std::get<long>(value));\n        }\n    }\n    return integers;"}
{"task_id": "HumanEval/23", "completion": "\n    return string.size();"}
{"task_id": "HumanEval/24", "completion": "\n    if (n == 1) return 1;\n    long m = n;\n    while (m % 2 == 0) {\n        m /= 2;\n    }\n    return m * 2;"}
{"task_id": "HumanEval/25", "completion": "\n    std::vector<long> factors;\n    for (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) factors.push_back(n);\n    return factors;"}
{"task_id": "HumanEval/26", "completion": "\n    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n    for (auto num : numbers) {\n        if (std::find(result.begin(), result.end(), num) == result.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/27", "completion": "\n    for (int i = 0; i < string.size(); i++) {\n        if (std::islower(string[i])) {\n            string[i] = std::toupper(string[i]);\n        } else if (std::isupper(string[i])) {\n            string[i] = std::tolower(string[i]);\n        }\n    }\n    return string;"}
{"task_id": "HumanEval/28", "completion": "\n    std::string result;\n    for (const auto &s : strings) {\n        result += s;\n    }\n    return result;"}
{"task_id": "HumanEval/29", "completion": "\n    std::vector<std::string> result;\n    for (const auto &s : strings) {\n        if (s.size() >= prefix.size() && std::equal(s.begin(), s.begin() + prefix.size(), prefix.begin())) {\n            result.push_back(s);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/30", "completion": "\n    std::vector<long> res;\n    for (long x : l) {\n        if (x > 0) {\n            res.push_back(x);\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/31", "completion": "\n    if (n <= 1) return false;\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;"}
{"task_id": "HumanEval/33", "completion": "\n    std::vector<long> l_copy = l;\n    for (int i = 0; i < l.size(); i += 3) {\n        std::sort(l_copy.begin() + i, l_copy.begin() + i + 3);\n    }\n    return l_copy;"}
{"task_id": "HumanEval/34", "completion": "\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;"}
{"task_id": "HumanEval/35", "completion": "\n    return *std::max_element(l.begin(), l.end());"}
{"task_id": "HumanEval/36", "completion": "\n    long count = 0;\n    for (long i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/37", "completion": "\n    std::vector<long> l_sorted(l.size());\n    for (int i = 0; i < l.size(); i += 2) {\n        l_sorted[i] = l[i];\n        if (i + 1 < l.size()) {\n            l_sorted[i + 1] = l[i + 1];\n        }\n    }\n    return l_sorted;"}
{"task_id": "HumanEval/39", "completion": "\n    if (n == 1) return 2;\n    long a = 0, b = 1, c = 0;\n    for (long i = 0; i < n - 1; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return c;"}
{"task_id": "HumanEval/40", "completion": "\n    // your code here\n    return false;"}
{"task_id": "HumanEval/41", "completion": "\n    // Your code here\n    return 0;"}
{"task_id": "HumanEval/42", "completion": "\n    for (int i = 0; i < l.size(); i++) {\n        l[i]++;\n    }\n    return l;"}
{"task_id": "HumanEval/43", "completion": "\n    // your code here\n    return false;"}
{"task_id": "HumanEval/44", "completion": "\n    std::string res;\n    do {\n        long rem = x % base;\n        x /= base;\n        res = std::to_string(rem) + res;\n    } while (x > 0);\n    return res;"}
{"task_id": "HumanEval/45", "completion": "\n    // Write your code here\n    return (a * h) / 2;"}
{"task_id": "HumanEval/46", "completion": "\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 0; i < n; i++) {\n        long temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n    return d;"}
{"task_id": "HumanEval/47", "completion": "\n    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[n / 2];\n    }"}
{"task_id": "HumanEval/48", "completion": "\n    int left = 0;\n    int right = text.size() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;"}
{"task_id": "HumanEval/49", "completion": "\n    if (n == 0) return 0;\n    long x = n;\n    while (x >= p) x -= p;\n    return x;"}
{"task_id": "HumanEval/51", "completion": "\n    std::string result;\n    for (char c : text) {\n        if (!std::isalpha(c)) {\n            result.push_back(c);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/52", "completion": "\n    for (long x : l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y;"}
{"task_id": "HumanEval/54", "completion": "\n    return std::equal(s0.begin(), s0.end(), s1.begin(), s1.end());"}
{"task_id": "HumanEval/55", "completion": "\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    return fib(n - 1) + fib(n - 2);"}
{"task_id": "HumanEval/56", "completion": "\n    int open_count = 0;\n    for (char c : brackets) {\n        if (c == '<') {\n            open_count++;\n        } else if (c == '>') {\n            open_count--;\n        }\n    }\n    return open_count == 0;"}
{"task_id": "HumanEval/57", "completion": "\n    if (l.size() <= 1) return true;\n    long prev = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        long cur = l[i];\n        if (cur < prev) return false;\n        prev = cur;\n    }\n    return true;"}
{"task_id": "HumanEval/58", "completion": "\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> res;\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::inserter(res, res.begin()));\n    return res;"}
{"task_id": "HumanEval/59", "completion": "\n    if (n <= 1) return 0; // not a prime\n    long sqrt_n = sqrt(n);\n    long i = 2;\n    while (i <= sqrt_n) {\n        if (n % i == 0) {\n            long factor = i;\n            while (n % factor == 0) {\n                n /= factor;\n                i *= factor;\n            }\n            return factor;\n        }\n        i++;\n    }\n    return n; // n is a prime"}
{"task_id": "HumanEval/60", "completion": "\n    return (n * (n + 1)) / 2;"}
{"task_id": "HumanEval/61", "completion": "\n    int count = 0;\n    for (char c : brackets) {\n        if (c == '(') {\n            count++;\n        } else if (c == ')') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;"}
{"task_id": "HumanEval/62", "completion": "\n    std::vector<long> ys;\n    for (int i = 0; i < xs.size(); i++) {\n        long x = xs[i];\n        ys.push_back(x * (i + 1));\n    }\n    return ys;"}
{"task_id": "HumanEval/63", "completion": "\n    long a = 0, b = 0, c = 1;\n    for (long i = 0; i < n; i++) {\n        a = b;\n        b = c;\n        c = a + b + c;\n    }\n    return c;"}
{"task_id": "HumanEval/64", "completion": "\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            count++;\n        }\n        if (s[i] == 'y' && i == s.size() - 1) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/65", "completion": "\n    std::string str = std::to_string(x);\n    int n = str.size();\n    shift %= n;\n    if (shift == 0) return str;\n    if (shift > n / 2) {\n        shift = n - shift;\n        str = str.substr(n - shift) + str.substr(0, n - shift);\n    } else {\n        str = str.substr(shift) + str.substr(0, shift);\n    }\n    return str;"}
{"task_id": "HumanEval/66", "completion": "\n    long sum = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            sum += (s[i] - 'A' + 10);\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/67", "completion": "\n    // Write your code here\n    long apples = get_num_apples(s);\n    long oranges = get_num_oranges(s);\n    return n - apples - oranges;"}
{"task_id": "HumanEval/68", "completion": "\n    // your code here\n    std::sort(arr.begin(), arr.end(), [](const long& a, const long& b) {\n        return a % 2 == 0 && b % 2 != 0;\n    });\n    return {arr[0], 0};"}
{"task_id": "HumanEval/69", "completion": "\n    long max_freq = 0;\n    long max_val = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long freq = 0;\n        for (long j = i + 1; j < lst.size(); j++) {\n            if (lst[i] == lst[j]) {\n                freq++;\n            }\n        }\n        if (freq > max_freq) {\n            max_freq = freq;\n            max_val = lst[i];\n        }\n    }\n    return max_val;"}
{"task_id": "HumanEval/70", "completion": "\n    if (lst.size() == 0) {\n        return lst;\n    }\n    std::vector<long> res;\n    long min = *std::min_element(lst.begin(), lst.end());\n    long max = *std::max_element(lst.begin(), lst.end());\n    res.push_back(min);\n    res.push_back(max);\n    std::vector<long> rest = lst;\n    rest.erase(std::remove(rest.begin(), rest.end(), min), rest.end());\n    rest.erase(std::remove(rest.begin(), rest.end(), max), rest.end());\n    res.insert(res.end(), rest.begin(), rest.end());\n    return res;"}
{"task_id": "HumanEval/71", "completion": "\n    if (a + b > c && a + c > b && b + c > a) {\n        float s = (a * (b - c)) / 2;\n        return round(s * 100) / 100;\n    }\n    return -1;"}
{"task_id": "HumanEval/72", "completion": "\n    // TO DO: implement your solution here\n    return false;"}
{"task_id": "HumanEval/73", "completion": "\n    int n = arr.size();\n    long min_change = n;\n    for (int i = 0; i < n; i++) {\n        long max_here = arr[i];\n        for (int j = i + 1; j < n; j++) {\n            if (arr[j] > max_here) {\n                max_here = arr[j];\n            }\n        }\n        min_change = std::min(min_change, max_here - arr[i]);\n    }\n    return min_change;"}
{"task_id": "HumanEval/74", "completion": "\n    int sum1 = 0;\n    for (auto str : lst1) {\n        sum1 += str.size();\n    }\n    int sum2 = 0;\n    for (auto str : lst2) {\n        sum2 += str.size();\n    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else if (sum1 > sum2) {\n        return lst2;\n    } else {\n        return lst1;\n    }"}
{"task_id": "HumanEval/75", "completion": "\n    if (a <= 1) return false;\n    for (long i = 2; i < 100; i++) {\n        if (a % i == 0) {\n            long j = a / i;\n            if (j % i == 0) {\n                long k = j / i;\n                if (k % i == 0) return true;\n            }\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/76", "completion": "\n    if (x == 0) return false;\n    return (x == pow(n, (int)log2(x)));"}
{"task_id": "HumanEval/77", "completion": "\n    // Your code here\n    return (a > 0) && (a % (a >> 1) == 0);"}
{"task_id": "HumanEval/78", "completion": "\n    // TO DO: \n    // Write your code here\n    // Example:\n    // long result = 0;\n    // for (int i = 0; i < num.size(); i++) {\n    //     if (is_prime(num[i])) {\n    //         result++;\n    //     }\n    // }\n    // return result;"}
{"task_id": "HumanEval/79", "completion": "\n    // Your code here\n    std::string binary = \"\";\n    while (decimal != 0) {\n        binary = (decimal % 2 == 0) ? \"0\" : \"1\";\n        decimal /= 2;\n        binary = binary + binary;\n    }\n    return \"db\" + binary + \"db\";"}
{"task_id": "HumanEval/80", "completion": "\n    if (s.size() < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.size() - 2; i += 3) {\n        if (s[i] == s[i + 1] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/81", "completion": "\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;"}
{"task_id": "HumanEval/82", "completion": "\n    int n = string.size();\n    if (n == 0) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;"}
{"task_id": "HumanEval/83", "completion": "\n    // if n is 1, then there is only one number that starts and ends with 1\n    // i.e. 1\n    if (n == 1) return 1;\n    // if n is 2, then there are two numbers that start with 1\n    // i.e. 10 and 11\n    if (n == 2) return 2;\n    // if n is 3, then there are three numbers that start with 1\n    // i.e. 100, 101, 110\n    if (n == 3) return 3;\n    // if n is 4, then there are four numbers that start with 1\n    // i.e. 1000, 1001, 1010, 1100\n    if (n == 4) return 4;\n    // if n is 5, then there are five numbers that start with 1\n    // i.e. 10000, 10001, 10010, 10100, 11000\n    if (n == 5) return 5;\n    // if n is 6, then there are six numbers that start with 1\n    // i.e. 100000, 100001, 100010, 100100, 101000, 110000\n    if (n == 6) return 6;\n    // if n is 7, then there are seven numbers that start with 1\n    // i.e. 1000000, 1000001, 1000010, 1000100, 1001000, 1010000, 1100000\n    if (n == 7) return 7;\n    // if n is 8, then there are eight numbers that start with 1\n    // i.e. 10000000, 10000001, "}
{"task_id": "HumanEval/84", "completion": "\n    std::string res;\n    while (N > 0) {\n        res = (N % 2 == 0 ? \"0\" : \"1\") + res;\n        N /= 2;\n    }\n    return res;"}
{"task_id": "HumanEval/85", "completion": "\n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/86", "completion": "\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n    std::string word;\n    while (std::getline(ss, word, ' ')) {\n        std::sort(word.begin(), word.end());\n        words.push_back(word);\n    }\n    std::string res;\n    for (const auto &word : words) {\n        res += word + \" \";\n    }\n    res.pop_back(); // remove extra space\n    return res;"}
{"task_id": "HumanEval/87", "completion": "\n    std::vector<std::tuple<long, long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() == 0) continue;\n        std::vector<long> row = lst[i];\n        std::sort(row.begin(), row.end(), std::greater<long>());\n        for (int j = 0; j < row.size(); j++) {\n            if (row[j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::tie(a.first, a.second) < std::tie(b.first, b.second);\n    });\n    return res;"}
{"task_id": "HumanEval/88", "completion": "\n    // Write your code here\n    int n = array.size();\n    if (n == 0) return array;\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.begin(), array.end(), greater<long>());\n    }\n    return array;"}
{"task_id": "HumanEval/89", "completion": "\n    std::string result;\n    for (char c : s) {\n        int index = c - 'a';\n        index = (index + 2 * (index % 2 == 0 ? 1 : 0)) % 26;\n        result.push_back('a' + index);\n    }\n    return result;"}
{"task_id": "HumanEval/90", "completion": "\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min_val = *std::min_element(lst.begin(), lst.end());\n    long sec_min_val = *std::min_element(lst.begin() + 1, lst.end() - 1);\n    if (sec_min_val > min_val) {\n        return std::optional<long>{sec_min_val};\n    }\n    return std::nullopt;"}
{"task_id": "HumanEval/91", "completion": "\n    long count = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/92", "completion": "\n    // Check if x is equal to y + z\n    if (x == y + z) {\n        return true;\n    }\n    // Check if y is equal to x + z\n    if (y == x + z) {\n        return true;\n    }\n    // Check if z is equal to x + y\n    if (z == x + y) {\n        return true;\n    }\n    // If none of the above conditions are true, return false\n    return false;"}
{"task_id": "HumanEval/93", "completion": "\n    std::string result;\n    for (char c : message) {\n        if (std::isalpha(c)) {\n            if (std::isupper(c)) {\n                result.push_back(std::tolower(c));\n            } else {\n                result.push_back(std::toupper(c));\n            }\n        } else {\n            int index = std::distance(message.begin(), &c);\n            index = (index + 2) % 5;\n            result.push_back(std::tolower(message[index]));\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/94", "completion": "\n    long max_prime = 0;\n    long sum = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max_prime) {\n            max_prime = lst[i];\n        }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] == max_prime) {\n            sum += digits(lst[i]);\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/95", "completion": "\n    if (dict.empty()) return false;\n    std::string first_key = dict.begin()->first;\n    if (std::islower(first_key[0])) {\n        for (const auto& p : dict) {\n            if (!std::islower(p.first[0])) return false;\n        }\n        return true;\n    } else if (std::isupper(first_key[0])) {\n        for (const auto& p : dict) {\n            if (!std::isupper(p.first[0])) return false;\n        }\n        return true;\n    }\n    return false;"}
{"task_id": "HumanEval/96", "completion": "\n    std::vector<long> primes;\n    for (long i = 2; i < n; i++) {\n        bool is_prime = true;\n        for (long j = 2; j < i; j++) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n    }\n    return primes;"}
{"task_id": "HumanEval/97", "completion": "\n    // Your code here\n    return (a%10)*(b%10);"}
{"task_id": "HumanEval/98", "completion": "\n    long count = 0;\n    for (int i = 0; i < s.size(); i += 2) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/99", "completion": "\n    double d = std::stod(value);\n    int i = (int)d;\n    double diff = fabs(d - i);\n    if (diff == 0.5) {\n        // equidistant from two integers, round away from zero\n        return i + (d > 0 ? 1 : -1);\n    }\n    return i;"}
{"task_id": "HumanEval/100", "completion": "\n    // base case\n    if (n == 0) return std::vector<long>{};\n    // calculate the number of stones in the first level\n    long first_level = n;\n    // calculate the number of stones in the second level\n    long second_level = (n & 1) == 0 ? n + 2 : n + 1;\n    // calculate the number of stones in the remaining levels\n    std::vector<long> remaining_levels(n - 1, 0);\n    for (long i = 2; i <= n; i++) {\n        remaining_levels[i - 1] = (i & 1) == 0 ? remaining_levels[i - 2] + 2 : remaining_levels[i - 2] + 1;\n    }\n    // return the vector of stones in each level\n    return {first_level, second_level} + remaining_levels;"}
{"task_id": "HumanEval/101", "completion": "\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n    std::string word;\n    while (std::getline(ss, word, ',')) {\n        result.push_back(word);\n    }\n    return result;"}
{"task_id": "HumanEval/102", "completion": "\n    // Your code here\n    long ans = -1;\n    for (long i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            ans = i;\n            break;\n        }\n    }\n    return ans;"}
{"task_id": "HumanEval/103", "completion": "\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n    return Union_std_string_long(binary);"}
{"task_id": "HumanEval/104", "completion": "\n    // your code here\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 != 0) {\n            res.push_back(x[i]);\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/105", "completion": "\n    std::vector<std::string> result;\n    if (arr.empty()) return result;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 1; i <= 9; i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[j] == i) count++;\n        }\n        std::string str = std::to_string(i);\n        for (int j = 0; j < count; j++) {\n            result.push_back(str);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/106", "completion": "\n    std::vector<long> res(n);\n    for (long i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            res[i - 1] = i * (i - 1) / 2;\n        } else {\n            res[i - 1] = 1 + 2 + ... + i;\n        }\n    }\n    return res;"}
{"task_id": "HumanEval/107", "completion": "\n    // Write your code here\n    long even_palindrome = 0;\n    long odd_palindrome = 0;\n    for (long i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                even_palindrome++;\n            } else {\n                odd_palindrome++;\n            }\n        }\n    }\n    return std::make_tuple(even_palindrome, odd_palindrome);"}
{"task_id": "HumanEval/108", "completion": "\n    long count = 0;\n    for (long num : arr) {\n        long sum = 0;\n        while (num != 0) {\n            sum += (num % 10);\n            num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/109", "completion": "\n    int n = arr.size();\n    if (n == 0) return true; // empty vector is always sorted\n    // check if the vector is already sorted\n    if (std::is_sorted(arr.begin(), arr.end())) return true;\n    // if the first element is greater than the second element,\n    // then it is not possible to get a sorted vector\n    if (arr[0] > arr[1]) return false;\n    // perform right shifts until the vector is sorted\n    while (!std::is_sorted(arr.begin(), arr.end())) {\n        // shift all elements one position to the right\n        std::rotate(arr.begin(), arr.begin() + 1, arr.end());\n        // check if the vector is sorted now\n        if (std::is_sorted(arr.begin(), arr.end())) break;\n    }\n    return true;"}
{"task_id": "HumanEval/110", "completion": "\n    // Your code here\n    int n = lst1.size();\n    int m = lst2.size();\n    int even_count = 0;\n    for (int i = 0; i < n; i++) {\n        if (lst1[i] % 2 == 0) {\n            even_count++;\n        }\n    }\n    if (even_count == n) {\n        return \"YES\";\n    }\n    for (int i = 0; i < m; i++) {\n        if (lst2[i] % 2 == 0) {\n            even_count++;\n        }\n    }\n    if (even_count == n) {\n        return \"YES\";\n    }\n    return \"NO\";"}
{"task_id": "HumanEval/111", "completion": "\n    std::map<std::string,long> freq;\n    for (auto c : test) {\n        if (freq.find(c) == freq.end()) {\n            freq[c] = 1;\n        } else {\n            freq[c] += 1;\n        }\n    }\n    return freq;"}
{"task_id": "HumanEval/112", "completion": "\n    // Your code here\n    std::string result;\n    for (char i : s) {\n        if (std::find(c.begin(), c.end(), i) == c.end()) {\n            result.push_back(i);\n        }\n    }\n    return std::make_tuple(result, is_palindrome(result));"}
{"task_id": "HumanEval/113", "completion": "\n    std::vector<std::string> result;\n    for (const auto &s : lst) {\n        int odd_count = std::count_if(s.begin(), s.end(), [](char c) { return c % 2 == 1; });\n        result.push_back(std::to_string(odd_count) + \"n the string \" + std::to_string(s.size()) + \" of the input.\");\n    }\n    return result;"}
{"task_id": "HumanEval/114", "completion": "\n    long n = nums.size();\n    long dp[n + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[0] = 0;\n    for (long i = 1; i <= n; i++) {\n        dp[i] = std::min(dp[i - 1], dp[i - 1] + nums[i - 1]);\n    }\n    return *std::min_element(dp, dp + n + 1);"}
{"task_id": "HumanEval/115", "completion": "\n    int n = grid.size();\n    int m = grid[0].size();\n    long ans = 0;\n    std::vector<long> bucket(n, 0);\n    std::vector<long> remain(n, 0);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                remain[i] += 1;\n            }\n        }\n    }\n    while (true) {\n        long max_bucket = -1;\n        for (int i = 0; i < n; i++) {\n            if (bucket[i] < capacity && remain[i] > 0) {\n                max_bucket = std::max(max_bucket, remain[i]);\n            }\n        }\n        if (max_bucket == -1) {\n            break;\n        }\n        for (int i = 0; i < n; i++) {\n            if (bucket[i] < capacity && remain[i] > 0) {\n                remain[i] -= max_bucket;\n                bucket[i] += max_bucket;\n                ans++;\n            }\n        }\n    }\n    return ans;"}
{"task_id": "HumanEval/116", "completion": "\n    // Your code here\n    std::sort(arr.begin(), arr.end(), [](const long& a, const long& b) {\n        int cnt_a = __builtin_popcount(a);\n        int cnt_b = __builtin_popcount(b);\n        if (cnt_a != cnt_b) {\n            return cnt_a < cnt_b;\n        }\n        return a < b;\n    });\n    return arr;"}
{"task_id": "HumanEval/117", "completion": "\n    std::vector<std::string> ans;\n    int cnt = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ' || s[i] == '\\t' || s[i] == '\\n' || s[i] == '\\r') {\n            if (cnt == n) {\n                ans.push_back(s.substr(i - cnt, cnt));\n                cnt = 0;\n            }\n        } else {\n            cnt++;\n        }\n    }\n    if (cnt == n) {\n        ans.push_back(s.substr(s.size() - cnt, cnt));\n    }\n    return ans;"}
{"task_id": "HumanEval/118", "completion": "\n    int i = 0;\n    for (char c : word) {\n        if (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c == 'U') {\n            break;\n        }\n        i++;\n    }\n    if (i == word.size()) {\n        return \"\";\n    }\n    return word[i];"}
{"task_id": "HumanEval/119", "completion": "\n    int l = lst.size();\n    if (l < 2) return \"No\";\n    std::string s1 = lst[0];\n    std::string s2 = lst[1];\n    int c1 = s1.size();\n    int c2 = s2.size();\n    int open1 = 0, open2 = 0, close1 = 0, close2 = 0;\n    for (int i = 0; i < c1; i++) {\n        if (s1[i] == '(') open1++;\n        else if (s1[i] == ')') close1++;\n    }\n    for (int i = 0; i < c2; i++) {\n        if (s2[i] == '(') open2++;\n        else if (s2[i] == ')') close2++;\n    }\n    if (open1 == close1 && open2 == close2) return \"Yes\";\n    if (open1 < close1 || open2 < close2) return \"No\";\n    int min_open = std::min(open1, open2);\n    int min_close = std::min(close1, close2);\n    if (min_open > min_close) return \"No\";\n    std::string res;\n    for (int i = 0; i < min_open; i++) {\n        res += '(';\n    }\n    res += s1.substr(0, c1 - min_close) + s2.substr(0, c2 - min_close);\n    for (int i = 0; i < min_close; i++) {\n        res += ')';\n    }\n    return res;"}
{"task_id": "HumanEval/120", "completion": "\n    // Your code here\n    std::sort(arr.begin(), arr.end());\n    return arr.substr(0, k);"}
{"task_id": "HumanEval/121", "completion": "\n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/122", "completion": "\n    long sum = 0;\n    for (long i = 0; i < k; i++) {\n        long x = arr[i];\n        if (x >= 10) {\n            sum += x / 10;\n        }\n        sum += x % 10;\n    }\n    return sum;"}
{"task_id": "HumanEval/123", "completion": "\n    std::vector<long> res;\n    long curr = n;\n    while (curr != 1) {\n        if (curr % 2 == 0) {\n            curr /= 2;\n        } else {\n            curr = 3 * curr + 1;\n        }\n        res.push_back(curr);\n    }\n    res.push_back(1);\n    std::sort(res.begin(), res.end());\n    return res;"}
{"task_id": "HumanEval/124", "completion": "\n    // Write your code here\n    int day, month, year;\n    std::stringstream ss(date);\n    ss >> month >> day >> year;\n    if (ss.fail()) return false;\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > (month == 2 ? 29 : month == 4 || month == 6 || month == 9 || month == 11 ? 30 : 31)) return false;\n    if (year < 1 || year > 2000 + 12 * (month - 1)) return false;\n    return true;"}
{"task_id": "HumanEval/125", "completion": "\n    // Write your code here\n    std::vector<std::string> vec;\n    long count = 0;\n    for (char c : txt) {\n        if (std::isspace(c)) {\n            count++;\n        } else if (c == ',') {\n            vec.push_back(std::string(txt.begin() + count, txt.begin() + count + 1));\n            count = 0;\n        } else {\n            if (count % 2 == 1) {\n                vec.push_back(std::string(txt.begin() + count, txt.begin() + count + 1));\n            }\n            count++;\n        }\n    }\n    if (count % 2 == 1) {\n        vec.push_back(std::string(txt.begin() + count, txt.end()));\n    }\n    return Union_std_vector_std_string__long(vec);"}
{"task_id": "HumanEval/126", "completion": "\n    if (lst.size() <= 1) return true;\n    // check if there are any duplicates\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) return false;\n    }\n    // check if the vector is sorted\n    for (int i = 1; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;"}
{"task_id": "HumanEval/127", "completion": "\n    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    long intersection_start = std::max(start1, start2);\n    long intersection_end = std::min(end1, end2);\n    long intersection_length = intersection_end - intersection_start + 1;\n    if (intersection_length > 0) {\n        for (long i = 2; i <= intersection_length; i++) {\n            if (intersection_length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n    return \"NO\";"}
{"task_id": "HumanEval/128", "completion": "\n    if (arr.empty()) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    for (long num : arr) {\n        sum += std::abs(num) * (num > 0 ? 1 : num < 0 ? -1 : 0);\n    }\n    return sum;"}
{"task_id": "HumanEval/129", "completion": "\n    int N = grid.size();\n    std::vector<std::vector<long>> dist(N, std::vector<long>(N, 0));\n    std::vector<std::vector<long>> parent(N, std::vector<long>(N, -1));\n    std::vector<long> ans;\n    long ans_cost = LLONG_MAX;\n    std::queue<std::vector<long>> q;\n    q.push(std::vector<long>(N, 0));\n    dist[0][0] = 0;\n    for (int i = 1; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            if (grid[i][j] == 0) continue;\n            dist[i][j] = dist[i - 1][j] + 1;\n            parent[i][j] = i - 1;\n        }\n    }\n    while (!q.empty()) {\n        std::vector<long> cur = q.front();\n        q.pop();\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                if (cur[i][j] == 0) continue;\n                long cost = dist[i][j] + 1;\n                if (cost < dist[i][j]) {\n                    dist[i][j] = cost;\n                    parent[i][j] = cur[i][j];\n                }\n            }\n        }\n    }\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            if (dist[i][j] == k) {\n                ans.clear();\n                ans.push_back(grid[i][j]);\n                int p = parent[i][j];\n                while (p != -1) {\n                    ans.push_back(grid[p][parent[p][j]]);\n                    p = parent[p][parent[p][j]];\n                }\n                return ans;\n            }\n        }\n    }\n    return ans"}
{"task_id": "HumanEval/130", "completion": "\n    // Write your code here\n    std::vector<long> result;\n    result.push_back(3);\n    result.push_back(1);\n    result.push_back(2);\n    for (long i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            result.push_back(1 + i / 2);\n        } else {\n            result.push_back(tri(i - 1) + tri(i - 2) + tri(i + 1));\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/131", "completion": "\n    long res = 0;\n    while (n != 0) {\n        if (n % 2 == 1) {\n            res *= n % 10;\n        }\n        n /= 10;\n    }\n    return res;"}
{"task_id": "HumanEval/132", "completion": "\n    int count = 0;\n    int nested = 0;\n    for (char c : string) {\n        if (c == '[') {\n            count++;\n            nested++;\n        } else if (c == ']') {\n            count--;\n            if (count < 0) {\n                return true;\n            }\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/133", "completion": "\n    // Your code here\n    std::vector<int> vec;\n    for(auto x: lst)\n    {\n        vec.push_back((int)ceil(x));\n    }\n    int sum=0;\n    for(auto x: vec)\n    {\n        sum+=(x*x);\n    }\n    return sum;"}
{"task_id": "HumanEval/134", "completion": "\n    // Check if the last character of the given string is a space\n    // If it is, return false\n    if (txt[txt.size() - 1] == ' ') {\n        return false;\n    }\n    // Check if the last character of the given string is a letter\n    // If it is, check if it is a part of a word\n    // If it is not a part of a word, return true\n    // otherwise, return false\n    else if (std::isalpha(txt[txt.size() - 1])) {\n        // Check if the character before the last character is a space\n        // If it is, return true\n        // otherwise, return false\n        return (txt[txt.size() - 2] == ' ');\n    }\n    // If the last character is not a letter or a space, return false\n    return false;"}
{"task_id": "HumanEval/135", "completion": "\n    long n = arr.size();\n    if (n == 0) return -1;\n    long max_idx = -1;\n    for (long i = 1; i < n; i++) {\n        if (arr[i] >= arr[i - 1]) {\n            max_idx = i - 1;\n        }\n    }\n    return max_idx;"}
{"task_id": "HumanEval/136", "completion": "\n    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n    }\n    long max_neg = -1;\n    long min_pos = INT_MAX;\n    for (long x : lst) {\n        if (x < 0) {\n            if (x > max_neg) {\n                max_neg = x;\n            }\n        } else {\n            if (x < min_pos) {\n                min_pos = x;\n            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_neg), std::optional<long>(min_pos));"}
{"task_id": "HumanEval/137", "completion": "\n    if (a == b) return std::nullopt;\n    if (a.f0 > b.f0) return a;\n    if (a.f1 > b.f1) return a;\n    if (a.f2 > b.f2) return a;\n    return b;"}
{"task_id": "HumanEval/138", "completion": "\n    // if n is less than or equal to 4, it cannot be written as the sum of exactly 4 positive even numbers\n    if (n <= 4) return false;\n    // if n is odd, it cannot be written as the sum of exactly 4 positive even numbers\n    if (n % 2 != 0) return false;\n    // if n is greater than or equal to 8, it can be written as the sum of exactly 4 positive even numbers\n    return true;"}
{"task_id": "HumanEval/139", "completion": "\n    if (n == 0) {\n        return 1;\n    }\n    long result = n * (n - 1) * (n - 2) * special_factorial(n - 3);\n    return result;"}
{"task_id": "HumanEval/140", "completion": "\n    std::string result;\n    bool prev_is_space = false;\n    for (char c : text) {\n        if (c == ' ') {\n            if (prev_is_space) {\n                result.push_back('-');\n            } else {\n                result.push_back('_');\n                prev_is_space = true;\n            }\n        } else {\n            result.push_back(c);\n            prev_is_space = false;\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/141", "completion": "\n    // Check if there are more than three digits in the file name\n    if (std::count_if(file_name.begin(), file_name.end(), [](char c) {\n            return c >= '0' && c <= '9';\n        }) > 3) {\n        return \"No\";\n    }\n    \n    // Check if there is exactly one dot in the file name\n    if (std::count_if(file_name.begin(), file_name.end(), [](char c) {\n            return c == '.';\n        }) != 1) {\n        return \"No\";\n    }\n    \n    // Check if the substring before the dot is not empty and starts with a letter\n    std::string before_dot = file_name.substr(0, file_name.find('.'));\n    if (before_dot.empty() || !std::isalpha(before_dot[0])) {\n        return \"No\";\n    }\n    \n    // Check if the substring after the dot is one of the allowed extensions\n    std::string after_dot = file_name.substr(file_name.find('.') + 1);\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") {\n        return \"No\";\n    }\n    \n    return \"Yes\";"}
{"task_id": "HumanEval/142", "completion": "\n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        long x = lst[i];\n        if (i % 3 == 0) {\n            x *= x;\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            x *= x * x;\n        }\n        sum += x;\n    }\n    return sum;"}
{"task_id": "HumanEval/143", "completion": "\n    std::vector<std::string> words;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (std::getline(ss, word, ' ')) {\n        if (is_prime(word.size())) {\n            words.push_back(word);\n        }\n    }\n    return std::string(words.begin(), words.end());"}
{"task_id": "HumanEval/144", "completion": "\n    int a = stoi(x);\n    int b = stoi(n);\n    int c = a * b;\n    int d = c / b;\n    return (d == a);"}
{"task_id": "HumanEval/145", "completion": "\n    // Your code here\n    std::vector<long> result;\n    std::map<long, int> points;\n    for (int i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < 10; j++) {\n            sum += (nums[i] / (10 * j)) % 10;\n        }\n        points[sum] = i;\n    }\n    for (auto it = points.begin(); it != points.end(); it++) {\n        result.push_back(nums[it->second]);\n    }\n    return result;"}
{"task_id": "HumanEval/146", "completion": "\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && (num / 10) % 2 == 1 && (num % 10) % 2 == 1) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/147", "completion": "\n    vector<long> a(n);\n    for (long i = 1; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n            for (long k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/148", "completion": "\n    // assert(planet1 != \"Mercury\" && planet1 != \"Venus\" && planet1 != \"Earth\" && planet1 != \"Mars\" && planet1 != \"Jupiter\" && planet1 != \"Saturn\" && planet1 != \"Uranus\" && planet1 != \"Neptune\", \"Invalid planet name\");\n    // assert(planet2 != \"Mercury\" && planet2 != \"Venus\" && planet2 != \"Earth\" && planet2 != \"Mars\" && planet2 != \"Jupiter\" && planet2 != \"Saturn\" && planet2 != \"Uranus\" && planet2 != \"Neptune\", \"Invalid planet name\");\n    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::sort(planets.begin(), planets.end(), [](const std::string& a, const std::string& b) {\n        return a < b;\n    });\n    auto it1 = std::find(planets.begin(), planets.end(), planet1);\n    auto it2 = std::find(planets.begin(), planets.end(), planet2);\n    if (it1 == planets.end() || it2 == planets.end()) {\n        return std::vector<std::string>();\n    }\n    std::vector<std::string> result;\n    for (auto it = it1; it != it2; ++it) {\n        result.push_back(*it);\n    }\n    return result;"}
{"task_id": "HumanEval/149", "completion": "\n    // your code here\n    std::sort(lst.begin(), lst.end(), [](const std::string& a, const std::string& b) {\n        if (a.size() != b.size()) {\n            return a.size() < b.size();\n        }\n        return a < b;\n    });\n    lst.erase(std::remove_if(lst.begin(), lst.end(), [](const std::string& a) {\n        return a.size() % 2 == 1;\n    }), lst.end());\n    return lst;"}
{"task_id": "HumanEval/150", "completion": "\n    if (n == 1) return y;\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i == 0) return x;\n    }\n    return y;"}
{"task_id": "HumanEval/151", "completion": "\n    long sum = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && (lst[i] & 1) == 1) {\n            sum += (lst[i] * lst[i]);\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/152", "completion": "\n    std::vector<long> result(game.size(), 0);\n    for (int i = 0; i < game.size(); i++) {\n        if (game[i] == guess[i]) {\n            result[i] = 0;\n        } else {\n            result[i] = std::abs(game[i] - guess[i]);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/153", "completion": "\n    int max_strength = -1;\n    std::string strongest_extension;\n    for (const auto &extension : extensions) {\n        int strength = GetStrength(extension);\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;"}
{"task_id": "HumanEval/154", "completion": "\n    int n = a.size();\n    int m = b.size();\n    if (m > n) return false;\n    std::string pat = b;\n    for (int i = 0; i < n - m + 1; i++) {\n        if (a[i] == pat[0]) {\n            int j = 1;\n            while (j < m && a[i + j] == pat[j]) {\n                j++;\n            }\n            if (j == m) return true;\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/155", "completion": "\n    // Do your magic here\n    return std::make_tuple(0, 0);"}
{"task_id": "HumanEval/156", "completion": "\n    std::string roman[] = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n    std::string result;\n    while (number > 0) {\n        int rem = number % 5;\n        number /= 5;\n        result = roman[rem] + result;\n    }\n    return result;"}
{"task_id": "HumanEval/157", "completion": "\n    // if the sum of squares of two sides is equal to the square of the third side\n    // then it is a right angled triangle\n    return (a * a + b * b) == c * c;"}
{"task_id": "HumanEval/158", "completion": "\n    int max_unique_chars = 0;\n    std::string max_word;\n    for (const auto &word : words) {\n        int unique_chars = 0;\n        for (const auto &c : word) {\n            if (std::count(word.begin(), word.end(), c) == 1) {\n                unique_chars++;\n            }\n        }\n        if (unique_chars > max_unique_chars) {\n            max_unique_chars = unique_chars;\n            max_word = word;\n        }\n    }\n    return max_word;"}
{"task_id": "HumanEval/159", "completion": "\n    // TO DO: \n    // complete this function \n    // You can use at most 1000 carrots, \n    // and you must eat at least need carrots \n    // to complete the day's meals.\n    // If there are not enough remaining carrots, \n    // you will eat all remaining carrots, \n    // but will still be hungry.\n    // Example:\n    // >>> eat((5), (6), (10))\n    // (std::vector<long>({(long)11, (long)4}))\n    // >>> eat((4), (8), (9))\n    // (std::vector<long>({(long)12, (long)1}))\n    // >>> eat((1), (10), (10))\n    // (std::vector<long>({(long)11, (long)0}))\n    // >>> eat((2), (11), (5))\n    // (std::vector<long>({(long)7, (long)0}))\n    // Variables:\n    // @number : integer\n    // the number of carrots that you have eaten.\n    // @need : integer\n    // the number of carrots that you need to eat.\n    // @remaining : integer\n    // the number of remaining carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n    return {number + need, remaining - need};"}
{"task_id": "HumanEval/160", "completion": "\n    long result = 0;\n    int i = 0;\n    while (i < op.size()) {\n        std::string op_ = op[i];\n        long operand_ = operand[i];\n        if (op_ == '+') {\n            result += operand_;\n        } else if (op_ == '-') {\n            result -= operand_;\n        } else if (op_ == '*') {\n            result *= operand_;\n        } else if (op_ == '/') {\n            result /= operand_;\n        } else if (op_ == '**') {\n            result = pow(result, operand_);\n        }\n        i++;\n    }\n    return result;"}
{"task_id": "HumanEval/161", "completion": "\n    for (int i = 0; i < s.size(); i++) {\n        if (std::isalpha(s[i])) {\n            s[i] = std::toupper(s[i]) == s[i] ? std::tolower(s[i]) : std::toupper(s[i]);\n        }\n    }\n    if (std::all_of(s.begin(), s.end(), [](char c) { return !std::isalpha(c); })) {\n        std::reverse(s.begin(), s.end());\n    }\n    return s;"}
{"task_id": "HumanEval/162", "completion": "\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    // Implement MD5 hash calculation\n    // ...\n    // Return the resulting hash as a string\n    return hash;"}
{"task_id": "HumanEval/163", "completion": "\n    // if (a > b) return std::vector<long>();\n    // if (a == b) return std::vector<long>({a});\n    // if (a % 2 == 0) return generate_integers(a + 1, b);\n    // return generate_integers(a + 1, b - 1);\n    // return std::vector<long>({a, b});\n    // return std::vector<long>({a, b - 1});\n    // return std::vector<long>({a, b - 2});\n    // return std::vector<long>({a, b - 3});\n    // return std::vector<long>({a, b - 4});\n    // return std::vector<long>({a, b - 5});\n    // return std::vector<long>({a, b - 6});\n    // return std::vector<long>({a, b - 7});\n    // return std::vector<long>({a, b - 8});\n    // return std::vector<long>({a, b - 9});\n    // return std::vector<long>({a, b - 10});\n    // return std::vector<long>({a, b - 11});\n    // return std::vector<long>({a, b - 12});\n    // return std::vector<long>({a, b - 13});\n    // return std::vector<long>({a, b - 14});\n    // return std::vector<long>({a, b - 15});\n    // return std::vector<long>({a, b - 16});\n    // return std::vector<long>({a, b - 17});\n    // return std::vector<long>({a, b - 18});\n    // return std::vector<long>({a, b - 19});\n    // return std::vector<long>({a, b - 20});\n    // return std::vector<long>({a, b - 21});\n    // return std::vector<long>({a, b - 22});\n    // return std::vector<"}
