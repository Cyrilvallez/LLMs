{"task_id": "HumanEval/0", "completion": "\n    std::sort(numbers.begin(), numbers.end());\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        if (numbers[i + 1] - numbers[i] < threshold) {\n            return true;\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/1", "completion": "\n    std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n            count++;\n            temp += paren_string[i];\n        }\n        else if(paren_string[i] == ')') {\n            count--;\n            temp += paren_string[i];\n        }\n        else if(paren_string[i] == ' ') {\n            continue;\n        }\n        else {\n            assert(0);\n        }\n        if(count == 0) {\n            result.push_back(temp);\n            temp = \"\";\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/2", "completion": "\n    int integer_part = (int)number;\n    float decimal_part = number - integer_part;\n    return decimal_part;"}
{"task_id": "HumanEval/3", "completion": "\n    long balance = 0;\n    for (long operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/4", "completion": "\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float mad = 0.0f;\n    for (auto number : numbers) {\n        sum += number;\n    }\n    mean = sum / numbers.size();\n    for (auto number : numbers) {\n        mad += std::abs(number - mean);\n    }\n    return mad / numbers.size();"}
{"task_id": "HumanEval/5", "completion": "\n    std::vector<long> result;\n    for (long i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        if (i != numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/6", "completion": "\n    std::vector<long> result;\n    std::stack<long> stack;\n    stack.push(0);\n    for (char c : paren_string) {\n        if (c == '(') {\n            stack.push(stack.top() + 1);\n        } else if (c == ')') {\n            stack.pop();\n        } else if (c == ' ') {\n            result.push_back(stack.top());\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/7", "completion": "\n    std::vector<std::string> result;\n    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/8", "completion": "\n    long sum = 0;\n    long product = 1;\n    for (long number : numbers) {\n        sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum, product);"}
{"task_id": "HumanEval/9", "completion": "\n    std::vector<long> result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n    }\n    return result;"}
{"task_id": "HumanEval/10", "completion": "\n    int n = string.size();\n    std::vector<std::vector<bool>> dp(n, std::vector<bool>(n, false));\n    for (int i = 0; i < n; i++) {\n        dp[i][i] = true;\n    }\n    for (int i = 0; i < n - 1; i++) {\n        dp[i][i + 1] = (string[i] == string[i + 1]);\n    }\n    for (int i = n - 3; i >= 0; i--) {\n        for (int j = i + 2; j < n; j++) {\n            dp[i][j] = (string[i] == string[j]) && dp[i + 1][j - 1];\n        }\n    }\n    int max_len = 0;\n    for (int i = 0; i < n; i++) {\n        if (dp[0][i]) {\n            max_len = i + 1;\n        }\n    }\n    std::string suffix = string.substr(0, max_len);\n    std::string prefix = string.substr(0, string.size() - max_len);\n    std::reverse(prefix.begin(), prefix.end());\n    return suffix + prefix;"}
{"task_id": "HumanEval/11", "completion": "\n    assert(a.size() == b.size());\n    std::string result;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == '1' && b[i] == '1') {\n            result += '0';\n        } else if (a[i] == '0' && b[i] == '0') {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/12", "completion": "\n    if (strings.size() == 0) {\n        return std::nullopt;\n    }\n    std::string longest_string = strings[0];\n    for (std::string string : strings) {\n        if (string.size() > longest_string.size()) {\n            longest_string = string;\n        }\n    }\n    return longest_string;"}
{"task_id": "HumanEval/13", "completion": "\n    while (b != 0) {\n        long temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;"}
{"task_id": "HumanEval/14", "completion": "\n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return prefixes;"}
{"task_id": "HumanEval/15", "completion": "\n    std::stringstream ss;\n    for (long i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    return ss.str();"}
{"task_id": "HumanEval/16", "completion": "\n    std::set<char> distinct_characters;\n    for (char character : string) {\n        distinct_characters.insert(character);\n    }\n    return distinct_characters.size();"}
{"task_id": "HumanEval/17", "completion": "\n    std::vector<long> result;\n    for (int i = 0; i < music_string.size(); i++) {\n        if (music_string[i] == 'o') {\n            if (i + 1 < music_string.size() && music_string[i + 1] == '|') {\n                result.push_back(2);\n                i++;\n            } else {\n                result.push_back(4);\n            }\n        } else if (music_string[i] == '.') {\n            result.push_back(1);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/18", "completion": "\n    long count = 0;\n    for (long i = 0; i < string.size(); i++) {\n        if (string.substr(i, substring.size()) == substring) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/19", "completion": "\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        nums.push_back(token);\n    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream res;\n    for (auto num : nums) {\n        res << num << \" \";\n    }\n    return res.str();"}
{"task_id": "HumanEval/20", "completion": "\n    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_first = 0;\n    float min_diff_second = 0;\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_first = numbers[i];\n            min_diff_second = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(min_diff_first, min_diff_second);"}
{"task_id": "HumanEval/21", "completion": "\n    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float> rescaled;\n    for (auto n : numbers) {\n        rescaled.push_back((n - min) / (max - min));\n    }\n    return rescaled;"}
{"task_id": "HumanEval/22", "completion": "\n    std::vector<long> integers;\n    for (auto value : values) {\n        if (value.type() == typeid(long)) {\n            integers.push_back(std::any_cast<long>(value));\n        }\n    }\n    return integers;"}
{"task_id": "HumanEval/23", "completion": "\n    return string.length();"}
{"task_id": "HumanEval/24", "completion": "\n    long largest_divisor = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_divisor = i;\n        }\n    }\n    return largest_divisor;"}
{"task_id": "HumanEval/25", "completion": "\n    std::vector<long> factors;\n    long factor = 2;\n    while (n > 1) {\n        if (n % factor == 0) {\n            factors.push_back(factor);\n            n /= factor;\n        } else {\n            factor++;\n        }\n    }\n    return factors;"}
{"task_id": "HumanEval/26", "completion": "\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end()) {\n            result.push_back(number);\n            seen.insert(number);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/27", "completion": "\n    std::string result;\n    for (char c : string) {\n        if (isupper(c)) {\n            result += tolower(c);\n        } else {\n            result += toupper(c);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/28", "completion": "\n    std::string result;\n    for (std::string s : strings) {\n        result += s;\n    }\n    return result;"}
{"task_id": "HumanEval/29", "completion": "\n    std::vector<std::string> result;\n    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/30", "completion": "\n    std::vector<long> r;\n    for (long i : l) {\n        if (i > 0) {\n            r.push_back(i);\n        }\n    }\n    return r;"}
{"task_id": "HumanEval/31", "completion": "\n    if (n <= 1) {\n        return false;\n    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n        return false;\n    }\n    for (long i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/33", "completion": "\n    std::vector<long> l_prime;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l_prime.push_back(l[i]);\n        }\n    }\n    std::sort(l_prime.begin(), l_prime.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l[i] = l_prime[i / 3];\n        }\n    }\n    return l;"}
{"task_id": "HumanEval/34", "completion": "\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;"}
{"task_id": "HumanEval/35", "completion": "\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;"}
{"task_id": "HumanEval/36", "completion": "\n    long count = 0;\n    for (long i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string s = to_string(i);\n            if (s.find('7') != string::npos) {\n                count++;\n            }\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/37", "completion": "\n    std::vector<long> l_prime;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            l_prime.push_back(l[i]);\n        } else {\n            l_prime.push_back(l[i]);\n            std::sort(l_prime.begin(), l_prime.end());\n        }\n    }\n    return l_prime;"}
{"task_id": "HumanEval/39", "completion": "\n    long a = 0, b = 1, c = 1, d = 2;\n    for (long i = 1; i <= n; i++) {\n        c = a + b;\n        d = a + 2 * b;\n        a = b;\n        b = c;\n    }\n    return c;"}
{"task_id": "HumanEval/40", "completion": "\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n            } else {\n                k--;\n            }\n        }\n    }\n    return false;"}
{"task_id": "HumanEval/41", "completion": "\n  // The number of collisions is the number of pairs of cars that are moving\n  // in opposite directions.\n  return n * (n - 1) / 2;"}
{"task_id": "HumanEval/42", "completion": "\n    for (long i = 0; i < l.size(); i++) {\n        l[i] = l[i] + 1;\n    }\n    return l;"}
{"task_id": "HumanEval/43", "completion": "\n    std::unordered_set<long> s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n            return true;\n        }\n        s.insert(i);\n    }\n    return false;"}
{"task_id": "HumanEval/44", "completion": "\n    std::string result;\n    while (x > 0) {\n        result += std::to_string(x % base);\n        x /= base;\n    }\n    std::reverse(result.begin(), result.end());\n    return result;"}
{"task_id": "HumanEval/45", "completion": "\n    return (a * h) / 2.0;"}
{"task_id": "HumanEval/46", "completion": "\n    if(n == 0 || n == 1) return 0;\n    if(n == 2) return 2;\n    if(n == 3) return 0;\n    long a = 0, b = 0, c = 2, d = 0;\n    for(long i = 4; i <= n; i++) {\n        a = b;\n        b = c;\n        c = d;\n        d = a + b + c + d;\n    }\n    return d;"}
{"task_id": "HumanEval/47", "completion": "\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0f;\n    } else {\n        return l[l.size() / 2];\n    }"}
{"task_id": "HumanEval/48", "completion": "\n    int n = text.size();\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/49", "completion": "\n    long r = 1;\n    while (n > 0) {\n        if (n & 1) {\n            r = (r * 2) % p;\n        }\n        n >>= 1;\n    }\n    return r;"}
{"task_id": "HumanEval/51", "completion": "\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos) {\n            result += text[i];\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/52", "completion": "\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > t) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y;"}
{"task_id": "HumanEval/54", "completion": "\n    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n    return s0 == s1;"}
{"task_id": "HumanEval/55", "completion": "\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);"}
{"task_id": "HumanEval/56", "completion": "\n    std::stack<char> s;\n    for (char c : brackets) {\n        if (c == '<') {\n            s.push(c);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();"}
{"task_id": "HumanEval/57", "completion": "\n    if (l.size() == 0) {\n        return true;\n    }\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.size(); i++) {\n        if (increasing && l[i - 1] > l[i]) {\n            return false;\n        }\n        if (!increasing && l[i - 1] < l[i]) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/58", "completion": "\n    std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(res));\n    return res;"}
{"task_id": "HumanEval/59", "completion": "\n    long largest_factor = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_factor = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    return largest_factor;"}
{"task_id": "HumanEval/60", "completion": "\n    long sum = 0;\n    for (long i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;"}
{"task_id": "HumanEval/61", "completion": "\n    std::stack<char> s;\n    for (char c : brackets) {\n        if (c == '(') {\n            s.push(c);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();"}
{"task_id": "HumanEval/62", "completion": "\n    std::vector<long> ret;\n    for (int i = 1; i < xs.size(); i++) {\n        ret.push_back(xs[i] * i);\n    }\n    return ret;"}
{"task_id": "HumanEval/63", "completion": "\n    if(n == 0 || n == 1) return 0;\n    if(n == 2) return 1;\n    long a = 0, b = 0, c = 1;\n    for(long i = 3; i <= n; i++) {\n        long d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;"}
{"task_id": "HumanEval/64", "completion": "\n    long count = 0;\n    for (auto c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/65", "completion": "\n    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n    std::string s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift, s.size() - shift);\n    return s2 + s1;"}
{"task_id": "HumanEval/66", "completion": "\n    long sum = 0;\n    for (char c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum += c;\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/67", "completion": "\n    long apples = 0, oranges = 0;\n    std::stringstream ss(s);\n    std::string temp;\n    while(ss >> temp) {\n        if(temp == \"apples\") {\n            ss >> apples;\n        } else if(temp == \"oranges\") {\n            ss >> oranges;\n        }\n    }\n    return n - apples - oranges;"}
{"task_id": "HumanEval/68", "completion": "\n    if(arr.size() == 0)\n        return {};\n    long min = INT_MAX;\n    long min_index = -1;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    if(min_index == -1)\n        return {};\n    std::vector<long> ans;\n    ans.push_back(min);\n    ans.push_back(min_index);\n    return ans;"}
{"task_id": "HumanEval/69", "completion": "\n    std::unordered_map<long, long> freq;\n    for(auto i : lst)\n        freq[i]++;\n    for(auto i : lst)\n        if(freq[i] >= i && i > 0)\n            return i;\n    return -1;"}
{"task_id": "HumanEval/70", "completion": "\n    std::vector<long> result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::vector<long> sorted = lst;\n    std::sort(sorted.begin(), sorted.end());\n    bool is_min = true;\n    while (sorted.size() > 0) {\n        if (is_min) {\n            result.push_back(sorted[0]);\n            sorted.erase(sorted.begin());\n        } else {\n            result.push_back(sorted[sorted.size() - 1]);\n            sorted.pop_back();\n        }\n        is_min = !is_min;\n    }\n    return result;"}
{"task_id": "HumanEval/71", "completion": "\n    float s = (a + b + c) / 2.0f;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    return area;"}
{"task_id": "HumanEval/72", "completion": "\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    for (long i = 0; i < q.size() / 2; i++) {\n        if (q[i] != q[q.size() - i - 1]) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/73", "completion": "\n    long n = arr.size();\n    long count = 0;\n    for(long i = 0; i < n/2; i++) {\n        if(arr[i] != arr[n-i-1]) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/74", "completion": "\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size(); i++)\n        sum1 += lst1[i].size();\n    for(int i = 0; i < lst2.size(); i++)\n        sum2 += lst2[i].size();\n    if(sum1 < sum2)\n        return lst1;\n    else\n        return lst2;"}
{"task_id": "HumanEval/75", "completion": "\n    if (a < 100) {\n        return true;\n    }\n    return false;"}
{"task_id": "HumanEval/76", "completion": "\n    if(x==1)\n        return true;\n    if(n==1)\n        return false;\n    if(x==n)\n        return true;\n    if(x%n!=0)\n        return false;\n    return is_simple_power(x/n,n);"}
{"task_id": "HumanEval/77", "completion": "\n    long b = sqrt(a);\n    return b*b*b == a;"}
{"task_id": "HumanEval/78", "completion": "\n    long count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D') {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/79", "completion": "\n    std::string binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2 == 0 ? \"0\" : \"1\") + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";"}
{"task_id": "HumanEval/80", "completion": "\n    if(s.size()<3)\n        return false;\n    for(int i=0;i<s.size()-2;i++)\n    {\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n            return false;\n    }\n    return true;"}
{"task_id": "HumanEval/81", "completion": "\n    std::vector<std::string> letter_grades;\n    for (auto grade : grades) {\n        if (grade >= 4.0f) {\n            letter_grades.push_back(\"A+\");\n        } else if (grade >= 3.7f) {\n            letter_grades.push_back(\"A\");\n        } else if (grade >= 3.3f) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade >= 3.0f) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade >= 2.7f) {\n            letter_grades.push_back(\"B\");\n        } else if (grade >= 2.3f) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade >= 2.0f) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade >= 1.7f) {\n            letter_grades.push_back(\"C\");\n        } else if (grade >= 1.3f) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade >= 1.0f) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade >= 0.7f) {\n            letter_grades.push_back(\"D\");\n        } else if (grade >= 0.0f) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;"}
{"task_id": "HumanEval/82", "completion": "\n    int n = string.length();\n    if(n == 1)\n        return false;\n    if(n == 2)\n        return true;\n    if(n % 2 == 0)\n        return false;\n    for(int i = 3; i * i <= n; i += 2) {\n        if(n % i == 0)\n            return false;\n    }\n    return true;"}
{"task_id": "HumanEval/83", "completion": "\n    long count = 0;\n    for (long i = 1; i < 10; i++) {\n        count += (n - 1) * pow(10, n - 1);\n    }\n    for (long i = 1; i < 10; i++) {\n        count += (n - 1) * pow(10, n - 1);\n    }\n    return count;"}
{"task_id": "HumanEval/84", "completion": "\n    std::string ans;\n    while(N > 0) {\n        ans += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;"}
{"task_id": "HumanEval/85", "completion": "\n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/86", "completion": "\n  std::stringstream ss(s);\n  std::string word;\n  std::string result;\n  while (ss >> word) {\n    std::sort(word.begin(), word.end());\n    result += word + \" \";\n  }\n  return result;"}
{"task_id": "HumanEval/87", "completion": "\n    std::vector<std::tuple<long, long>> res;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a) < std::get<0>(b)) {\n            return true;\n        } else if (std::get<0>(a) == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n        } else {\n            return false;\n        }\n    });\n    return res;"}
{"task_id": "HumanEval/88", "completion": "\n    if (array.size() == 0)\n        return array;\n    if (array.size() == 1)\n        return array;\n    if (array.size() == 2) {\n        if (array[0] > array[1])\n            std::swap(array[0], array[1]);\n        return array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return array;"}
{"task_id": "HumanEval/89", "completion": "\n    std::string result;\n    for (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n            result += (c + 2) % 26 + 'a';\n        } else if (c >= 'A' && c <= 'Z') {\n            result += (c + 2) % 26 + 'A';\n        } else {\n            result += c;\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/90", "completion": "\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    if (lst[0] == lst[1]) {\n        return std::nullopt;\n    }\n    return lst[1];"}
{"task_id": "HumanEval/91", "completion": "\n    long count = 0;\n    std::stringstream ss(S);\n    std::string word;\n    while (std::getline(ss, word, '.')) {\n        if (word.find(\"I\") == 0) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/92", "completion": "\n    if (x == y + z || y == x + z || z == x + y) {\n        return true;\n    }\n    return false;"}
{"task_id": "HumanEval/93", "completion": "\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for(int i = 0; i < message.size(); i++) {\n        if(vowels.find(message[i]) != std::string::npos) {\n            result += (char)((message[i] + 2) % 26 + 'a');\n        } else {\n            result += (char)(('a' + 'z' - message[i]) % 26 + 'a');\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/94", "completion": "\n    long max = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    long sum = 0;\n    while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;"}
{"task_id": "HumanEval/95", "completion": "\n    if(dict.size() == 0)\n        return false;\n    bool is_lower = std::all_of(dict.begin(), dict.end(), [](const std::pair<std::string, std::string>& p){\n        return std::all_of(p.first.begin(), p.first.end(), [](char c){\n            return std::islower(c);\n        });\n    });\n    bool is_upper = std::all_of(dict.begin(), dict.end(), [](const std::pair<std::string, std::string>& p){\n        return std::all_of(p.first.begin(), p.first.end(), [](char c){\n            return std::isupper(c);\n        });\n    });\n    return is_lower || is_upper;"}
{"task_id": "HumanEval/96", "completion": "\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n    }\n    if (n == 1) {\n        return result;\n    }\n    for (long i = 2; i < n; i++) {\n        bool isPrime = true;\n        for (long j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            result.push_back(i);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/97", "completion": "\n    return (a%10)*(b%10);"}
{"task_id": "HumanEval/98", "completion": "\n    long count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (i % 2 == 0 && isupper(s[i]) && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/99", "completion": "\n    // Your code here\n    long long int a = std::stoll(value);\n    double b = std::stod(value);\n    if(a == b)\n        return a;\n    else if(a > b)\n        return a - 1;\n    else\n        return a + 1;"}
{"task_id": "HumanEval/100", "completion": "\n    std::vector<long> result;\n    result.push_back(n);\n    while (n > 1) {\n        n = (n % 2 == 0) ? n + 1 : n + 2;\n        result.push_back(n);\n    }\n    return result;"}
{"task_id": "HumanEval/101", "completion": "\n    std::vector<std::string> v;\n    std::string word;\n    for (char c : s) {\n        if (c == ' ' || c == ',') {\n            if (word.size() > 0) {\n                v.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (word.size() > 0) {\n        v.push_back(word);\n    }\n    return v;"}
{"task_id": "HumanEval/102", "completion": "\n    if (x % 2 == 0) {\n        return x;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    if (x % 2 == 1 && y % 2 == 1) {\n        return -1;\n    }\n    return -1;"}
{"task_id": "HumanEval/103", "completion": "\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n + 1);\n    return \"0b\" + std::bitset<32>(avg).to_string();"}
{"task_id": "HumanEval/104", "completion": "\n    std::vector<long> result;\n    for(long i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool has_even_digit = false;\n        while(num > 0) {\n            if(num % 10 % 2 == 0) {\n                has_even_digit = true;\n                break;\n            }\n            num /= 10;\n        }\n        if(!has_even_digit) {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;"}
{"task_id": "HumanEval/105", "completion": "\n    std::vector<std::string> ans;\n    std::vector<long> temp;\n    for(auto i:arr)\n    {\n        if(i>=1 && i<=9)\n        {\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),temp.end());\n    std::reverse(temp.begin(),temp.end());\n    for(auto i:temp)\n    {\n        switch(i)\n        {\n            case 1:\n                ans.push_back(\"One\");\n                break;\n            case 2:\n                ans.push_back(\"Two\");\n                break;\n            case 3:\n                ans.push_back(\"Three\");\n                break;\n            case 4:\n                ans.push_back(\"Four\");\n                break;\n            case 5:\n                ans.push_back(\"Five\");\n                break;\n            case 6:\n                ans.push_back(\"Six\");\n                break;\n            case 7:\n                ans.push_back(\"Seven\");\n                break;\n            case 8:\n                ans.push_back(\"Eight\");\n                break;\n            case 9:\n                ans.push_back(\"Nine\");\n                break;\n        }\n    }\n    return ans;"}
{"task_id": "HumanEval/106", "completion": "\n    std::vector<long> v;\n    for(long i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            long fact = 1;\n            for(long j = 1; j <= i; j++) {\n                fact *= j;\n            }\n            v.push_back(fact);\n        } else {\n            long sum = 0;\n            for(long j = 1; j <= i; j++) {\n                sum += j;\n            }\n            v.push_back(sum);\n        }\n    }\n    return v;"}
{"task_id": "HumanEval/107", "completion": "\n    long even = 0, odd = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return std::make_tuple(even, odd);"}
{"task_id": "HumanEval/108", "completion": "\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long num = arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n        long sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/109", "completion": "\n    if(arr.size() == 0)\n        return true;\n    if(arr.size() == 1)\n        return true;\n    if(arr.size() == 2)\n        return true;\n    if(arr.size() == 3)\n        return true;\n    if(arr.size() == 4)\n        return true;\n    if(arr.size() == 5)\n        return true;\n    if(arr.size() == 6)\n        return true;\n    if(arr.size() == 7)\n        return true;\n    if(arr.size() == 8)\n        return true;\n    if(arr.size() == 9)\n        return true;\n    if(arr.size() == 10)\n        return true;\n    if(arr.size() == 11)\n        return true;\n    if(arr.size() == 12)\n        return true;\n    if(arr.size() == 13)\n        return true;\n    if(arr.size() == 14)\n        return true;\n    if(arr.size() == 15)\n        return true;\n    if(arr.size() == 16)\n        return true;\n    if(arr.size() == 17)\n        return true;\n    if(arr.size() == 18)\n        return true;\n    if(arr.size() == 19)\n        return true;\n    if(arr.size() == 20)\n        return true;\n    if(arr.size() == 21)\n        return true;\n    if(arr.size() == 22)\n        return true;\n    if(arr.size() == 23)\n        return true;\n    if(arr.size() == 24)\n        return true;\n    if(arr.size() == 25)\n        return true;\n    if(arr.size() == 26)\n        return true;\n    if(arr.size() == 27)\n        return true;\n    if(arr.size() == 28)\n        return true;"}
{"task_id": "HumanEval/110", "completion": "\n    // Your code here\n    int count = 0;\n    for(int i = 0; i < lst1.size(); i++)\n    {\n        if(lst1[i] % 2 == 0)\n        {\n            count++;\n        }\n    }\n    if(count == lst1.size())\n    {\n        return \"YES\";\n    }\n    else\n    {\n        for(int i = 0; i < lst2.size(); i++)\n        {\n            if(lst2[i] % 2 == 0)\n            {\n                count++;\n            }\n        }\n        if(count == lst1.size())\n        {\n            return \"YES\";\n        }\n        else\n        {\n            return \"NO\";\n        }\n    }"}
{"task_id": "HumanEval/111", "completion": "\n  std::map<std::string,long> result;\n  std::stringstream ss(test);\n  std::string word;\n  while (ss >> word) {\n    if (result.find(word) == result.end()) {\n      result[word] = 1;\n    } else {\n      result[word] += 1;\n    }\n  }\n  return result;"}
{"task_id": "HumanEval/112", "completion": "\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (c.find(s[i]) == std::string::npos) {\n            result += s[i];\n        }\n    }\n    return std::make_tuple(result, std::equal(result.begin(), result.begin() + result.size() / 2, result.rbegin()));"}
{"task_id": "HumanEval/113", "completion": "\n    std::vector<std::string> ans;\n    for (std::string s : lst) {\n        int count = 0;\n        for (char c : s) {\n            if (c % 2 == 1) {\n                count++;\n            }\n        }\n        std::stringstream ss;\n        ss << \"the number of odd elements \" << count << \"n the str\" << count << \"ng \" << count << \" of the \" << count << \"nput.\";\n        ans.push_back(ss.str());\n    }\n    return ans;"}
{"task_id": "HumanEval/114", "completion": "\n    long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum = sum;\n        }\n        if (sum == 0) {\n            min_sum = 0;\n        }\n    }\n    return min_sum;"}
{"task_id": "HumanEval/115", "completion": "\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    for (long i = 0; i < n; i++) {\n        long water = 0;\n        for (long j = 0; j < m; j++) {\n            water += grid[i][j];\n        }\n        ans += water / capacity;\n        if (water % capacity != 0) {\n            ans += 1;\n        }\n    }\n    return ans;"}
{"task_id": "HumanEval/116", "completion": "\n    std::sort(arr.begin(), arr.end(), [](long a, long b) {\n        int a_ones = 0, b_ones = 0;\n        for (int i = 0; i < 32; i++) {\n            a_ones += (a & 1);\n            b_ones += (b & 1);\n            a >>= 1;\n            b >>= 1;\n        }\n        if (a_ones == b_ones) {\n            return a < b;\n        }\n        return a_ones < b_ones;\n    });\n    return arr;"}
{"task_id": "HumanEval/117", "completion": "\n    std::vector<std::string> v;\n    std::string word;\n    for(auto c : s) {\n        if(c == ' ') {\n            if(word.size() == n)\n                v.push_back(word);\n            word.clear();\n        } else if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n            word += c;\n        }\n    }\n    if(word.size() == n)\n        v.push_back(word);\n    return v;"}
{"task_id": "HumanEval/118", "completion": "\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int i = word.size() - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        i--;\n    }\n    return result;"}
{"task_id": "HumanEval/119", "completion": "\n  std::string s;\n  for (auto i : lst)\n    s += i;\n  int count = 0;\n  for (auto i : s) {\n    if (i == '(')\n      count++;\n    else\n      count--;\n    if (count < 0)\n      return \"No\";\n  }\n  if (count == 0)\n    return \"Yes\";\n  else\n    return \"No\";"}
{"task_id": "HumanEval/120", "completion": "\n    std::vector<long> ans;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for (long i = 0; i < k; i++) {\n        ans.push_back(pq.top());\n        pq.pop();\n    }\n    return ans;"}
{"task_id": "HumanEval/121", "completion": "\n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/122", "completion": "\n    long sum = 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 10) {\n            sum += arr[i];\n        } else if (arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/123", "completion": "\n    std::vector<long> result;\n    while (n > 1) {\n        if (n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        if (n % 2 == 1) {\n            result.push_back(n);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;"}
{"task_id": "HumanEval/124", "completion": "\n    if(date.empty())\n        return false;\n    std::stringstream ss(date);\n    std::string month, day, year;\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    std::getline(ss, year, '-');\n    if(month.empty() || day.empty() || year.empty())\n        return false;\n    int month_int = std::stoi(month);\n    int day_int = std::stoi(day);\n    int year_int = std::stoi(year);\n    if(month_int < 1 || month_int > 12)\n        return false;\n    if(day_int < 1 || day_int > 31)\n        return false;\n    if(month_int == 2) {\n        if(day_int > 29)\n            return false;\n    } else if(month_int == 1 || month_int == 3 || month_int == 5 || month_int == 7 || month_int == 8 || month_int == 10 || month_int == 12) {\n        if(day_int > 31)\n            return false;\n    } else {\n        if(day_int > 30)\n            return false;\n    }\n    return true;"}
{"task_id": "HumanEval/125", "completion": "\n    std::vector<std::string> res;\n    std::string word;\n    for (char c : txt) {\n        if (c == ' ' || c == ',') {\n            if (word.size() > 0) {\n                res.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (word.size() > 0) {\n        res.push_back(word);\n    }\n    if (res.size() > 0) {\n        return Union_std_vector_std_string__long(res);\n    } else {\n        long count = 0;\n        for (char c : txt) {\n            if (c >= 'a' && c <= 'z') {\n                if (((c - 'a') % 2) == 1) {\n                    count++;\n                }\n            }\n        }\n        return Union_std_vector_std_string__long(count);\n    }"}
{"task_id": "HumanEval/126", "completion": "\n    std::unordered_map<long, long> counts;\n    for (long i = 0; i < lst.size(); i++) {\n        if (counts.find(lst[i]) == counts.end()) {\n            counts[lst[i]] = 1;\n        } else {\n            counts[lst[i]] += 1;\n        }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (counts[lst[i]] > 1) {\n            return false;\n        }\n    }\n    for (long i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/127", "completion": "\n    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n    if (start > end) {\n        return \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";"}
{"task_id": "HumanEval/128", "completion": "\n    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long product = 1;\n    long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n            product *= -1;\n            sum += -arr[i];\n        } else if (arr[i] > 0) {\n            product *= 1;\n            sum += arr[i];\n        } else {\n            product *= 0;\n            sum += 0;\n        }\n    }\n    return product * sum;"}
{"task_id": "HumanEval/129", "completion": "\n    long n = grid.size();\n    assert(n >= 2);\n    assert(n == grid[0].size());\n    std::vector<long> ans;\n    std::vector<std::vector<long>> visited(n, std::vector<long>(n, 0));\n    std::vector<std::vector<long>> dist(n, std::vector<long>(n, 0));\n    std::vector<std::vector<long>> parent(n, std::vector<long>(n, 0));\n    std::vector<std::vector<long>> dirs = {\n        {0, 1},\n        {0, -1},\n        {1, 0},\n        {-1, 0}\n    };\n    std::priority_queue<std::pair<long, std::pair<long, long>>> pq;\n    pq.push({0, {0, 0}});\n    while (!pq.empty()) {\n        auto [d, pos] = pq.top();\n        pq.pop();\n        long x = pos.first;\n        long y = pos.second;\n        if (visited[x][y]) continue;\n        visited[x][y] = 1;\n        dist[x][y] = d;\n        parent[x][y] = -1;\n        for (auto dir : dirs) {\n            long nx = x + dir[0];\n            long ny = y + dir[1];\n            if (nx < 0 || nx >= n || ny < 0 || ny >= n) continue;\n            pq.push({d + 1, {nx, ny}});\n        }\n    }\n    long x = 0;\n    long y = 0;\n    while (k--) {\n        ans.push_back(grid[x][y]);\n        long nx = parent[x][y] / n;\n        long ny = parent[x][y] % n;\n        x = nx;\n        y = ny;\n    }\n    return ans;"}
{"task_id": "HumanEval/130", "completion": "\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n    v.push_back(8);\n    return v;"}
{"task_id": "HumanEval/131", "completion": "\n    long ans = 1;\n    while(n) {\n        if(n%2) ans *= n%10;\n        n /= 10;\n    }\n    return ans;"}
{"task_id": "HumanEval/132", "completion": "\n    std::stack<char> stack;\n    for(auto c : string) {\n        if(c == '[') {\n            stack.push(c);\n        } else {\n            if(stack.empty()) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.empty();"}
{"task_id": "HumanEval/133", "completion": "\n    long sum = 0;\n    for (auto i : lst) {\n        sum += (long)ceil(i) * (long)ceil(i);\n    }\n    return sum;"}
{"task_id": "HumanEval/134", "completion": "\n    if(txt.size() == 0)\n        return false;\n    if(txt.back() == ' ')\n        return false;\n    if(isalpha(txt.back()))\n        return true;\n    return false;"}
{"task_id": "HumanEval/135", "completion": "\n    long n = arr.size();\n    long max_index = -1;\n    for (long i = n - 1; i >= 0; i--) {\n        if (arr[i] < arr[max_index]) {\n            max_index = i;\n        }\n    }\n    return max_index;"}
{"task_id": "HumanEval/136", "completion": "\n    std::optional<long> largest_negative_integer = std::nullopt;\n    std::optional<long> smallest_positive_integer = std::nullopt;\n    for (long i : lst) {\n        if (i < 0) {\n            if (largest_negative_integer == std::nullopt) {\n                largest_negative_integer = i;\n            } else {\n                largest_negative_integer = std::max(largest_negative_integer.value(), i);\n            }\n        } else if (i > 0) {\n            if (smallest_positive_integer == std::nullopt) {\n                smallest_positive_integer = i;\n            } else {\n                smallest_positive_integer = std::min(smallest_positive_integer.value(), i);\n            }\n        }\n    }\n    return std::make_tuple(largest_negative_integer, smallest_positive_integer);"}
{"task_id": "HumanEval/137", "completion": "\n    if (a == b) {\n        return std::nullopt;\n    }\n    if (a.f0 > b.f0) {\n        return a.f0;\n    }\n    if (a.f1 > b.f1) {\n        return a.f1;\n    }\n    if (a.f2 > b.f2) {\n        return a.f2;\n    }\n    return b;"}
{"task_id": "HumanEval/138", "completion": "\n    if (n % 2 != 0) {\n        return false;\n    }\n    long sum = 0;\n    long i = 2;\n    while (sum < n) {\n        sum += i;\n        i += 2;\n    }\n    return sum == n;"}
{"task_id": "HumanEval/139", "completion": "\n    long result = 1;\n    for (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;"}
{"task_id": "HumanEval/140", "completion": "\n    std::string result;\n    int count = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            count++;\n        } else {\n            if (count > 2) {\n                result += \"-\";\n            } else {\n                for (int j = 0; j < count; j++) {\n                    result += \"_\";\n                }\n            }\n            result += text[i];\n            count = 0;\n        }\n    }\n    if (count > 2) {\n        result += \"-\";\n    } else {\n        for (int j = 0; j < count; j++) {\n            result += \"_\";\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/141", "completion": "\n    int dot_count = 0;\n    int digit_count = 0;\n    int letter_count = 0;\n    int valid_extension = 0;\n    for (int i = 0; i < file_name.size(); i++) {\n        if (file_name[i] == '.') {\n            dot_count++;\n        }\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            digit_count++;\n        }\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n            letter_count++;\n        }\n        if (file_name[i] >= 'A' && file_name[i] <= 'Z') {\n            letter_count++;\n        }\n        if (file_name[i] == 't' && file_name[i + 1] == 'x' && file_name[i + 2] == 't') {\n            valid_extension++;\n        }\n        if (file_name[i] == 'e' && file_name[i + 1] == 'x' && file_name[i + 2] == 'e') {\n            valid_extension++;\n        }\n        if (file_name[i] == 'd' && file_name[i + 1] == 'l' && file_name[i + 2] == 'l') {\n            valid_extension++;\n        }\n    }\n    if (dot_count == 1 && digit_count <= 3 && letter_count >= 1 && valid_extension == 1) {\n        return \"Yes\";\n    }\n    return \"No\";"}
{"task_id": "HumanEval/142", "completion": "\n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            lst[i] = lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;"}
{"task_id": "HumanEval/143", "completion": "\n    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.size() == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n            result += word + \" \";\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/144", "completion": "\n    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/') + 1));\n    int gcd = std::__gcd(x_numerator, x_denominator);\n    x_numerator /= gcd;\n    x_denominator /= gcd;\n    gcd = std::__gcd(n_numerator, n_denominator);\n    n_numerator /= gcd;\n    n_denominator /= gcd;\n    int lcm = x_denominator * n_denominator / std::__gcd(x_denominator, n_denominator);\n    return lcm % (x_numerator * n_numerator) == 0;"}
{"task_id": "HumanEval/145", "completion": "\n    std::vector<long> result;\n    std::map<int, std::vector<long>> map;\n    for (auto num : nums) {\n        int sum = 0;\n        while (num) {\n            sum += num % 10;\n            num /= 10;\n        }\n        map[sum].push_back(num);\n    }\n    for (auto it : map) {\n        for (auto num : it.second) {\n            result.push_back(num);\n        }\n    }\n    return result;"}
{"task_id": "HumanEval/146", "completion": "\n    long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        if (nums[i] > 10 && (nums[i] % 10) % 2 == 1 && (nums[i] / 10) % 2 == 1) {\n            count++;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/147", "completion": "\n    long count = 0;\n    vector<long> a(n);\n    for(long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/148", "completion": "\n    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int i1 = -1, i2 = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n            i1 = i;\n        }\n        if (planets[i] == planet2) {\n            i2 = i;\n        }\n    }\n    if (i1 == -1 || i2 == -1) {\n        return result;\n    }\n    if (i1 > i2) {\n        int tmp = i1;\n        i1 = i2;\n        i2 = tmp;\n    }\n    for (int i = i1 + 1; i < i2; i++) {\n        result.push_back(planets[i]);\n    }\n    return result;"}
{"task_id": "HumanEval/149", "completion": "\n    std::vector<std::string> result;\n    for (auto i : lst) {\n        if (i.size() % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;"}
{"task_id": "HumanEval/150", "completion": "\n    if(n==1)\n        return y;\n    if(n==2)\n        return x;\n    for(long i=2;i*i<=n;i++)\n    {\n        if(n%i==0)\n            return y;\n    }\n    return x;"}
{"task_id": "HumanEval/151", "completion": "\n    long sum = 0;\n    for (auto i : lst) {\n        if (i == (long)i && i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/152", "completion": "\n    std::vector<long> result;\n    for (int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;"}
{"task_id": "HumanEval/153", "completion": "\n    int max_strength = 0;\n    std::string strongest_extension;\n    for (auto extension : extensions) {\n        int strength = 0;\n        for (auto c : extension) {\n            if (isupper(c)) {\n                strength++;\n            } else if (islower(c)) {\n                strength--;\n            }\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;"}
{"task_id": "HumanEval/154", "completion": "\n    if(a.size() < b.size()) return false;\n    if(a.size() == b.size()) return a == b;\n    for(int i = 0; i < b.size(); i++) {\n        if(a.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;"}
{"task_id": "HumanEval/155", "completion": "\n    long even = 0, odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);"}
{"task_id": "HumanEval/156", "completion": "\n    std::string roman_numeral;\n    std::vector<std::pair<int, std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n    while (number > 0) {\n        for (auto roman_numeral_pair : roman_numerals) {\n            if (number >= roman_numeral_pair.first) {\n                number -= roman_numeral_pair.first;\n                roman_numeral += roman_numeral_pair.second;\n                break;\n            }\n        }\n    }\n    return roman_numeral;"}
{"task_id": "HumanEval/157", "completion": "\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return true;\n    return false;"}
{"task_id": "HumanEval/158", "completion": "\n    std::string max_word = words[0];\n    int max_unique_chars = 0;\n    for (std::string word : words) {\n        std::set<char> unique_chars;\n        for (char c : word) {\n            unique_chars.insert(c);\n        }\n        if (unique_chars.size() > max_unique_chars) {\n            max_word = word;\n            max_unique_chars = unique_chars.size();\n        } else if (unique_chars.size() == max_unique_chars) {\n            if (word < max_word) {\n                max_word = word;\n            }\n        }\n    }\n    return max_word;"}
{"task_id": "HumanEval/159", "completion": "\n    long total = number + need;\n    long left = total > remaining ? 0 : remaining - total;\n    return {total, left};"}
{"task_id": "HumanEval/160", "completion": "\n    assert(op.size() == operand.size() - 1);\n    std::stack<long> st;\n    st.push(operand[0]);\n    for(int i = 1; i < operand.size(); i++) {\n        long a = st.top();\n        st.pop();\n        long b = operand[i];\n        if(op[i - 1] == \"+\") {\n            st.push(a + b);\n        } else if(op[i - 1] == \"-\") {\n            st.push(a - b);\n        } else if(op[i - 1] == \"*\") {\n            st.push(a * b);\n        } else if(op[i - 1] == \"/\") {\n            st.push(a / b);\n        } else if(op[i - 1] == \"**\") {\n            st.push(pow(a, b));\n        }\n    }\n    return st.top();"}
{"task_id": "HumanEval/161", "completion": "\n    if(s.empty())\n        return s;\n    if(std::all_of(s.begin(), s.end(), [](char c){return !std::isalpha(c);}))\n        return std::string(s.rbegin(), s.rend());\n    for(auto& c : s)\n        if(std::isalpha(c))\n            c = std::islower(c) ? std::toupper(c) : std::tolower(c);\n    return s;"}
{"task_id": "HumanEval/162", "completion": "\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    std::string hash;\n    hash.resize(32);\n    MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)hash.data());\n    return hash;"}
{"task_id": "HumanEval/163", "completion": "\n    std::vector<long> result;\n    if (a > b) {\n        std::swap(a, b);\n    }\n    for (long i = a; i <= b; i++) {\n        std::string s = std::to_string(i);\n        for (char c : s) {\n            if (c % 2 == 0) {\n                result.push_back(c - '0');\n            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;"}
