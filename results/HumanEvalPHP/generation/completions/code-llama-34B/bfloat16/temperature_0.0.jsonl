{"task_id": "HumanEval/0", "completion": "\n    $numbers = array_map(function($number) {\n        return (float) $number;\n    }, $numbers);\n    sort($numbers);\n    $count = count($numbers);\n    for ($i = 0; $i < $count - 1; $i++) {\n        if ($numbers[$i + 1] - $numbers[$i] < $threshold) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "HumanEval/1", "completion": "\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_groups = [];\n    $paren_group = \"\";\n    $open_parens = 0;\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n        if ($char == \"(\") {\n            $open_parens++;\n        } else if ($char == \")\") {\n            $open_parens--;\n        }\n        $paren_group .= $char;\n        if ($open_parens == 0) {\n            array_push($paren_groups, $paren_group);\n            $paren_group = \"\";\n        }\n    }\n    return $paren_groups;\n}"}
{"task_id": "HumanEval/2", "completion": "\n    return $number - floor($number);\n}"}
{"task_id": "HumanEval/3", "completion": "\n    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "HumanEval/4", "completion": "\n    $mean = array_sum($numbers) / count($numbers);\n    $deviations = array_map(function($x) use ($mean) {\n        return abs($x - $mean);\n    }, $numbers);\n    return array_sum($deviations) / count($deviations);\n}\n"}
{"task_id": "HumanEval/5", "completion": "\n    $result = array();\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        $result[] = $numbers[$i];\n        if ($i < $count - 1) {\n            $result[] = $delimeter;\n        }\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/6", "completion": "\n    $paren_groups = explode(\" \", $paren_string);\n    $max_levels = array();\n    foreach ($paren_groups as $paren_group) {\n        $max_levels[] = parse_parens($paren_group);\n    }\n    return $max_levels;\n}\n"}
{"task_id": "HumanEval/7", "completion": "\n    $result = array();\n    foreach ($strings as $string) {\n        if (strpos($string, $substring) !== false) {\n            $result[] = $string;\n        }\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/8", "completion": "\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n        $product *= $number;\n    }\n    return array($sum, $product);\n}\n"}
{"task_id": "HumanEval/9", "completion": "\n    $max = 0;\n    $result = array();\n    foreach ($numbers as $number) {\n        $max = max($max, $number);\n        $result[] = $max;\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/10", "completion": "\n    $len = strlen($string);\n    $i = $len - 1;\n    while ($i > 0) {\n        $suffix = substr($string, $i);\n        if (is_palindrome($suffix)) {\n            return $string . strrev(substr($string, 0, $i));\n        }\n        $i--;\n    }\n    return $string . strrev($string);\n}\n"}
{"task_id": "HumanEval/11", "completion": "\n    $result = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] == $b[$i]) ? \"0\" : \"1\";\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/12", "completion": "\n    if (count($strings) == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n    return $longest;\n}\n"}
{"task_id": "HumanEval/13", "completion": "\n    if ($a == 0) {\n        return $b;\n    }\n    return greatest_common_divisor($b % $a, $a);\n}\n"}
{"task_id": "HumanEval/14", "completion": "\n    $prefixes = array();\n    for ($i = 0; $i < strlen($string); $i++) {\n        $prefixes[] = substr($string, 0, $i + 1);\n    }\n    return $prefixes;\n}\n"}
{"task_id": "HumanEval/15", "completion": "\n    $result = \"\";\n    for ($i = 0; $i <= $n; $i++) {\n        $result .= $i . \" \";\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/16", "completion": "\n    $string = strtolower($string);\n    $characters = str_split($string);\n    $characters = array_unique($characters);\n    return count($characters);\n}\n"}
{"task_id": "HumanEval/17", "completion": "\n    $music_array = str_split($music_string);\n    $beats = [];\n    $beat_count = 0;\n    foreach ($music_array as $note) {\n        if ($note == 'o') {\n            $beat_count = 4;\n        } elseif ($note == '|') {\n            $beat_count = 2;\n        } elseif ($note == '.') {\n            $beat_count = 1;\n        }\n        $beats[] = $beat_count;\n    }\n    return $beats;\n}\n"}
{"task_id": "HumanEval/18", "completion": "\n    $count = 0;\n    $len = strlen($substring);\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (substr($string, $i, $len) == $substring) {\n            $count++;\n        }\n    }\n    return $count;\n}\n"}
{"task_id": "HumanEval/19", "completion": "\n    $nums = explode(\" \", $numbers);\n    sort($nums);\n    return implode(\" \", $nums);\n}\n"}
{"task_id": "HumanEval/20", "completion": "\n    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $diff = abs($closest[0] - $closest[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $newDiff = abs($numbers[$i] - $numbers[$j]);\n            if ($newDiff < $diff) {\n                $diff = $newDiff;\n                $closest[0] = $numbers[$i];\n                $closest[1] = $numbers[$j];\n            }\n        }\n    }\n    return $closest;\n}\n"}
{"task_id": "HumanEval/21", "completion": "\n    $min = min($numbers);\n    $max = max($numbers);\n    $spread = $max - $min;\n    $result = array();\n    foreach ($numbers as $num) {\n        $result[] = ($num - $min) / $spread;\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/22", "completion": "\n    $integers = array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n            $integers[] = $value;\n        }\n    }\n    return $integers;\n}\n"}
{"task_id": "HumanEval/23", "completion": "\n    return count(str_split($string));\n}\n"}
{"task_id": "HumanEval/24", "completion": "\n    $largest = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $largest = $i;\n        }\n    }\n    return $largest;\n}\n"}
{"task_id": "HumanEval/25", "completion": "\n    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n    return $factors;\n}\n"}
{"task_id": "HumanEval/26", "completion": "\n    $result = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number, $result)) {\n            $result[] = $number;\n        }\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/27", "completion": "\n    $flipped = \"\";\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (ctype_lower($char)) {\n            $flipped .= strtoupper($char);\n        } else if (ctype_upper($char)) {\n            $flipped .= strtolower($char);\n        } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n}\n\necho flip_case(\"Hello\");"}
{"task_id": "HumanEval/28", "completion": "\n    $result = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/29", "completion": "\n    $result = array();\n    foreach ($strings as $string) {\n        if (strpos($string, $prefix) === 0) {\n            $result[] = $string;\n        }\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/30", "completion": "\n    $positive = array();\n    foreach ($l as $n) {\n        if ($n > 0) {\n            $positive[] = $n;\n        }\n    }\n    return $positive;\n}\n"}
{"task_id": "HumanEval/31", "completion": "\n    if ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    for ($i = 3; $i * $i <= $n; $i += 2) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "HumanEval/33", "completion": "\n    $l_prime = $l;\n    $third_indicies = array_filter(array_keys($l), function($i) {\n        return $i % 3 == 0;\n    });\n    foreach ($third_indicies as $i) {\n        $l_prime[$i] = sort($l[$i]);\n    }\n    return $l_prime;\n}"}
{"task_id": "HumanEval/34", "completion": "\n    sort($l);\n    $l = array_unique($l);\n    return $l;\n}\n"}
{"task_id": "HumanEval/35", "completion": "\n    $max = $l[0];\n    foreach ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n        }\n    }\n    return $max;\n}\n"}
{"task_id": "HumanEval/36", "completion": "\n    $count = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if (($i % 11 == 0 || $i % 13 == 0) && strpos($i, '7') !== false) {\n            $count++;\n        }\n    }\n    return $count;\n}\n"}
{"task_id": "HumanEval/37", "completion": "\n    $l_prime = array();\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 2 == 0) {\n            $l_prime[] = $l[$i];\n        } else {\n            $l_prime[] = $l[$i];\n            sort($l_prime);\n        }\n    }\n    return $l_prime;\n}\n"}
{"task_id": "HumanEval/39", "completion": "\n    $fib = [1, 2];\n    $i = 2;\n    while (count($fib) < $n) {\n        $i++;\n        $fib[] = $fib[$i - 1] + $fib[$i - 2];\n    }\n    return $fib[$n - 1];\n}\n"}
{"task_id": "HumanEval/40", "completion": "\n    $n = count($l);\n    if ($n < 3) {\n        return false;\n    }\n    sort($l);\n    for ($i = 0; $i < $n - 2; $i++) {\n        $j = $i + 1;\n        $k = $n - 1;\n        while ($j < $k) {\n            $sum = $l[$i] + $l[$j] + $l[$k];\n            if ($sum == 0) {\n                return true;\n            } elseif ($sum < 0) {\n                $j++;\n            } else {\n                $k--;\n            }\n        }\n    }\n    return false;\n}\n"}
{"task_id": "HumanEval/41", "completion": "\n    $collisions = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $n - 1; $j > $i; $j--) {\n            $collisions++;\n        }\n    }\n    return $collisions;\n}\n"}
{"task_id": "HumanEval/42", "completion": "\n    $r = array();\n    foreach ($l as $v) {\n        $r[] = $v + 1;\n    }\n    return $r;\n}\n"}
{"task_id": "HumanEval/43", "completion": "\n    $seen = array();\n    foreach ($l as $e) {\n        if (isset($seen[-$e])) {\n            return true;\n        }\n        $seen[$e] = true;\n    }\n    return false;\n}\n"}
{"task_id": "HumanEval/44", "completion": "\n    $result = \"\";\n    while ($x > 0) {\n        $result = $x % $base . $result;\n        $x = floor($x / $base);\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/45", "completion": "\n    return ($a * $h) / 2;\n}\n"}
{"task_id": "HumanEval/46", "completion": "\n    $fib = [0,0,2,0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i] = $fib[$i-1] + $fib[$i-2] + $fib[$i-3] + $fib[$i-4];\n    }\n    return $fib[$n];\n}\n\necho fib4(5);\necho fib4(6);\necho fib4(7);"}
{"task_id": "HumanEval/47", "completion": "\n    $count = count($l); // count the number of numbers in array\n    sort($l); // sort the numbers\n    $middleval = floor(($count-1)/2); // find the middle value, or the lowest middle value\n    if ($count % 2) { // odd number, middle is the median\n        $median = $l[$middleval];\n    } else { // even number, calculate avg of 2 medians\n        $low = $l[$middleval];\n        $high = $l[$middleval+1];\n        $median = (($low+$high)/2);\n    }\n    return $median;\n}\n"}
{"task_id": "HumanEval/48", "completion": "\n    $text = strtolower($text);\n    $text = preg_replace('/[^a-z]/', '', $text);\n    $length = strlen($text);\n    for ($i = 0; $i < $length / 2; $i++) {\n        if ($text[$i] != $text[$length - $i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "HumanEval/49", "completion": "\n    $r = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $r = ($r * 2) % $p;\n    }\n    return $r;\n}\n"}
{"task_id": "HumanEval/51", "completion": "\n    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\");\n    $result = \"\";\n    for ($i = 0; $i < strlen($text); $i++) {\n        if (!in_array($text[$i], $vowels)) {\n            $result .= $text[$i];\n        }\n    }\n    return $result;\n}"}
{"task_id": "HumanEval/52", "completion": "\n    return array_reduce($l, function($acc, $x) use ($t) {\n        return $acc && $x < $t;\n    }, true);\n}\n"}
{"task_id": "HumanEval/53", "completion": "\n    return $x + $y;\n}\n"}
{"task_id": "HumanEval/54", "completion": "\n    $s0 = str_split($s0);\n    $s1 = str_split($s1);\n    sort($s0);\n    sort($s1);\n    return $s0 == $s1;\n}\n"}
{"task_id": "HumanEval/55", "completion": "\n    if ($n < 2) {\n        return $n;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n"}
{"task_id": "HumanEval/56", "completion": "\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $char = $brackets[$i];\n        if ($char == \"<\") {\n            array_push($stack, $char);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    return empty($stack);\n}\n"}
{"task_id": "HumanEval/57", "completion": "\n    $increasing = true;\n    $decreasing = true;\n    for ($i = 0; $i < count($l) - 1; $i++) {\n        if ($l[$i] < $l[$i + 1]) {\n            $decreasing = false;\n        }\n        if ($l[$i] > $l[$i + 1]) {\n            $increasing = false;\n        }\n    }\n    return $increasing || $decreasing;\n}\n"}
{"task_id": "HumanEval/58", "completion": "\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    sort($l1);\n    sort($l2);\n    $l3 = array();\n    $i = $j = 0;\n    while ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } elseif ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n            $l3[] = $l1[$i];\n            $i++;\n            $j++;\n        }\n    }\n    return $l3;\n}\n"}
{"task_id": "HumanEval/59", "completion": "\n    $largest = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $largest = $i;\n            $n /= $i;\n            $i--;\n        }\n    }\n    return $largest;\n}\n\necho largest_prime_factor(13195);\n"}
{"task_id": "HumanEval/60", "completion": "\n    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n}\n"}
{"task_id": "HumanEval/61", "completion": "\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $char = $brackets[$i];\n        if ($char == \"(\") {\n            array_push($stack, $char);\n        } else {\n            if (count($stack) == 0) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    return count($stack) == 0;\n}\n"}
{"task_id": "HumanEval/62", "completion": "\n    $n = count($xs);\n    if ($n == 1) {\n        return array();\n    }\n    $ys = array();\n    for ($i = 1; $i < $n; $i++) {\n        $ys[] = $xs[$i] * $i;\n    }\n    return $ys;\n}\n"}
{"task_id": "HumanEval/63", "completion": "\n    $fibfib = [0, 0, 1];\n    for ($i = 3; $i <= $n; $i++) {\n        $fibfib[$i] = $fibfib[$i - 1] + $fibfib[$i - 2] + $fibfib[$i - 3];\n    }\n    return $fibfib[$n];\n}\n\necho fibfib(1);\necho fibfib(5);\necho fibfib(8);\n"}
{"task_id": "HumanEval/64", "completion": "\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $count = 0;\n    $s = strtolower($s);\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (in_array($s[$i], $vowels)) {\n            $count++;\n        }\n    }\n    return $count;\n}"}
{"task_id": "HumanEval/65", "completion": "\n    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n    }\n    return substr($x, $shift) . substr($x, 0, $shift);\n}\n"}
{"task_id": "HumanEval/66", "completion": "\n    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_upper($s[$i])) {\n            $sum += ord($s[$i]);\n        }\n    }\n    return $sum;\n}\n"}
{"task_id": "HumanEval/67", "completion": "\n    $fruits = explode(\" \", $s);\n    $apples = $fruits[0];\n    $oranges = $fruits[4];\n    return $n - $apples - $oranges;\n}"}
{"task_id": "HumanEval/68", "completion": "\n    $smallest = null;\n    $smallestIndex = null;\n    $smallestEven = null;\n    $smallestEvenIndex = null;\n    foreach ($arr as $index => $node) {\n        if ($smallest === null || $node < $smallest) {\n            $smallest = $node;\n            $smallestIndex = $index;\n        }\n        if ($node % 2 === 0) {\n            if ($smallestEven === null || $node < $smallestEven) {\n                $smallestEven = $node;\n                $smallestEvenIndex = $index;\n            }\n        }\n    }\n    if ($smallestEven === null) {\n        return [];\n    }\n    return [$smallestEven, $smallestEvenIndex];\n}\n"}
{"task_id": "HumanEval/69", "completion": "\n    $freq = array_count_values($lst);\n    $max = max($freq);\n    $result = -1;\n    foreach ($freq as $key => $value) {\n        if ($value >= $key && $value > $max) {\n            $max = $value;\n            $result = $key;\n        }\n    }\n    return $result;\n}"}
{"task_id": "HumanEval/70", "completion": "\n    if (count($lst) == 0) {\n        return array();\n    }\n    $min = min($lst);\n    $max = max($lst);\n    $min_index = array_search($min, $lst);\n    $max_index = array_search($max, $lst);\n    $new_lst = array();\n    if ($min_index < $max_index) {\n        $new_lst[] = $min;\n        $new_lst[] = $max;\n    } else {\n        $new_lst[] = $max;\n        $new_lst[] = $min;\n    }\n    $lst = array_diff($lst, array($min, $max));\n    return array_merge($new_lst, strange_sort_list($lst));\n}\n"}
{"task_id": "HumanEval/71", "completion": "\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2;\n        return round(sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)), 2);\n    }\n    return -1;\n}"}
{"task_id": "HumanEval/72", "completion": "\n    $sum = 0;\n    $len = count($q);\n    for ($i = 0; $i < $len; $i++) {\n        $sum += $q[$i];\n    }\n    if ($sum <= $w) {\n        if (is_palindromic($q)) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "HumanEval/73", "completion": "\n    $len = count($arr);\n    $left = 0;\n    $right = $len - 1;\n    $count = 0;\n    while ($left < $right) {\n        if ($arr[$left] != $arr[$right]) {\n            $count++;\n        }\n        $left++;\n        $right--;\n    }\n    return $count;\n}\n"}
{"task_id": "HumanEval/74", "completion": "\n    $total1 = 0;\n    $total2 = 0;\n    foreach ($lst1 as $str) {\n        $total1 += strlen($str);\n    }\n    foreach ($lst2 as $str) {\n        $total2 += strlen($str);\n    }\n    if ($total1 < $total2) {\n        return $lst1;\n    } else {\n        return $lst2;\n    }\n}"}
{"task_id": "HumanEval/75", "completion": "\n    // your code here\n    $prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    $result = false;\n    for ($i = 0; $i < count($prime); $i++) {\n        for ($j = $i + 1; $j < count($prime); $j++) {\n            for ($k = $j + 1; $k < count($prime); $k++) {\n                if ($prime[$i] * $prime[$j] * $prime[$k] == $a) {\n                    $result = true;\n                }\n            }\n        }\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/76", "completion": "\n    $i = 0;\n    while ($x > 1) {\n        $x /= $n;\n        $i++;\n    }\n    return $x == 1 && $i > 0;\n}\n"}
{"task_id": "HumanEval/77", "completion": "\n    $cube = pow($a, 1/3);\n    return (int)$cube == $cube;\n}"}
{"task_id": "HumanEval/78", "completion": "\n    $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587,"}
{"task_id": "HumanEval/79", "completion": "\n    $binary = decbin($decimal);\n    return \"db\" . $binary . \"db\";\n}\n"}
{"task_id": "HumanEval/80", "completion": "\n    if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval/81", "completion": "\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[] = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n"}
{"task_id": "HumanEval/82", "completion": "\n    $length = strlen($string);\n    if ($length == 2) {\n        return true;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval/83", "completion": "\n    $count = 0;\n    for ($i = 1; $i < 10; $i++) {\n        $count += 9 * pow(10, $n - 1);\n    }\n    for ($i = 1; $i < 10; $i++) {\n        $count += 9 * pow(10, $n - 2);\n    }\n    return $count;\n}\n\n$n = 1;\n$result = starts_one_ends($n);\necho $result;\n"}
{"task_id": "HumanEval/84", "completion": "\n    $binary = decbin($N);\n    $sum = 0;\n    for ($i = 0; $i < strlen($binary); $i++) {\n        $sum += $binary[$i];\n    }\n    return $sum;\n}\n\necho solve(1000);\necho solve(150);\necho solve(147);\n"}
{"task_id": "HumanEval/85", "completion": "\n    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n"}
{"task_id": "HumanEval/86", "completion": "\n    $words = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n        $chars = str_split($word);\n        sort($chars);\n        $result .= implode(\"\", $chars) . \" \";\n    }\n    return trim($result);\n}\n\necho anti_shuffle(\"Hello World!!!\");"}
{"task_id": "HumanEval/87", "completion": "\n    $result = [];\n    foreach ($lst as $key => $value) {\n        $index = array_search($x, $value);\n        if ($index !== false) {\n            $result[] = [$key, $index];\n        }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1] < $b[1] ? 1 : -1;\n        }\n        return $a[0] < $b[0] ? -1 : 1;\n    });\n    return $result;\n}\n"}
{"task_id": "HumanEval/88", "completion": "\n    if (empty($array)) {\n        return $array;\n    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n}\n"}
{"task_id": "HumanEval/89", "completion": "\n    $s = str_split($s);\n    $encrypted = \"\";\n    foreach ($s as $char) {\n        $encrypted .= chr(ord($char) + 2 * 2);\n    }\n    return $encrypted;\n}\n"}
{"task_id": "HumanEval/90", "completion": "\n    if (count($lst) < 2) {\n        return null;\n    }\n    $smallest = $lst[0];\n    $next_smallest = null;\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $smallest) {\n            $next_smallest = $smallest;\n            $smallest = $lst[$i];\n        } else if ($lst[$i] < $next_smallest || $next_smallest === null) {\n            $next_smallest = $lst[$i];\n        }\n    }\n    return $next_smallest;\n}\n"}
{"task_id": "HumanEval/91", "completion": "\n    $boredom = 0;\n    $words = explode('.', $S);\n    foreach ($words as $word) {\n        if (strpos($word, 'I') === 0) {\n            $boredom++;\n        }\n    }\n    return $boredom;\n}\n"}
{"task_id": "HumanEval/92", "completion": "\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if (($x + $y) == $z || ($x + $z) == $y || ($y + $z) == $x) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval/93", "completion": "\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $encoded = '';\n    for ($i = 0; $i < strlen($message); $i++) {\n        $char = $message[$i];\n        if (ctype_lower($char)) {\n            $char = strtoupper($char);\n        } else {\n            $char = strtolower($char);\n        }\n        if (in_array($char, $vowels)) {\n            $index = array_search($char, $vowels);\n            $char = $vowels[($index + 2) % 5];\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n}\n"}
{"task_id": "HumanEval/94", "completion": "\n    $max = 0;\n    $max_sum = 0;\n    foreach ($lst as $num) {\n        if ($num > $max) {\n            $max = $num;\n        }\n    }\n    $max_str = strval($max);\n    for ($i = 0; $i < strlen($max_str); $i++) {\n        $max_sum += intval($max_str[$i]);\n    }\n    return $max_sum;\n}"}
{"task_id": "HumanEval/95", "completion": "\n    if (count($dict) == 0) {\n        return false;\n    }\n    $first_key = array_keys($dict)[0];\n    $first_key_lower = strtolower($first_key);\n    $first_key_upper = strtoupper($first_key);\n    if ($first_key == $first_key_lower) {\n        foreach ($dict as $key => $value) {\n            if ($key != strtolower($key)) {\n                return false;\n            }\n        }\n        return true;\n    } else if ($first_key == $first_key_upper) {\n        foreach ($dict as $key => $value) {\n            if ($key != strtoupper($key)) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "HumanEval/96", "completion": "\n    $primes = array();\n    for ($i = 2; $i < $n; $i++) {\n        $isPrime = true;\n        for ($j = 2; $j < $i; $j++) {\n            if ($i % $j == 0) {\n                $isPrime = false;\n                break;\n            }\n        }\n        if ($isPrime) {\n            $primes[] = $i;\n        }\n    }\n    return $primes;\n}\n"}
{"task_id": "HumanEval/97", "completion": "\n    return (int)($a % 10) * (int)($b % 10);\n}"}
{"task_id": "HumanEval/98", "completion": "\n    $vowels = ['A', 'E', 'I', 'O', 'U'];\n    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($i % 2 == 0 && in_array($s[$i], $vowels)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_upper(\"aBCdEf\");\necho count_upper(\"abcdefg\");\necho count_upper(\"dBBE\");\n"}
{"task_id": "HumanEval/99", "completion": "\n    $value = floatval($value);\n    $floor = floor($value);\n    $ceil = ceil($value);\n    $diff_floor = abs($value - $floor);\n    $diff_ceil = abs($value - $ceil);\n    if ($diff_floor < $diff_ceil) {\n        return $floor;\n    } elseif ($diff_floor > $diff_ceil) {\n        return $ceil;\n    } else {\n        return $value < 0 ? $floor : $ceil;\n    }\n}"}
{"task_id": "HumanEval/100", "completion": "\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n        $n = $n % 2 == 0 ? $n + 1 : $n + 2;\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/101", "completion": "\n    return explode(\" \", $s);\n}"}
{"task_id": "HumanEval/102", "completion": "\n    $result = -1;\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $result = $i;\n        }\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/103", "completion": "\n    if ($n > $m) {\n        return -1;\n    }\n    $sum = 0;\n    for ($i = $n; $i <= $m; $i++) {\n        $sum += $i;\n    }\n    $avg = round($sum / ($m - $n + 1));\n    return decbin($avg);\n}\n\necho rounded_avg(1, 5);\necho rounded_avg(7, 5);\necho rounded_avg(10, 20);\necho rounded_avg(20, 33);\n"}
{"task_id": "HumanEval/104", "completion": "\n    $result = array();\n    foreach ($x as $value) {\n        $flag = true;\n        $value = strval($value);\n        for ($i = 0; $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n                $flag = false;\n                break;\n            }\n        }\n        if ($flag) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n}\n"}
{"task_id": "HumanEval/105", "completion": "\n    $result = [];\n    foreach ($arr as $item) {\n        if ($item >= 1 && $item <= 9) {\n            $result[] = $item;\n        }\n    }\n    rsort($result);\n    $result = array_map(function ($item) {\n        switch ($item) {\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n        }\n    }, $result);\n    return $result;\n}\n"}
{"task_id": "HumanEval/106", "completion": "\n    $result = [];\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = factorial($i);\n        } else {\n            $result[] = sum($i);\n        }\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/107", "completion": "\n    $even = 0;\n    $odd = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if (is_palindrome($i)) {\n            if ($i % 2 == 0) {\n                $even++;\n            } else {\n                $odd++;\n            }\n        }\n    }\n    return [$even, $odd];\n}\n"}
{"task_id": "HumanEval/108", "completion": "\n    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num = (string)$num;\n        for ($i = 0; $i < strlen($num); $i++) {\n            $sum += $num[$i];\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return $count;\n}"}
{"task_id": "HumanEval/109", "completion": "\n    $n = count($arr);\n    if ($n == 0) {\n        return true;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 1; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            $count++;\n        }\n    }\n    if ($count == 0 || $count == 1) {\n        return true;\n    }\n    return false;\n}"}
{"task_id": "HumanEval/110", "completion": "\n    $even = 0;\n    $odd = 0;\n    foreach ($lst1 as $num) {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    foreach ($lst2 as $num) {\n        if ($num % 2 == 0) {\n            $even--;\n        } else {\n            $odd--;\n        }\n    }\n    if ($even >= 0) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n"}
{"task_id": "HumanEval/111", "completion": "\n    $arr = explode(\" \", $test);\n    $count = array_count_values($arr);\n    $max = max($count);\n    $result = array();\n    foreach ($count as $key => $value) {\n        if ($value == $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/112", "completion": "\n    $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[] = $value;\n        }\n    }\n    $result = implode(\"\", $result);\n    if (strrev($result) == $result) {\n        return [$result, true];\n    } else {\n        return [$result, false];\n    }\n}\n"}
{"task_id": "HumanEval/113", "completion": "\n    $result = [];\n    foreach ($lst as $str) {\n        $count = 0;\n        for ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] % 2 != 0) {\n                $count++;\n            }\n        }\n        $result[] = \"the number of odd elements $count in the string $count of the input.\";\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/114", "completion": "\n    $min = 0;\n    $sum = 0;\n    foreach ($nums as $num) {\n        $sum += $num;\n        $min = min($min, $sum);\n    }\n    return $min;\n}\n"}
{"task_id": "HumanEval/115", "completion": "\n    $count = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n    $water = array_fill(0, $row, array_fill(0, $col, 0));\n    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n            $water[$i][$j] = $grid[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n            if ($water[$i][$j] > 0) {\n                $count++;\n                $water[$i][$j] = 0;\n                $water[$i][$j] = fill_water($water, $i, $j, $capacity);\n            }\n        }\n    }\n    return $count;\n}\n"}
{"task_id": "HumanEval/116", "completion": "\n    $ones = array_map(function($n) {\n        return substr_count(decbin($n), '1');\n    }, $arr);\n    array_multisort($ones, $arr);\n    return $arr;\n}\n"}
{"task_id": "HumanEval/117", "completion": "\n    $words = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (ctype_alpha($word[$i]) && !ctype_lower($word[$i])) {\n                $consonants++;\n            }\n        }\n        if ($consonants == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/118", "completion": "\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $word = str_split($word);\n    $word = array_reverse($word);\n    $vowel = '';\n    $found = false;\n    foreach ($word as $letter) {\n        if (in_array($letter, $vowels)) {\n            $vowel = $letter;\n            $found = true;\n        }\n        if ($found && !in_array($letter, $vowels)) {\n            break;\n        }\n    }\n    return $vowel;\n}"}
{"task_id": "HumanEval/119", "completion": "\n    $left = 0;\n    $right = 0;\n    foreach ($lst as $str) {\n        foreach (str_split($str) as $char) {\n            if ($char == '(') {\n                $left++;\n            } else {\n                $right++;\n            }\n        }\n    }\n    return $left == $right ? 'Yes' : 'No';\n}\n"}
{"task_id": "HumanEval/120", "completion": "\n    $len = count($arr);\n    if ($k == 0) {\n        return [];\n    }\n    if ($k == $len) {\n        sort($arr);\n        return $arr;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n        }\n    }\n    $res = [];\n    for ($i = 0; $i < $len; $i++) {\n        if ($arr[$i] == $max) {\n            $res[] = $arr[$i];\n        }\n    }\n    sort($res);\n    return array_slice($res, -$k);\n}\n"}
{"task_id": "HumanEval/121", "completion": "\n    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 2 == 0 && $lst[$i] % 2 != 0) {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n"}
{"task_id": "HumanEval/122", "completion": "\n    $sum = 0;\n    for ($i = 0; $i < $k; $i++) {\n        $num = $arr[$i];\n        if ($num < 100) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\n"}
{"task_id": "HumanEval/123", "completion": "\n    $result = [];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = 3 * $n + 1;\n        }\n        if ($n % 2 == 1) {\n            $result[] = $n;\n        }\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/124", "completion": "\n    $date = explode(\"-\", $date);\n    $month = $date[0];\n    $day = $date[1];\n    $year = $date[2];\n    if ($month < 1 || $month > 12) {\n        return false;\n    }\n    if ($day < 1 || $day > 31) {\n        return false;\n    }\n    if ($month == 2 && $day > 29) {\n        return false;\n    }\n    if ($month == 1 || $month == 3 || $month == 5 || $month == 7 || $month == 8 || $month == 10 || $month == 12) {\n        if ($day > 31) {\n            return false;\n        }\n    }\n    if ($month == 4 || $month == 6 || $month == 9 || $month == 11) {\n        if ($day > 30) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval/125", "completion": "\n    $words = explode(\" \", $txt);\n    if (count($words) > 1) {\n        return $words;\n    }\n    $words = explode(\",\", $txt);\n    if (count($words) > 1) {\n        return $words;\n    }\n    $count = 0;\n    for ($i = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 == 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n"}
{"task_id": "HumanEval/126", "completion": "\n  $prev = null;\n  foreach ($lst as $item) {\n    if ($prev !== null && $prev > $item) {\n      return false;\n    }\n    $prev = $item;\n  }\n  return true;\n}\n"}
{"task_id": "HumanEval/127", "completion": "\n    $start1 = $interval1[0];\n    $end1 = $interval1[1];\n    $start2 = $interval2[0];\n    $end2 = $interval2[1];\n    $start = max($start1, $start2);\n    $end = min($end1, $end2);\n    if ($start > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if (isPrime($length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n"}
{"task_id": "HumanEval/128", "completion": "\n    if (empty($arr)) {\n        return null;\n    }\n    $sign = 1;\n    $sum = 0;\n    foreach ($arr as $value) {\n        if ($value < 0) {\n            $sign *= -1;\n        }\n        $sum += abs($value);\n    }\n    return $sign * $sum;\n}\n"}
{"task_id": "HumanEval/129", "completion": "\n    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $visited[0][0] = true;\n    $queue = array(array(0, 0, array(1)));\n    $min = array(1);\n    while (!empty($queue)) {\n        $current = array_shift($queue);\n        $x = $current[0];\n        $y = $current[1];\n        $path = $current[2];\n        if (count($path) == $k) {\n            if (compare($path, $min) < 0) {\n                $min = $path;\n            }\n            continue;\n        }\n        $neighbors = getNeighbors($grid, $x, $y, $visited);\n        foreach ($neighbors as $neighbor) {\n            $queue[] = array($neighbor[0], $neighbor[1], array_merge($path, array($grid[$neighbor[0]][$neighbor[1]])));\n        }\n    }\n    return $min;\n}\n"}
{"task_id": "HumanEval/130", "completion": "\n    $result = [1, 3];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = 1 + $i / 2;\n        } else {\n            $result[] = $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/131", "completion": "\n    $result = 1;\n    $n = strval($n);\n    for ($i = 0; $i < strlen($n); $i++) {\n        if (intval($n[$i]) % 2 != 0) {\n            $result *= intval($n[$i]);\n        }\n    }\n    return $result;\n}"}
{"task_id": "HumanEval/132", "completion": "\n    $stack = [];\n    $len = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        $char = $string[$i];\n        if ($char === '[') {\n            array_push($stack, $char);\n        } else {\n            if (count($stack) === 0) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    return count($stack) > 0;\n}\n"}
{"task_id": "HumanEval/133", "completion": "\n    $sum = 0;\n    foreach ($lst as $num) {\n        $sum += ceil($num) ** 2;\n    }\n    return $sum;\n}\n"}
{"task_id": "HumanEval/134", "completion": "\n    $txt = trim($txt);\n    $last_char = substr($txt, -1);\n    $last_char_is_letter = ctype_alpha($last_char);\n    $last_char_is_not_part_of_word = strpos($txt, $last_char) === strlen($txt) - 1;\n    return $last_char_is_letter && $last_char_is_not_part_of_word;\n}"}
{"task_id": "HumanEval/135", "completion": "\n    $max = -1;\n    $max_index = -1;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] < $max) {\n            return $i;\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n            $max_index = $i;\n        }\n    }\n    return $max_index;\n}\n"}
{"task_id": "HumanEval/136", "completion": "\n    $largest = null;\n    $smallest = null;\n    foreach ($lst as $item) {\n        if ($item < 0 && ($largest === null || $item > $largest)) {\n            $largest = $item;\n        }\n        if ($item > 0 && ($smallest === null || $item < $smallest)) {\n            $smallest = $item;\n        }\n    }\n    return array($largest, $smallest);\n}\n"}
{"task_id": "HumanEval/137", "completion": "\n    if (is_string($a)) {\n        $a = str_replace(',', '.', $a);\n    }\n    if (is_string($b)) {\n        $b = str_replace(',', '.', $b);\n    }\n    if ($a == $b) {\n        return null;\n    }\n    return $a > $b ? $a : $b;\n}\n"}
{"task_id": "HumanEval/138", "completion": "\n    // Good luck!\n    $sum = 0;\n    $count = 0;\n    for($i = 1; $i <= $n; $i++){\n        if($i % 2 == 0){\n            $sum += $i;\n            $count++;\n        }\n    }\n    if($count == 4){\n        return true;\n    }\n    return false;\n}"}
{"task_id": "HumanEval/139", "completion": "\n    $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}"}
{"task_id": "HumanEval/140", "completion": "\n    $text = str_replace(\" \", \"_\", $text);\n    $text = preg_replace(\"/_{2,}/\", \"-\", $text);\n    return $text;\n}\n\necho fix_spaces(\" Example\") . PHP_EOL;\necho fix_spaces(\" Example 1\") . PHP_EOL;\necho fix_spaces(\" Example 2\") . PHP_EOL;\necho fix_spaces(\" Example 3\") . PHP_EOL;"}
{"task_id": "HumanEval/141", "completion": "\n    $file_name_array = explode('.', $file_name);\n    $file_name_array_length = count($file_name_array);\n    if ($file_name_array_length != 2) {\n        return 'No';\n    }\n    $file_name_before_dot = $file_name_array[0];\n    $file_name_after_dot = $file_name_array[1];\n    if (strlen($file_name_before_dot) == 0) {\n        return 'No';\n    }\n    if (strlen($file_name_after_dot) == 0) {\n        return 'No';\n    }\n    if (strlen($file_name_before_dot) > 1) {\n        $file_name_before_dot_array = str_split($file_name_before_dot);\n        $file_name_before_dot_array_length = count($file_name_before_dot_array);\n        for ($i = 0; $i < $file_name_before_dot_array_length; $i++) {\n            if (is_numeric($file_name_before_dot_array[$i])) {\n                return 'No';\n            }\n        }\n    }\n    if (strlen($file_name_after_dot) > 3) {\n        return 'No';\n    }\n    if (strlen($file_name_after_dot) == 3) {\n        $file_name_after_dot_array = str_split($file_name_after_dot);\n        $file_name_after_dot_array_length = count($file_name_after_dot_array);\n        for ($i = 0; $i < $file_name_after_dot_array_length; $i++) {\n            if (is_numeric($file_name_after_dot_array[$i])) {\n                return 'No';\n            }\n        }\n    }\n    if (strlen($file_name_after_dot) == 2) {\n        $file_name_after_dot_array = str_split($file_name_after_dot);\n        $file"}
{"task_id": "HumanEval/142", "completion": "\n    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $lst[$i] = $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n            $lst[$i] = $lst[$i] * $lst[$i] * $lst[$i];\n        }\n        $sum += $lst[$i];\n    }\n    return $sum;\n}\n"}
{"task_id": "HumanEval/143", "completion": "\n    $words = explode(' ', $sentence);\n    $primeWords = [];\n    foreach ($words as $word) {\n        if (isPrime(strlen($word))) {\n            $primeWords[] = $word;\n        }\n    }\n    return implode(' ', $primeWords);\n}\n"}
{"task_id": "HumanEval/144", "completion": "\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0] * $n[1];\n    $n = $n[0] * $x[1];\n    if ($x % $n == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"}
{"task_id": "HumanEval/145", "completion": "\n    $sums = [];\n    foreach ($nums as $key => $num) {\n        $sums[$key] = sum_digits($num);\n    }\n    array_multisort($sums, $nums);\n    return $nums;\n}\n"}
{"task_id": "HumanEval/146", "completion": "\n    $count = 0;\n    foreach ($nums as $num) {\n        if ($num > 10 && isOdd($num)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n"}
{"task_id": "HumanEval/147", "completion": "\n    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}"}
{"task_id": "HumanEval/148", "completion": "\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $pos1 = array_search($planet1, $planets);\n    $pos2 = array_search($planet2, $planets);\n    if ($pos1 === false || $pos2 === false) {\n        return array();\n    }\n    if ($pos1 > $pos2) {\n        $tmp = $pos1;\n        $pos1 = $pos2;\n        $pos2 = $tmp;\n    }\n    return array_slice($planets, $pos1 + 1, $pos2 - $pos1 - 1);\n}"}
{"task_id": "HumanEval/149", "completion": "\n    $result = [];\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n"}
{"task_id": "HumanEval/150", "completion": "\n    if (is_prime($n)) {\n        return $x;\n    } else {\n        return $y;\n    }\n}\n"}
{"task_id": "HumanEval/151", "completion": "\n    $sum = 0;\n    foreach ($lst as $num) {\n        if (is_int($num) && $num % 2 != 0 && $num > 0) {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n"}
{"task_id": "HumanEval/152", "completion": "\n    $result = [];\n    for ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n}"}
{"task_id": "HumanEval/153", "completion": "\n    $strongest_extension = null;\n    $strongest_extension_strength = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i])) {\n                $extension_strength++;\n            } else if (ctype_lower($extension[$i])) {\n                $extension_strength--;\n            }\n        }\n        if ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension = $extension;\n            $strongest_extension_strength = $extension_strength;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}"}
{"task_id": "HumanEval/154", "completion": "\n    $len = strlen($b);\n    for ($i = 0; $i < $len; $i++) {\n        $b = substr($b, 1) . substr($b, 0, 1);\n        if (strpos($a, $b) !== false) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "HumanEval/155", "completion": "\n    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n    return [$even, $odd];\n}\n\necho even_odd_count(-12);\n"}
{"task_id": "HumanEval/156", "completion": "\n    $roman = '';\n    $roman_numerals = array(\n        'M'  => 1000,\n        'D'  => 500,\n        'C'  => 100,\n        'L'  => 50,\n        'X'  => 10,\n        'V'  => 5,\n        'I'  => 1\n    );\n    foreach ($roman_numerals as $key => $value) {\n        while ($number >= $value) {\n            $roman .= $key;\n            $number -= $value;\n        }\n    }\n    return $roman;\n}\n"}
{"task_id": "HumanEval/157", "completion": "\n    if ($a * $a + $b * $b == $c * $c) {\n        return true;\n    } else if ($a * $a + $c * $c == $b * $b) {\n        return true;\n    } else if ($b * $b + $c * $c == $a * $a) {\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "HumanEval/158", "completion": "\n    $max_word = \"\";\n    $max_count = 0;\n    foreach ($words as $word) {\n        $count = count_chars($word, 1);\n        if ($count > $max_count) {\n            $max_word = $word;\n            $max_count = $count;\n        }\n    }\n    return $max_word;\n}\n"}
{"task_id": "HumanEval/159", "completion": "\n    $eaten = $number + $need;\n    $left = $remaining - $need;\n    if ($left < 0) {\n        $left = 0;\n    }\n    return [$eaten, $left];\n}\n"}
{"task_id": "HumanEval/160", "completion": "\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n        $result = eval(\"return $result {$operator[$i]} {$operand[$i + 1]};\");\n    }\n    return $result;\n}\n"}
{"task_id": "HumanEval/161", "completion": "\n    // your code here\n    $result = '';\n    $isLetter = false;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_alpha($s[$i])) {\n            $isLetter = true;\n            if (ctype_upper($s[$i])) {\n                $result .= strtolower($s[$i]);\n            } else {\n                $result .= strtoupper($s[$i]);\n            }\n        } else {\n            $result .= $s[$i];\n        }\n    }\n    if (!$isLetter) {\n        return strrev($s);\n    }\n    return $result;\n}\n\necho solve(\"1234\");\necho solve(\"ab\");\necho solve(\"#a@C\");\n"}
{"task_id": "HumanEval/162", "completion": "\n    if (empty($text)) {\n        return null;\n    }\n    return md5($text);\n}\n"}
{"task_id": "HumanEval/163", "completion": "\n    $result = array();\n    $min = min($a, $b);\n    $max = max($a, $b);\n    for ($i = $min; $i <= $max; $i++) {\n        $digits = str_split($i);\n        foreach ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $result[] = $digit;\n            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n"}
