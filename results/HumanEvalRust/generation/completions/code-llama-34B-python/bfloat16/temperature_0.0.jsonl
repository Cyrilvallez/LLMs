{"task_id": "HumanEval/0", "completion": "\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len() {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n                return true;\n            }\n        }\n    }\n    false"}
{"task_id": "HumanEval/1", "completion": "\n    let mut result = Vec::new();\n    let mut current_group = String::new();\n    let mut current_depth = 0;\n    for c in paren_string.chars() {\n        match c {\n            '(' => {\n                current_depth += 1;\n                current_group.push(c);\n            }\n            ')' => {\n                current_depth -= 1;\n                current_group.push(c);\n            }\n            _ => {}\n        }\n        if current_depth == 0 {\n            result.push(current_group);\n            current_group = String::new();\n        }\n    }\n    result"}
{"task_id": "HumanEval/2", "completion": "\n    number - number.floor()"}
{"task_id": "HumanEval/3", "completion": "\n    let mut balance = 0;\n    for &op in &operations {\n        balance += op;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false"}
{"task_id": "HumanEval/4", "completion": "\n    let mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n    let diff = numbers.iter().map(|&x| (x - mean).abs());\n    diff.sum::<f64>() / numbers.len() as f64"}
{"task_id": "HumanEval/5", "completion": "\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate() {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n            result.push(delimeter);\n        }\n    }\n    result"}
{"task_id": "HumanEval/6", "completion": "\n    let mut paren_string = paren_string.chars().peekable();\n    let mut max_depth = 0;\n    let mut depth = 0;\n    let mut depths = Vec::new();\n    while let Some(c) = paren_string.next() {\n        match c {\n            '(' => {\n                depth += 1;\n                if depth > max_depth {\n                    max_depth = depth;\n                }\n            }\n            ')' => {\n                depth -= 1;\n                if depth < 0 {\n                    panic!(\"Unbalanced parens\");\n                }\n            }\n            ' ' => {\n                depths.push(max_depth);\n                max_depth = 0;\n                depth = 0;\n            }\n            _ => panic!(\"Invalid paren\"),\n        }\n    }\n    depths.push(max_depth);\n    depths"}
{"task_id": "HumanEval/7", "completion": "\n    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()"}
{"task_id": "HumanEval/8", "completion": "\n    let sum = numbers.iter().sum();\n    let product = numbers.iter().product();\n    (sum, product)"}
{"task_id": "HumanEval/9", "completion": "\n    let mut max = numbers[0];\n    let mut result = Vec::new();\n    for &n in numbers.iter() {\n        if n > max {\n            max = n;\n        }\n        result.push(max);\n    }\n    result"}
{"task_id": "HumanEval/10", "completion": "\n    let mut string = string;\n    let mut reversed_prefix = String::new();\n\n    let mut i = 0;\n    while i < string.len() {\n        let (left, right) = string.split_at(i);\n        if left == right.chars().rev().collect::<String>() {\n            reversed_prefix = left.chars().rev().collect::<String>();\n            break;\n        }\n        i += 1;\n    }\n\n    string.push_str(&reversed_prefix);\n    string"}
{"task_id": "HumanEval/11", "completion": "\n    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n        if i == j {\n            result.push('0');\n        } else {\n            result.push('1');\n        }\n    }\n    result"}
{"task_id": "HumanEval/12", "completion": "\n    let mut longest = None;\n    let mut longest_len = 0;\n    for s in strings {\n        if s.len() > longest_len {\n            longest = Some(s);\n            longest_len = s.len();\n        }\n    }\n    longest"}
{"task_id": "HumanEval/13", "completion": "\n    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }"}
{"task_id": "HumanEval/14", "completion": "\n    let mut prefixes = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[..i + 1].to_string());\n    }\n    prefixes"}
{"task_id": "HumanEval/15", "completion": "\n    let mut result = String::new();\n    for i in 0..n + 1 {\n        if i > 0 {\n            result.push(' ');\n        }\n        result.push_str(&i.to_string());\n    }\n    result"}
{"task_id": "HumanEval/16", "completion": "\n    let mut chars = std::collections::HashSet::new();\n    for c in string.chars() {\n        chars.insert(c.to_ascii_lowercase());\n    }\n    chars.len() as isize"}
{"task_id": "HumanEval/17", "completion": "\n    let mut result = Vec::new();\n    let mut current_beats = 0;\n    for c in music_string.chars() {\n        match c {\n            'o' => {\n                current_beats = 4;\n            }\n            '|' => {\n                result.push(current_beats);\n                current_beats = 0;\n            }\n            '.' => {\n                current_beats += 1;\n            }\n            _ => {}\n        }\n    }\n    result.push(current_beats);\n    result"}
{"task_id": "HumanEval/18", "completion": "\n    let mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n        if string[index..].starts_with(&substring) {\n            count += 1;\n        }\n        index += 1;\n    }\n    count"}
{"task_id": "HumanEval/19", "completion": "\n    let mut numbers_vec = numbers.split_whitespace().collect::<Vec<&str>>();\n    numbers_vec.sort();\n    numbers_vec.join(\" \")"}
{"task_id": "HumanEval/20", "completion": "\n    let mut min_diff = f64::MAX;\n    let mut min_pair = (0.0, 0.0);\n\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len() {\n            let diff = (numbers[i] - numbers[j]).abs();\n            if diff < min_diff {\n                min_diff = diff;\n                min_pair = (numbers[i], numbers[j]);\n            }\n        }\n    }\n\n    if min_pair.0 > min_pair.1 {\n        min_pair.1 = min_pair.0;\n        min_pair.0 = min_pair.1;\n    }\n\n    min_pair"}
{"task_id": "HumanEval/21", "completion": "\n    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n    numbers.iter().map(|x| (x - min) / (max - min)).collect()"}
{"task_id": "HumanEval/23", "completion": "\n    string.len() as isize"}
{"task_id": "HumanEval/24", "completion": "\n    let mut divisor = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            divisor = i;\n        }\n    }\n    divisor"}
{"task_id": "HumanEval/25", "completion": "\n    let mut res = Vec::new();\n    let mut n = n;\n    let mut i = 2;\n    while n > 1 {\n        if n % i == 0 {\n            n /= i;\n            res.push(i);\n        } else {\n            i += 1;\n        }\n    }\n    res"}
{"task_id": "HumanEval/26", "completion": "\n    let mut result = Vec::new();\n    let mut seen = Vec::new();\n    for number in numbers {\n        if !seen.contains(&number) {\n            result.push(number);\n            seen.push(number);\n        }\n    }\n    result"}
{"task_id": "HumanEval/27", "completion": "\n    let mut chars = string.chars();\n    let mut flipped_string = String::new();\n\n    while let Some(c) = chars.next() {\n        if c.is_lowercase() {\n            flipped_string.push(c.to_ascii_uppercase());\n        } else if c.is_uppercase() {\n            flipped_string.push(c.to_ascii_lowercase());\n        } else {\n            flipped_string.push(c);\n        }\n    }\n\n    flipped_string"}
{"task_id": "HumanEval/28", "completion": "\n    let mut result = String::new();\n    for s in strings {\n        result.push_str(&s);\n    }\n    result"}
{"task_id": "HumanEval/29", "completion": "\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()"}
{"task_id": "HumanEval/30", "completion": "\n    l.into_iter().filter(|&x| x > 0).collect()"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1 {\n        return false;\n    }\n    if n <= 3 {\n        return true;\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false;\n    }\n    let mut i = 5;\n    while i * i <= n {\n        if n % i == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n        i += 6;\n    }\n    true"}
{"task_id": "HumanEval/33", "completion": "\n    let mut l_prime = l.clone();\n    let mut i = 0;\n    while i < l.len() {\n        if i % 3 == 0 {\n            l_prime[i] = l[i];\n        }\n        i += 1;\n    }\n    l_prime.sort();\n    l_prime"}
{"task_id": "HumanEval/34", "completion": "\n    let mut res = Vec::new();\n    let mut prev = l[0];\n    res.push(prev);\n    for e in l.iter() {\n        if *e != prev {\n            res.push(*e);\n            prev = *e;\n        }\n    }\n    res"}
{"task_id": "HumanEval/35", "completion": "\n    let mut max = l[0];\n    for e in l.iter() {\n        if *e > max {\n            max = *e;\n        }\n    }\n    max"}
{"task_id": "HumanEval/36", "completion": "\n    let mut count = 0;\n    for i in 1..n {\n        if (i % 11 == 0 || i % 13 == 0) && has_7(i) {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/37", "completion": "\n    let mut l_prime = l.clone();\n    let mut l_even = l.iter().enumerate().filter(|&(i, _)| i % 2 == 0).map(|(_, x)| x).collect::<Vec<_>>();\n    l_even.sort();\n    l_prime.iter_mut().enumerate().filter(|&(i, _)| i % 2 == 0).for_each(|(i, x)| *x = l_even[i / 2]);\n    l_prime"}
{"task_id": "HumanEval/39", "completion": "\n    let mut a = 1;\n    let mut b = 1;\n    let mut c = 0;\n    let mut i = 1;\n    while i < n {\n        c = a + b;\n        a = b;\n        b = c;\n        i += 1;\n    }\n    c"}
{"task_id": "HumanEval/40", "completion": "\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j {\n        let k = -(l[i] + l[j]);\n        if l.binary_search(&k).is_ok() {\n            return true;\n        }\n        if k < l[i] {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false"}
{"task_id": "HumanEval/41", "completion": "\n    let mut collisions = 0;\n    let mut left_car = 0;\n    let mut right_car = n;\n    while left_car < right_car {\n        left_car += 1;\n        right_car -= 1;\n        collisions += 1;\n    }\n    collisions"}
{"task_id": "HumanEval/42", "completion": "\n    let mut res = Vec::new();\n    for e in l.iter() {\n        res.push(e + 1);\n    }\n    res"}
{"task_id": "HumanEval/43", "completion": "\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n            return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false"}
{"task_id": "HumanEval/44", "completion": "\n    let mut result = String::new();\n    let mut n = x;\n    while n > 0 {\n        result.push(((n % base) + '0') as u8);\n        n /= base;\n    }\n    result.chars().rev().collect()"}
{"task_id": "HumanEval/45", "completion": "\n    (a * h) as f64 / 2.0"}
{"task_id": "HumanEval/46", "completion": "\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 0..n {\n        let temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n    a"}
{"task_id": "HumanEval/47", "completion": "\n    let mut v = l;\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }"}
{"task_id": "HumanEval/48", "completion": "\n    let mut i = 0;\n    let mut j = text.len() - 1;\n    while i < j {\n        if text.chars().nth(i) != text.chars().nth(j) {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n    }\n    true"}
{"task_id": "HumanEval/49", "completion": "\n    let mut n = n % p;\n    if n < 0 {\n        n += p;\n    }\n    n"}
{"task_id": "HumanEval/51", "completion": "\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let mut result = String::new();\n    for c in text.chars() {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result"}
{"task_id": "HumanEval/52", "completion": "\n    l.iter().all(|&x| x < t)"}
{"task_id": "HumanEval/53", "completion": "\n    x + y"}
{"task_id": "HumanEval/54", "completion": "\n    let mut s0 = s0.chars().collect::<Vec<char>>();\n    let mut s1 = s1.chars().collect::<Vec<char>>();\n    s0.sort_unstable();\n    s1.sort_unstable();\n    s0 == s1"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0 {\n        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }"}
{"task_id": "HumanEval/56", "completion": "\n    let mut stack = Vec::new();\n    for c in brackets.chars() {\n        match c {\n            '<' => stack.push(c),\n            '>' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                stack.pop();\n            }\n            _ => unreachable!(),\n        }\n    }\n    stack.is_empty()"}
{"task_id": "HumanEval/57", "completion": "\n    let mut increasing = true;\n    let mut decreasing = true;\n    for i in 0..l.len() - 1 {\n        increasing &= l[i] <= l[i + 1];\n        decreasing &= l[i] >= l[i + 1];\n    }\n    increasing || decreasing"}
{"task_id": "HumanEval/58", "completion": "\n    let mut l1 = l1;\n    l1.sort();\n    l1.dedup();\n    let mut l2 = l2;\n    l2.sort();\n    l2.dedup();\n    let mut i1 = 0;\n    let mut i2 = 0;\n    let mut res = Vec::new();\n    while i1 < l1.len() && i2 < l2.len() {\n        if l1[i1] == l2[i2] {\n            res.push(l1[i1]);\n            i1 += 1;\n            i2 += 1;\n        } else if l1[i1] < l2[i2] {\n            i1 += 1;\n        } else {\n            i2 += 1;\n        }\n    }\n    res"}
{"task_id": "HumanEval/59", "completion": "\n    let mut n = n;\n    let mut largest_factor = 1;\n    let mut factor = 2;\n    while factor * factor <= n {\n        if n % factor == 0 {\n            n /= factor;\n            largest_factor = factor;\n        } else {\n            factor += 1;\n        }\n    }\n    if n > 1 {\n        largest_factor = n;\n    }\n    largest_factor"}
{"task_id": "HumanEval/60", "completion": "\n    let mut sum = 0;\n    for i in 1..n + 1 {\n        sum += i;\n    }\n    sum"}
{"task_id": "HumanEval/61", "completion": "\n    let mut stack = Vec::new();\n    for c in brackets.chars() {\n        match c {\n            '(' => stack.push(c),\n            ')' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                stack.pop();\n            }\n            _ => unreachable!(),\n        }\n    }\n    stack.is_empty()"}
{"task_id": "HumanEval/62", "completion": "\n    if xs.len() < 2 {\n        return Vec::new();\n    }\n    let mut res = Vec::new();\n    for (i, &x) in xs.iter().enumerate() {\n        if i == 0 {\n            continue;\n        }\n        res.push(x * (i as isize));\n    }\n    res"}
{"task_id": "HumanEval/63", "completion": "\n    match n {\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3),\n    }"}
{"task_id": "HumanEval/64", "completion": "\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut count = 0;\n    for c in s.chars() {\n        if vowels.contains(&c) {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/65", "completion": "\n    let mut x = x.to_string();\n    let mut shift = shift;\n    if shift > x.len() as isize {\n        shift = shift % x.len() as isize;\n    }\n    if shift == 0 {\n        return x;\n    }\n    let mut y = String::new();\n    y.push_str(&x[x.len() - shift as usize..]);\n    y.push_str(&x[..x.len() - shift as usize]);\n    y"}
{"task_id": "HumanEval/66", "completion": "\n    s.chars().filter(|&c| c.is_uppercase()).sum::<isize>()"}
{"task_id": "HumanEval/67", "completion": "\n    let mut s = s.split_whitespace();\n    let apples = s.next().unwrap().parse::<isize>().unwrap();\n    let oranges = s.next().unwrap().parse::<isize>().unwrap();\n    n - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "\n    let mut smallest_even = isize::MAX;\n    let mut smallest_even_index = isize::MAX;\n\n    for (index, &value) in arr.iter().enumerate() {\n        if value % 2 == 0 && value < smallest_even {\n            smallest_even = value;\n            smallest_even_index = index as isize;\n        }\n    }\n\n    if smallest_even == isize::MAX {\n        return Vec::new();\n    }\n\n    vec![smallest_even, smallest_even_index]"}
{"task_id": "HumanEval/69", "completion": "\n    let mut freq = vec![0; lst.len()];\n    for i in 0..lst.len() {\n        freq[lst[i] as usize] += 1;\n    }\n    for i in 0..lst.len() {\n        if freq[i] >= lst[i] {\n            return i as isize;\n        }\n    }\n    -1"}
{"task_id": "HumanEval/70", "completion": "\n    let mut lst = lst;\n    lst.sort();\n    let mut result = Vec::new();\n    let mut is_min = true;\n    while !lst.is_empty() {\n        if is_min {\n            result.push(lst.remove(0));\n        } else {\n            result.push(lst.remove(lst.len() - 1));\n        }\n        is_min = !is_min;\n    }\n    result"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b <= c || a + c <= b || b + c <= a {\n        return -1.0;\n    }\n    let s = (a + b + c) as f64 / 2.0;\n    (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()"}
{"task_id": "HumanEval/72", "completion": "\n    let mut sum = 0;\n    let mut left = 0;\n    let mut right = q.len() - 1;\n    let mut balanced = true;\n\n    while left < right {\n        if q[left] != q[right] {\n            balanced = false;\n            break;\n        }\n        left += 1;\n        right -= 1;\n    }\n\n    for i in q {\n        sum += i;\n    }\n\n    if sum <= w && balanced {\n        return true;\n    }\n\n    return false;"}
{"task_id": "HumanEval/73", "completion": "\n    let mut count = 0;\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    while left < right {\n        if arr[left] != arr[right] {\n            count += 1;\n            if arr[left + 1] == arr[right] {\n                left += 1;\n            } else if arr[left] == arr[right - 1] {\n                right -= 1;\n            } else {\n                left += 1;\n                right -= 1;\n            }\n        }\n        left += 1;\n        right -= 1;\n    }\n    count"}
{"task_id": "HumanEval/74", "completion": "\n    let mut total_chars_lst1 = 0;\n    let mut total_chars_lst2 = 0;\n    for i in lst1.iter() {\n        total_chars_lst1 += i.chars().count();\n    }\n    for i in lst2.iter() {\n        total_chars_lst2 += i.chars().count();\n    }\n    if total_chars_lst1 < total_chars_lst2 {\n        return lst1;\n    } else {\n        return lst2;\n    }"}
{"task_id": "HumanEval/75", "completion": "\n    let mut a = a;\n    let mut primes = vec![2];\n    let mut i = 3;\n    while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n            a /= i;\n        } else {\n            i += 2;\n        }\n    }\n    primes.len() == 3"}
{"task_id": "HumanEval/76", "completion": "\n    if x == 1 {\n        return true;\n    }\n    if x % n != 0 {\n        return false;\n    }\n    let mut x = x;\n    while x % n == 0 {\n        x /= n;\n    }\n    x == 1"}
{"task_id": "HumanEval/77", "completion": "\n    let mut x = a;\n    while x > 0 {\n        x /= 3;\n    }\n    x * x * x == a"}
{"task_id": "HumanEval/78", "completion": "\n    let mut count = 0;\n    let primes = [2, 3, 5, 7, 11, 13];\n    for c in num.chars() {\n        if let Ok(digit) = c.to_digit(16) {\n            if primes.contains(&digit) {\n                count += 1;\n            }\n        }\n    }\n    count"}
{"task_id": "HumanEval/79", "completion": "\n    let mut result = String::from(\"db\");\n    let mut number = decimal;\n    while number > 0 {\n        result.push_str(&number.to_string());\n        number /= 2;\n    }\n    result.push_str(\"db\");\n    result.chars().rev().collect()"}
{"task_id": "HumanEval/80", "completion": "\n    if s.len() < 3 {\n        return false;\n    }\n\n    let mut i = 0;\n    while i < s.len() - 2 {\n        if s.chars().nth(i).unwrap() == s.chars().nth(i + 1).unwrap()\n            || s.chars().nth(i).unwrap() == s.chars().nth(i + 2).unwrap()\n            || s.chars().nth(i + 1).unwrap() == s.chars().nth(i + 2).unwrap()\n        {\n            return false;\n        }\n        i += 1;\n    }\n\n    true"}
{"task_id": "HumanEval/81", "completion": "\n    let mut result = Vec::new();\n    for grade in grades {\n        if grade > 4.0 {\n            result.push(String::from(\"A+\"));\n        } else if grade > 3.7 {\n            result.push(String::from(\"A\"));\n        } else if grade > 3.3 {\n            result.push(String::from(\"A-\"));\n        } else if grade > 3.0 {\n            result.push(String::from(\"B+\"));\n        } else if grade > 2.7 {\n            result.push(String::from(\"B\"));\n        } else if grade > 2.3 {\n            result.push(String::from(\"B-\"));\n        } else if grade > 2.0 {\n            result.push(String::from(\"C+\"));\n        } else if grade > 1.7 {\n            result.push(String::from(\"C\"));\n        } else if grade > 1.3 {\n            result.push(String::from(\"C-\"));\n        } else if grade > 1.0 {\n            result.push(String::from(\"D+\"));\n        } else if grade > 0.7 {\n            result.push(String::from(\"D\"));\n        } else if grade > 0.0 {\n            result.push(String::from(\"D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n        }\n    }\n    result"}
{"task_id": "HumanEval/82", "completion": "\n    let len = string.len();\n    let mut is_prime = true;\n    for i in 2..len {\n        if len % i == 0 {\n            is_prime = false;\n            break;\n        }\n    }\n    is_prime"}
{"task_id": "HumanEval/83", "completion": "\n    let mut count = 0;\n    let mut n = n;\n    while n > 0 {\n        count += 10isize.pow(n - 1);\n        n -= 1;\n    }\n    count"}
{"task_id": "HumanEval/84", "completion": "\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum += n % 2;\n        n /= 2;\n    }\n    sum.to_string()"}
{"task_id": "HumanEval/85", "completion": "\n    lst.iter()\n        .enumerate()\n        .filter(|(i, _)| i % 2 != 0)\n        .filter(|(_, v)| v % 2 == 0)\n        .map(|(_, v)| v)\n        .sum()"}
{"task_id": "HumanEval/86", "completion": "\n    let mut words = s.split_whitespace();\n    let mut result = String::new();\n    for word in words {\n        let mut chars = word.chars();\n        let mut sorted_word = String::new();\n        for ch in &mut chars {\n            sorted_word.push(ch);\n        }\n        sorted_word.chars().sort_by(|a, b| a.cmp(b));\n        result.push_str(&sorted_word);\n        result.push(' ');\n    }\n    result.pop();\n    result"}
{"task_id": "HumanEval/87", "completion": "\n    let mut result = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n        for (j, &v) in row.iter().enumerate() {\n            if v == x {\n                result.push((i as isize, j as isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    result"}
{"task_id": "HumanEval/88", "completion": "\n    let mut array = array;\n    if array.is_empty() {\n        return array;\n    }\n    array.sort_unstable_by(|a, b| {\n        let sum = *a + *b;\n        if sum % 2 == 0 {\n            b.cmp(a)\n        } else {\n            a.cmp(b)\n        }\n    });\n    array"}
{"task_id": "HumanEval/89", "completion": "\n    let mut encrypted = String::new();\n    for c in s.chars() {\n        let mut n = c as u8 + 2 * 2;\n        if n > 122 {\n            n = n - 26;\n        }\n        encrypted.push(char::from(n));\n    }\n    encrypted"}
{"task_id": "HumanEval/90", "completion": "\n    let mut lst = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() < 2 {\n        return None;\n    }\n    Some(lst[1])"}
{"task_id": "HumanEval/91", "completion": "\n    let mut count = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n        if c == 'I' {\n            is_bored = true;\n        }\n        if c == '.' || c == '?' || c == '!' {\n            if is_bored {\n                count += 1;\n            }\n            is_bored = false;\n        }\n    }\n    count"}
{"task_id": "HumanEval/92", "completion": "\n    if x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0 {\n        if x == y + z || y == x + z || z == x + y {\n            return true;\n        }\n    }\n    false"}
{"task_id": "HumanEval/93", "completion": "\n    let mut encoded = String::new();\n    for c in message.chars() {\n        if c.is_ascii_alphabetic() {\n            let mut encoded_char = c;\n            if c.is_ascii_lowercase() {\n                encoded_char = encoded_char.to_ascii_uppercase();\n            } else {\n                encoded_char = encoded_char.to_ascii_lowercase();\n            }\n            encoded.push(encoded_char);\n        } else {\n            encoded.push(c);\n        }\n    }\n    encoded"}
{"task_id": "HumanEval/94", "completion": "\n    let mut max = 0;\n    for i in lst {\n        if is_prime(i as u64) {\n            if i > max {\n                max = i;\n            }\n        }\n    }\n    let mut sum = 0;\n    let mut max = max as u64;\n    while max > 0 {\n        sum += max % 10;\n        max /= 10;\n    }\n    sum as isize"}
{"task_id": "HumanEval/95", "completion": "\n    if dict.is_empty() {\n        return false;\n    }\n\n    let mut is_lower = true;\n    let mut is_upper = true;\n\n    for (key, _) in dict.iter() {\n        if key.chars().any(|c| c.is_uppercase()) {\n            is_lower = false;\n        }\n\n        if key.chars().any(|c| c.is_lowercase()) {\n            is_upper = false;\n        }\n    }\n\n    is_lower || is_upper"}
{"task_id": "HumanEval/96", "completion": "\n    let mut primes = Vec::new();\n    for i in 2..n {\n        if primes.iter().all(|x| i % x != 0) {\n            primes.push(i);\n        }\n    }\n    primes"}
{"task_id": "HumanEval/97", "completion": "\n    a.rem_euclid(10) * b.rem_euclid(10)"}
{"task_id": "HumanEval/98", "completion": "\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/99", "completion": "\n    let mut value = value.parse::<f64>().unwrap();\n    if value.fract() == 0.5 {\n        value += 0.1;\n    }\n    value.round() as isize"}
{"task_id": "HumanEval/100", "completion": "\n    let mut pile = vec![n];\n    let mut stones = n;\n    while stones > 1 {\n        stones = if stones % 2 == 0 {\n            stones / 2\n        } else {\n            (stones + 1) / 2\n        };\n        pile.push(stones);\n    }\n    pile"}
{"task_id": "HumanEval/101", "completion": "\n    s.split(\", \").map(|s| s.to_string()).collect()"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y {\n        return -1;\n    }\n    let mut result = -1;\n    for i in x..=y {\n        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result"}
{"task_id": "HumanEval/104", "completion": "\n    x.into_iter()\n        .filter(|&n| n.to_string().chars().all(|c| c.is_digit(10) && c.to_digit(10).unwrap() % 2 != 0))\n        .sorted()\n        .collect()"}
{"task_id": "HumanEval/105", "completion": "\n    let mut result = Vec::new();\n    let mut tmp = Vec::new();\n    for i in arr {\n        if i >= 1 && i <= 9 {\n            tmp.push(i);\n        }\n    }\n    tmp.sort();\n    tmp.reverse();\n    for i in tmp {\n        match i {\n            1 => result.push(String::from(\"One\")),\n            2 => result.push(String::from(\"Two\")),\n            3 => result.push(String::from(\"Three\")),\n            4 => result.push(String::from(\"Four\")),\n            5 => result.push(String::from(\"Five\")),\n            6 => result.push(String::from(\"Six\")),\n            7 => result.push(String::from(\"Seven\")),\n            8 => result.push(String::from(\"Eight\")),\n            9 => result.push(String::from(\"Nine\")),\n            _ => (),\n        }\n    }\n    result"}
{"task_id": "HumanEval/106", "completion": "\n    let mut v = Vec::new();\n    for i in 1..n + 1 {\n        if i % 2 == 0 {\n            v.push(factorial(i));\n        } else {\n            v.push(sum(i));\n        }\n    }\n    v"}
{"task_id": "HumanEval/107", "completion": "\n    let mut even = 0;\n    let mut odd = 0;\n    for i in 1..=n {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even += 1;\n            } else {\n                odd += 1;\n            }\n        }\n    }\n    (even, odd)"}
{"task_id": "HumanEval/108", "completion": "\n    arr.into_iter()\n        .filter(|&x| x.to_string().chars().all(|c| c != '-'))\n        .count() as isize"}
{"task_id": "HumanEval/109", "completion": "\n    if arr.len() == 0 {\n        return true;\n    }\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut j1 = 0;\n    let mut k1 = 0;\n    let mut l1 = 0;\n    let mut m1 = 0;\n    let mut n1 = 0;\n    let mut o1 = 0;\n    let mut p1 = 0;\n    let mut q1 = 0;\n    let mut r1 = 0;\n    let mut s1 = 0;\n    let mut t1 = 0;\n    let mut u1 = 0;\n    let mut v1 = 0;\n    let mut w1 = 0;\n    let mut x1 = 0;\n    let mut y1 = 0;\n    let mut z1 = 0;\n    let mut a1 = 0;\n    let mut b1 = 0;\n    let mut c1 = 0;\n    let mut d1 = 0;\n    let mut e1 = 0;\n    let mut f1 = 0;\n    let mut g1 = 0;\n    let mut h1 = 0;"}
{"task_id": "HumanEval/110", "completion": "\n    let mut lst1 = lst1.into_iter().peekable();\n    let mut lst2 = lst2.into_iter().peekable();\n\n    while let (Some(x), Some(y)) = (lst1.peek(), lst2.peek()) {\n        if x % 2 == 0 {\n            lst1.next();\n        } else if y % 2 == 0 {\n            lst2.next();\n        } else {\n            return String::from(\"NO\");\n        }\n    }\n\n    String::from(\"YES\")"}
{"task_id": "HumanEval/111", "completion": "\n    let mut map = HashMap::new();\n    for c in test.split_whitespace() {\n        let count = map.entry(c.to_string()).or_insert(0);\n        *count += 1;\n    }\n    map"}
{"task_id": "HumanEval/112", "completion": "\n    let mut s = s.chars().filter(|&x| !c.contains(x)).collect::<String>();\n    s.reverse();\n    (s, s == s.chars().rev().collect::<String>())"}
{"task_id": "HumanEval/113", "completion": "\n    lst.iter()\n        .map(|s| {\n            let mut count = 0;\n            for c in s.chars() {\n                if c.to_digit(10).unwrap() % 2 == 1 {\n                    count += 1;\n                }\n            }\n            format!(\"the number of odd elements {}n the str{}ng {} of the {}nput.\", count, count, count, count)\n        })\n        .collect()"}
{"task_id": "HumanEval/114", "completion": "\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n    for num in nums {\n        sum += num;\n        min_sum = min_sum.min(sum);\n    }\n    min_sum"}
{"task_id": "HumanEval/115", "completion": "\n    let mut count = 0;\n    let mut row = 0;\n    let mut col = 0;\n    let mut capacity = capacity;\n    let mut done = false;\n    let mut done_row = false;\n    let mut done_col = false;\n    let mut done_row_count = 0;\n    let mut done_col_count = 0;\n    let mut done_row_index = 0;\n    let mut done_col_index = 0;\n    let mut done_row_done = false;\n    let mut done_col_done = false;\n    let mut done_row_done_count = 0;\n    let mut done_col_done_count = 0;\n    let mut done_row_done_index = 0;\n    let mut done_col_done_index = 0;\n    let mut done_row_done_done = false;\n    let mut done_col_done_done = false;\n    let mut done_row_done_done_count = 0;\n    let mut done_col_done_done_count = 0;\n    let mut done_row_done_done_index = 0;\n    let mut done_col_done_done_index = 0;\n    let mut done_row_done_done_done = false;\n    let mut done_col_done_done_done = false;\n    let mut done_row_done_done_done_count = 0;\n    let mut done_col_done_done_done_count = 0;\n    let mut done_row_done_done_done_index = 0;\n    let mut done_col_done_done_done_index = 0;\n    let mut done_row_done_done_done_done = false;\n    let mut done_col_done_done_done_done = false;\n    let mut done_row_done_done_done_done_count = 0;\n    let mut done_col_done_done_done_done_count = 0;\n    let mut done_row_done_done_done_done_index = 0;\n    let mut done_col_done_"}
{"task_id": "HumanEval/116", "completion": "\n    arr.iter()\n        .enumerate()\n        .map(|(i, &x)| (i, x))\n        .sorted_by(|(_, &a), (_, &b)| {\n            let a_ones = a.count_ones();\n            let b_ones = b.count_ones();\n            if a_ones == b_ones {\n                a.cmp(&b)\n            } else {\n                a_ones.cmp(&b_ones)\n            }\n        })\n        .map(|(i, x)| x)\n        .collect()"}
{"task_id": "HumanEval/117", "completion": "\n    let mut result = Vec::new();\n    let mut word = String::new();\n    let mut count = 0;\n    for c in s.chars() {\n        if c == ' ' {\n            if count == n {\n                result.push(word.clone());\n            }\n            word = String::new();\n            count = 0;\n        } else if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            count += 1;\n        }\n        word.push(c);\n    }\n    if count == n {\n        result.push(word);\n    }\n    result"}
{"task_id": "HumanEval/118", "completion": "\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let mut result = String::new();\n    let mut found = false;\n    let mut i = word.len() - 1;\n    while i > 0 {\n        if vowels.contains(&word.chars().nth(i).unwrap()) {\n            if found {\n                result.push(word.chars().nth(i).unwrap());\n                break;\n            }\n            found = true;\n        }\n        i -= 1;\n    }\n    result"}
{"task_id": "HumanEval/119", "completion": "\n    let mut stack: Vec<char> = Vec::new();\n    for s in lst {\n        for c in s.chars() {\n            if c == '(' {\n                stack.push(c);\n            } else {\n                if stack.is_empty() {\n                    return String::from(\"No\");\n                }\n                stack.pop();\n            }\n        }\n    }\n    if stack.is_empty() {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\")\n    }"}
{"task_id": "HumanEval/120", "completion": "\n    let mut arr = arr;\n    arr.sort_unstable();\n    arr.reverse();\n    arr[0..k as usize].to_vec()"}
{"task_id": "HumanEval/121", "completion": "\n    lst.iter()\n        .enumerate()\n        .filter(|(i, v)| i % 2 == 0 && v % 2 != 0)\n        .map(|(_, v)| v)\n        .sum()"}
{"task_id": "HumanEval/122", "completion": "\n    let mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n        while num > 99 {\n            num /= 10;\n        }\n        sum += num;\n    }\n    sum"}
{"task_id": "HumanEval/123", "completion": "\n    let mut result = vec![];\n    let mut n = n;\n    while n > 1 {\n        if n % 2 == 0 {\n            n /= 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        if n % 2 == 1 {\n            result.push(n);\n        }\n    }\n    result.sort();\n    result"}
{"task_id": "HumanEval/124", "completion": "\n    let mut date_vec = date.split(\"-\").collect::<Vec<&str>>();\n    if date_vec.len() != 3 {\n        return false;\n    }\n    let month = date_vec[0].parse::<u32>().unwrap();\n    let day = date_vec[1].parse::<u32>().unwrap();\n    let year = date_vec[2].parse::<u32>().unwrap();\n    if month < 1 || month > 12 {\n        return false;\n    }\n    if day < 1 {\n        return false;\n    }\n    if year < 1 {\n        return false;\n    }\n    if month == 2 {\n        if day > 29 {\n            return false;\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false;\n        }\n    } else if day > 31 {\n        return false;\n    }\n    true"}
{"task_id": "HumanEval/126", "completion": "\n    let mut last = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] < last {\n            return false;\n        }\n        if lst[i] == last {\n            last = lst[i];\n        }\n    }\n    true"}
{"task_id": "HumanEval/127", "completion": "\n    let (a, b) = interval1;\n    let (c, d) = interval2;\n    let mut intersection = (0, 0);\n    if a <= c && c <= b {\n        intersection = (c, b);\n    } else if c <= a && a <= d {\n        intersection = (a, d);\n    } else if a <= d && d <= b {\n        intersection = (a, d);\n    } else if c <= b && b <= d {\n        intersection = (c, b);\n    }\n    if intersection.0 == 0 && intersection.1 == 0 {\n        return String::from(\"NO\");\n    }\n    let mut is_prime = true;\n    let mut i = 2;\n    let mut n = intersection.1 - intersection.0 + 1;\n    while i * i <= n {\n        if n % i == 0 {\n            is_prime = false;\n            break;\n        }\n        i += 1;\n    }\n    if is_prime {\n        return String::from(\"YES\");\n    }\n    return String::from(\"NO\");"}
{"task_id": "HumanEval/128", "completion": "\n    if arr.is_empty() {\n        return None;\n    }\n\n    let mut product = 1;\n    let mut sum = 0;\n\n    for &x in &arr {\n        product *= if x < 0 { -1 } else { 1 };\n        sum += x.abs();\n    }\n\n    Some(product * sum)"}
{"task_id": "HumanEval/129", "completion": "\n    let n = grid.len();\n    let mut queue = Vec::new();\n    let mut visited = vec![vec![false; n]; n];\n    let mut min_path = vec![0; k as usize];\n    let mut min_path_sum = 0;\n    queue.push((0, 0, 0));\n    visited[0][0] = true;\n    while !queue.is_empty() {\n        let (x, y, sum) = queue.pop().unwrap();\n        if sum + n * n - 1 - grid[x][y] == k {\n            min_path = vec![grid[x][y]; k as usize];\n            min_path_sum = sum;\n            break;\n        }\n        let mut neighbors = Vec::new();\n        if x > 0 && !visited[x - 1][y] {\n            neighbors.push((x - 1, y));\n        }\n        if x < n - 1 && !visited[x + 1][y] {\n            neighbors.push((x + 1, y));\n        }\n        if y > 0 && !visited[x][y - 1] {\n            neighbors.push((x, y - 1));\n        }\n        if y < n - 1 && !visited[x][y + 1] {\n            neighbors.push((x, y + 1));\n        }\n        for (x, y) in neighbors {\n            visited[x][y] = true;\n            queue.push((x, y, sum + grid[x][y]));\n        }\n    }\n    for i in 0..k as usize {\n        min_path[i] = min_path_sum + n * n - 1 - min_path[i];\n    }\n    min_path"}
{"task_id": "HumanEval/130", "completion": "\n    let mut result = vec![1, 3];\n    for i in 3..n+1 {\n        if i % 2 == 0 {\n            result.push(result[i as usize - 1] + result[i as usize - 2]);\n        } else {\n            result.push(result[i as usize - 1] + result[i as usize - 2] + result[i as usize + 1]);\n        }\n    }\n    result"}
{"task_id": "HumanEval/131", "completion": "\n    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n            product *= digit;\n        }\n        n /= 10;\n    }\n    product"}
{"task_id": "HumanEval/132", "completion": "\n    let mut stack = Vec::new();\n    for c in string.chars() {\n        if c == '[' {\n            stack.push(c);\n        } else {\n            if stack.is_empty() {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    stack.is_empty()"}
{"task_id": "HumanEval/133", "completion": "\n    lst.iter()\n        .map(|x| (x.ceil() as isize).pow(2))\n        .sum::<isize>()"}
{"task_id": "HumanEval/134", "completion": "\n    let mut is_letter = false;\n    let mut is_space = false;\n    for c in txt.chars().rev() {\n        if c.is_alphabetic() {\n            is_letter = true;\n        }\n        if c.is_whitespace() {\n            is_space = true;\n        }\n        if is_space {\n            return false;\n        }\n    }\n    is_letter"}
{"task_id": "HumanEval/135", "completion": "\n    let mut max_index = -1;\n    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n        if v <= max_value {\n            return i as isize - 1;\n        }\n        max_index = i;\n        max_value = v;\n    }\n    max_index as isize"}
{"task_id": "HumanEval/136", "completion": "\n    let mut max = None;\n    let mut min = None;\n\n    for &x in lst.iter() {\n        if x < 0 {\n            max = Some(max.map_or(x, |m| m.max(x)));\n        } else if x > 0 {\n            min = Some(min.map_or(x, |m| m.min(x)));\n        }\n    }\n\n    (max, min)"}
{"task_id": "HumanEval/138", "completion": "\n    let mut n = n;\n    let mut count = 0;\n    let mut i = 2;\n    while n > 0 {\n        if n % i == 0 {\n            n /= i;\n            count += 1;\n        }\n        i += 2;\n    }\n    count == 4"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 1 {\n        1\n    } else {\n        n * special_factorial(n - 1)\n    }"}
{"task_id": "HumanEval/140", "completion": "\n    let mut result = String::new();\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces += 1;\n        } else {\n            if consecutive_spaces > 2 {\n                result.push('-');\n            } else {\n                for _ in 0..consecutive_spaces {\n                    result.push('_');\n                }\n            }\n            consecutive_spaces = 0;\n            result.push(c);\n        }\n    }\n    result"}
{"task_id": "HumanEval/141", "completion": "\n    let mut dot_count = 0;\n    let mut digit_count = 0;\n    let mut is_valid = true;\n    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n    let mut is_before_dot_valid = false;\n    let mut is_after_dot_valid = false;\n\n    for c in file_name.chars() {\n        if c == '.' {\n            dot_count += 1;\n            is_before_dot = false;\n            is_after_dot = true;\n        } else if c.is_digit(10) {\n            digit_count += 1;\n            if is_before_dot {\n                is_before_dot_valid = false;\n            } else if is_after_dot {\n                is_after_dot_valid = false;\n            }\n        } else if c.is_ascii_alphabetic() {\n            if is_before_dot {\n                is_before_dot_valid = true;\n            }\n        } else if c == 't' || c == 'e' || c == 'x' || c == 'd' {\n            if is_after_dot {\n                is_after_dot_valid = true;\n            }\n        } else {\n            is_valid = false;\n        }\n    }\n\n    if dot_count != 1 || digit_count > 3 || !is_before_dot_valid || !is_after_dot_valid {\n        is_valid = false;\n    }\n\n    if is_valid {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\")\n    }"}
{"task_id": "HumanEval/142", "completion": "\n    let mut sum = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x * x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        } else {\n            sum += x;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/143", "completion": "\n    let mut result = String::new();\n    let mut is_first = true;\n\n    for word in sentence.split_whitespace() {\n        if is_prime(word.len()) {\n            if !is_first {\n                result.push(' ');\n            }\n            result.push_str(word);\n            is_first = false;\n        }\n    }\n\n    result"}
{"task_id": "HumanEval/144", "completion": "\n    let x = x.split('/').map(|s| s.parse::<i32>().unwrap()).collect::<Vec<i32>>();\n    let n = n.split('/').map(|s| s.parse::<i32>().unwrap()).collect::<Vec<i32>>();\n\n    let x_numerator = x[0];\n    let x_denominator = x[1];\n    let n_numerator = n[0];\n    let n_denominator = n[1];\n\n    let numerator = x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\n    let gcd = gcd(numerator, denominator);\n\n    numerator / gcd == denominator / gcd"}
{"task_id": "HumanEval/145", "completion": "\n    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum).then_with(|| a.cmp(b))\n    });\n    nums"}
{"task_id": "HumanEval/146", "completion": "\n    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n            let mut digits = num.to_string();\n            let first_digit = digits.remove(0).to_digit(10).unwrap();\n            let last_digit = digits.remove(0).to_digit(10).unwrap();\n            if first_digit % 2 == 1 && last_digit % 2 == 1 {\n                count += 1;\n            }\n        }\n    }\n    count"}
{"task_id": "HumanEval/147", "completion": "\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            for k in j + 1..n {\n                if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n                    count += 1;\n                }\n            }\n        }\n    }\n    count"}
{"task_id": "HumanEval/149", "completion": "\n    lst.into_iter()\n        .filter(|s| s.len() % 2 == 0)\n        .sorted_by(|a, b| a.len().cmp(&b.len()).then(a.cmp(b)))\n        .collect()"}
{"task_id": "HumanEval/150", "completion": "\n    if is_prime(n) {\n        x\n    } else {\n        y\n    }"}
{"task_id": "HumanEval/151", "completion": "\n    lst.iter()\n        .filter(|&x| x.is_sign_positive() && x.fract() == 0.0)\n        .filter(|&x| x % 2.0 != 0.0)\n        .map(|x| x * x)\n        .sum::<f64>() as isize"}
{"task_id": "HumanEval/152", "completion": "\n    game.iter()\n        .zip(guess.iter())\n        .map(|(a, b)| (a - b).abs())\n        .collect()"}
{"task_id": "HumanEval/153", "completion": "\n    let mut strongest_extension = String::new();\n    let mut strongest_strength = 0;\n    for extension in extensions {\n        let mut strength = 0;\n        for c in extension.chars() {\n            if c.is_uppercase() {\n                strength += 1;\n            } else if c.is_lowercase() {\n                strength -= 1;\n            }\n        }\n        if strength > strongest_strength {\n            strongest_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)"}
{"task_id": "HumanEval/154", "completion": "\n    let mut b = b;\n    let mut a = a;\n    if a.len() < b.len() {\n        std::mem::swap(&mut a, &mut b);\n    }\n    if a.len() < b.len() {\n        return false;\n    }\n    for _ in 0..b.len() {\n        if a.contains(&b) {\n            return true;\n        }\n        b.push(b.remove(0));\n    }\n    false"}
{"task_id": "HumanEval/155", "completion": "\n    let mut even = 0;\n    let mut odd = 0;\n    let num_str = num.to_string();\n    for c in num_str.chars() {\n        let c = c.to_digit(10).unwrap();\n        if c % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n    (even, odd)"}
{"task_id": "HumanEval/156", "completion": "\n    let mut result = String::new();\n    let mut num = number;\n    while num > 0 {\n        if num >= 100 {\n            result.push('c');\n            num -= 100;\n        } else if num >= 90 {\n            result.push('x');\n            result.push('c');\n            num -= 90;\n        } else if num >= 50 {\n            result.push('l');\n            num -= 50;\n        } else if num >= 40 {\n            result.push('x');\n            result.push('l');\n            num -= 40;\n        } else if num >= 10 {\n            result.push('x');\n            num -= 10;\n        } else if num == 9 {\n            result.push('i');\n            result.push('x');\n            num -= 9;\n        } else if num >= 5 {\n            result.push('v');\n            num -= 5;\n        } else if num == 4 {\n            result.push('i');\n            result.push('v');\n            num -= 4;\n        } else {\n            for _ in 0..num {\n                result.push('i');\n            }\n            num = 0;\n        }\n    }\n    result"}
{"task_id": "HumanEval/157", "completion": "\n    let mut sides = [a, b, c];\n    sides.sort();\n    sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]"}
{"task_id": "HumanEval/158", "completion": "\n    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word in words {\n        let mut count = 0;\n        for c in word.chars() {\n            if !word.contains(c) {\n                count += 1;\n            }\n        }\n        if count > max_count {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    max_word"}
{"task_id": "HumanEval/159", "completion": "\n    let mut eaten = number + need;\n    if eaten > remaining {\n        eaten = remaining;\n    }\n    vec![eaten, remaining - eaten]"}
{"task_id": "HumanEval/160", "completion": "\n    let mut result = operand[0];\n    for i in 0..operator.len() {\n        match operator[i].as_str() {\n            \"+\" => result += operand[i + 1],\n            \"-\" => result -= operand[i + 1],\n            \"*\" => result *= operand[i + 1],\n            \"//\" => result /= operand[i + 1],\n            \"**\" => result = result.pow(operand[i + 1] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result"}
{"task_id": "HumanEval/161", "completion": "\n    let mut chars = s.chars();\n    let mut res = String::new();\n    let mut has_letter = false;\n    while let Some(c) = chars.next() {\n        if c.is_alphabetic() {\n            has_letter = true;\n            res.push(c.to_ascii_uppercase());\n        } else if c.is_numeric() {\n            has_letter = true;\n            res.push(c.to_ascii_lowercase());\n        } else {\n            res.push(c);\n        }\n    }\n    if has_letter {\n        res\n    } else {\n        res.chars().rev().collect()\n    }"}
{"task_id": "HumanEval/162", "completion": "\n    if text.is_empty() {\n        return None;\n    }\n\n    use md5::{Digest, Md5};\n    let mut hasher = Md5::new();\n    hasher.update(text);\n    let result = hasher.finalize();\n    Some(format!(\"{:x}\", result))"}
{"task_id": "HumanEval/163", "completion": "\n    let mut result = Vec::new();\n    let (mut a, mut b) = (a, b);\n    if a > b {\n        std::mem::swap(&mut a, &mut b);\n    }\n    while a <= b {\n        if a % 2 == 0 {\n            result.push(a);\n        }\n        a += 1;\n    }\n    result"}
