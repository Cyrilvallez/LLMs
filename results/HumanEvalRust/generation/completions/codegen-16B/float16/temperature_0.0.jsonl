{"task_id": "HumanEval/0", "completion": "\n    for i in 0..numbers.len() {\n        for j in 0..numbers.len() {\n            if i!= j {\n                if (numbers[i] - numbers[j] < threshold) || (numbers[j] - numbers[i] < threshold) {\n                    return true\n                }\n            }\n        }\n    }\n    return false"}
{"task_id": "HumanEval/1", "completion": "\n    let paren_groups: Vec<String> = []\n    let paren_stack: Vec<String> = []\n    for char in paren_string {\n        if char == \"(\" {\n            paren_stack.push(\"(\")\n        } else if char == \")\" {\n            if paren_stack.pop() == \"(\" {\n                paren_groups.push(String::from(\"()\"))\n            } else {\n                paren_groups.push(String::from(\"(\") + paren_stack.pop() + String::from(\")\"))\n            }\n        }\n    }\n    paren_groups"}
{"task_id": "HumanEval/2", "completion": "\n    const i = to_int64(number)\n    const d = number - i\n    if i == 0 {\n        return 0\n    }\n    return d / i"}
{"task_id": "HumanEval/3", "completion": "\n    var balance = 0\n    for _, operation in operations {\n        if operation > 0 {\n            balance += operation\n        } else {\n            balance -= operation\n        }\n        if balance < 0 {\n            return true\n        }\n    }\n    return false"}
{"task_id": "HumanEval/4", "completion": "\n    let mean = mean(numbers)\n    let sum_of_absolute_differences = sum(abs(x - mean) for x in numbers)\n    return sum_of_absolute_differences / (len(numbers) - 1)"}
{"task_id": "HumanEval/5", "completion": "\n    let mut result = Vec::new()\n    for i in numbers {\n        result.push(i)\n        if i!= numbers.end() {\n            result.push(delimeter)\n        }\n    }\n    return result"}
{"task_id": "HumanEval/6", "completion": "\n    let groups = paren_string.split(\" \").map(|s| s.split(\"(\")).map(|g| g.split(\")\")).map(|g| g.length)\n    groups.sort_descending(|a, b| a - b)\n    groups"}
{"task_id": "HumanEval/7", "completion": "\n    let substring_index = substring.index_of(substring)\n    let substring_length = substring.length()\n    let result = Vec::new()\n    for i in 0..(strings.size()) {\n        if (strings[i].index_of(substring) >= 0) {\n            result.push(strings[i])\n        }\n    }\n    return result"}
{"task_id": "HumanEval/8", "completion": "\n    let sum = 0;\n    let product = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n    return (sum, product);"}
{"task_id": "HumanEval/9", "completion": "\n    let mut max_vec: Vec<isize> = Vec::new(numbers.len())\n    for i in 0..numbers.len() {\n        max_vec[i] = if numbers[i] > numbers[i - 1] {\n            numbers[i]\n        } else {\n            numbers[i - 1]\n        }\n    }\n    return max_vec"}
{"task_id": "HumanEval/10", "completion": "\n    let prefix = find_palindrome_prefix(string)\n    if prefix == string {\n        prefix = prefix.reverse\n    }\n    return prefix + string.reverse"}
{"task_id": "HumanEval/11", "completion": "\n    let xor = a.xor(b);\n    xor.to_string()"}
{"task_id": "HumanEval/12", "completion": "\n    let longest_string = String::new(0)\n    let longest_string_length = 0\n    for strings!(i) {\n        if strings[i].length > longest_string_length {\n            longest_string_length = strings[i].length\n            longest_string = strings[i]\n        }\n    }\n    if longest_string_length > 0 {\n        Some(longest_string)\n    } else {\n        None\n    }"}
{"task_id": "HumanEval/13", "completion": "\n    if b == 0 {\n        r <- a\n    } else {\n        r <- greatest_common_divisor(b, a % b)\n    }\n    r"}
{"task_id": "HumanEval/14", "completion": "\n    let prefixes = [String::new(\"\")]\n    for i in 0..string.size - 1 {\n        prefixes.push(prefixes[i] + string.substr(0, i + 1))\n    }\n    prefixes"}
{"task_id": "HumanEval/15", "completion": "\n    let builder = String::new(\"\")\n    for i in 0..n {\n        builder.concat(String::from(i))\n        builder.concat(\" \")\n    }\n    return builder"}
{"task_id": "HumanEval/16", "completion": "\n    let chars = string.to_lower_case().split(\"\").uniq().collect::<U32>()\n    chars.sort()\n    chars.map(&|&.to_lower_case()).uniq().length"}
{"task_id": "HumanEval/17", "completion": "\n    let beats = [0] * 8\n    let i = 0\n    while i < music_string.len {\n        if music_string[i] == 'o' {\n            beats[7] += 1\n            i += 1\n        } else if music_string[i] == 'o' {\n            beats[6] += 1\n            i += 1\n        } else if music_string[i] == 'o' {\n            beats[5] += 1\n            i += 1\n        } else if music_string[i] == 'o' {\n            beats[4] += 1\n            i += 1\n        } else if music_string[i] == 'o' {\n            beats[3] += 1\n            i += 1\n        } else if music_string[i] == 'o' {\n            beats[2] += 1\n            i += 1\n        } else if music_string[i] == 'o' {\n            beats[1] += 1\n            i += 1\n        } else if music_string[i] == 'o' {\n            beats[0] += 1\n            i += 1\n        } else if music_string[i] == 'o' {\n            beats[7] += 1\n            i += 1\n        } else if music_string[i] == 'o' {\n            beats[6] += 1\n            i += 1\n        } else if music_string[i] == 'o' {\n            beats[5] += 1\n            i += 1\n        } else if music_string[i] == 'o' {\n            beats[4] += 1\n            i += 1\n        } else if music_string[i] == 'o' {\n            beats[3] += 1\n            i += 1\n        } else if music_string[i] == 'o' {\n            beats[2] += 1\n            i += 1\n        } else if music_string[i] == 'o' {\n            beats[1] += 1\n            i += 1\n        } else if music_string[i] == 'o' {\n            beats[0] += 1\n            i += 1\n        } else if music_"}
{"task_id": "HumanEval/18", "completion": "\n    let count = 0;\n    for i in 0..(string.len() - substring.len()) {\n        if string.substr(i, substring.len()) == substring {\n            count += 1;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/19", "completion": "\n    let numbers = numbers.split(\" \")\n    let numbers.sort()\n    return String::from(\" \".join(numbers))"}
{"task_id": "HumanEval/20", "completion": "\n    let (a, b) = (numbers[0], numbers[1])\n    for i in numbers.iterate(|x| {\n        if x < a {\n            (a, b) = (x, a)\n        } else if x < b {\n            (a, b) = (a, x)\n        }\n    })\n    return (a, b)"}
{"task_id": "HumanEval/21", "completion": "\n    let min = numbers.min;\n    let max = numbers.max;\n    let diff = max - min;\n    let scale = 1.0 / diff;\n    let offset = -min * scale;\n    return numbers * scale + offset;"}
{"task_id": "HumanEval/23", "completion": "\n    match string {\n        String::from(\"\") => 0,\n        String::from(\"abc\") => 3,\n    }"}
{"task_id": "HumanEval/24", "completion": "\n    var d: isize = 1;\n    while d * d <= n {\n        if n % d == 0 {\n            d: isize = d;\n        }\n        d: isize += 1;\n    }\n    return d;"}
{"task_id": "HumanEval/25", "completion": "\n    vec![isize]"}
{"task_id": "HumanEval/26", "completion": "\n    let mut result = Vec::new(numbers.len())\n    let mut seen = Vec::new(numbers.len())\n    for i in numbers.iter() {\n        seen.push(i)\n        if seen.contains(i) {\n            result.push(i)\n        }\n    }\n    return result"}
{"task_id": "HumanEval/27", "completion": "\n    let mut string = string;\n    for i in 0..string.len() {\n        if string[i].is_upper() {\n            string[i] = string[i].to_lower();\n        } else {\n            string[i] = string[i].to_upper();\n        }\n    }\n    return string;"}
{"task_id": "HumanEval/28", "completion": "\n    let concat = \"\"\n    for i in strings { concat += i }\n    return concat"}
{"task_id": "HumanEval/29", "completion": "\n    let prefix_len = prefix.length\n    let result = Vec::new()\n    for i in 0..(strings.size()) {\n        if strings[i].starts_with(prefix) {\n            result.push(strings[i])\n        }\n    }\n    return result"}
{"task_id": "HumanEval/30", "completion": "\n    let positive_numbers = vec![0]\n    for i in 0..<l.len() {\n        if l[i] > 0 {\n            positive_numbers = positive_numbers.cons(l[i])\n        }\n    }\n    return positive_numbers"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i in 1..n.sqrt() {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true"}
{"task_id": "HumanEval/33", "completion": "\n    let mut sorted: Vec<isize> = Vec::new(l.len())\n    for i, v in l.enumerate() {\n        if i % 3 == 0 {\n            sorted[i] = v\n        } else {\n            sorted[i] = l[i - 1]\n        }\n    }\n    sorted"}
{"task_id": "HumanEval/34", "completion": "\n    let mut v = Vec<isize>::new();\n    for i in 0..l.len() {\n        v.push_back(l[i]);\n        for j in 0..i {\n            if l[i] == l[j] {\n                v.push_back(l[i]);\n            }\n        }\n    }\n    v.sort();\n    return v;"}
{"task_id": "HumanEval/35", "completion": "\n    max_value, max_index = 0, 0\n    for i, x in enumerate(l):\n        if x > max_value:\n            max_value = x\n            max_index = i\n    return max_value"}
{"task_id": "HumanEval/36", "completion": "\n    let fizz_buzz_count = 0;\n    for i in range(1, n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            fizz_buzz_count += 1;\n        }\n    }\n    return fizz_buzz_count;"}
{"task_id": "HumanEval/37", "completion": "\n    let evens = l.filter(|x| x % 2 == 0)\n    let odds = l.filter(|x| x % 2 == 1)\n    let evens_sorted = sort!(evens)\n    let odds_sorted = sort!(odds)\n    let l' = evens_sorted + odds_sorted\n    return l'"}
{"task_id": "HumanEval/39", "completion": "\n    if n == 1 {\n        2\n    } else if n == 2 {\n        3\n    } else {\n        let f1 = 1\n        let f2 = 2\n        let f3 = 3\n        let f4 = 5\n        let f5 = 13\n        let f6 = 89\n        let f7 = 144\n        let f8 = 233\n        let f9 = 377\n        let f10 = 610\n        let f11 = 987\n        let f12 = 1597\n        let f13 = 2584\n        let f14 = 4181\n        let f15 = 6765\n        let f16 = 10946\n        let f17 = 17711\n        let f18 = 28657\n        let f19 = 46368\n        let f20 = 75025\n        let f21 = 121393\n        let f22 = 196418\n        let f23 = 317811\n        let f24 = 514229\n        let f25 = 832040\n        let f26 = 1346269\n        let f27 = 2178309\n        let f28 = 3524578\n        let f29 = 5702887\n        let f30 = 9227465\n        let f31 = 14930352\n        let f32 = 24157817\n        let f33 = 39088169\n        let f34 = 63245986\n        let f35 = 102334155\n        let f36 = 165580141\n        let f37 = 267914296\n        let f38 = 433494437\n        let f39 = 701408733\n        let f40 = 1134903170\n        let f41 = 1836311903\n        let f42 = 2971215073\n        let f43 = 4807526976\n        let f44 = 7778742049\n        let f45 = 12586269025\n        let f46 = 20365011074\n        let f47 = 32951280099\n        let f48 = 53316291173\n        let f49 = 86267571272\n        let f50 = 139583862445\n        let f51 = 225851433717\n        let f52 = 365435296162\n        let f53 = 591286729879\n        let f54 ="}
{"task_id": "HumanEval/40", "completion": "\n    let (a, b, c) = Vec::unzip!(Vec::unzip!(l));\n    a.zip!(b).zip!(c).filter!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!(|x| x == 0).map!"}
{"task_id": "HumanEval/41", "completion": "\n    let left_to_right_collisions = 0;\n    let right_to_left_collisions = 0;\n    for i in 0..n {\n        for j in 0..n {\n            if i < j {\n                left_to_right_collisions += 1;\n            } else {\n                right_to_left_collisions += 1;\n            }\n        }\n    }\n    right_to_left_collisions + left_to_right_collisions;"}
{"task_id": "HumanEval/42", "completion": "\n    for i in 0..<l.len {\n        l[i] = l[i] + 1\n    }\n    return l"}
{"task_id": "HumanEval/43", "completion": "\n    for i in 0..l.len() - 1 {\n        for j in 0..i {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    return false"}
{"task_id": "HumanEval/44", "completion": "\n    let s = String::new(\"\")\n    while x > 0 {\n        s = s.concat(String::from(x % base))\n        x /= base\n    }\n    return s"}
{"task_id": "HumanEval/45", "completion": "\n    return a * h / 2"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        let f1 = fib4(n - 1)\n        let f2 = fib4(n - 2)\n        let f3 = fib4(n - 3)\n        let f4 = fib4(n - 4)\n        return f1 + f2 + f3 + f4\n    }"}
{"task_id": "HumanEval/47", "completion": "\n    let n = length(l)\n    let m = n % 2\n    let m1 = n - m\n    let m2 = m1 / 2\n    let m3 = m2 + m\n    let m4 = m3 + 1\n    let m5 = m4 * 2\n    let m6 = m5 - 1\n    let m7 = m6 + m\n    let m8 = m7 / 2\n    let m9 = m8 + m\n    let m10 = m9 + 1\n    let m11 = m10 * 2\n    let m12 = m11 - 1\n    let m13 = m12 + m\n    let m14 = m13 + 1\n    let m15 = m14 * 2\n    let m16 = m15 - 1\n    let m17 = m16 + m\n    let m18 = m17 / 2\n    let m19 = m18 + m\n    let m20 = m19 + 1\n    let m21 = m20 * 2\n    let m22 = m21 - 1\n    let m23 = m22 + m\n    let m24 = m23 / 2\n    let m25 = m24 + m\n    let m26 = m25 + 1\n    let m27 = m26 * 2\n    let m28 = m27 - 1\n    let m29 = m28 + m\n    let m30 = m29 / 2\n    let m31 = m30 + m\n    let m32 = m31 + 1\n    let m33 = m32 * 2\n    let m34 = m33 - 1\n    let m35 = m34 + m\n    let m36 = m35 / 2\n    let m37 = m36 + m\n    let m38 = m37 + 1\n    let m39 = m38 * 2\n    let m40 = m39 - 1\n    let m41 = m40 + m\n    let m42 = m41 / 2\n    let m43 = m42 + m\n    let m44 = m43 + 1\n    let m45 = m44 * 2\n    let m46 = m45 - 1\n    let m47 = m46 + m\n    let m48 = m47 / 2\n    let m49 = m48 + m\n    let m50 ="}
{"task_id": "HumanEval/48", "completion": "\n    let reversed_text = text.reverse()\n    text == reversed_text"}
{"task_id": "HumanEval/49", "completion": "\n    if p == 0 {\n        return 1\n    }\n    if n == 0 {\n        return 0\n    }\n    return modp(n - 1, p) * 2 % p"}
{"task_id": "HumanEval/51", "completion": "\n    let vowels = \"aeiouAEIOU\"\n    let result = \"\"\n    for let ch in text {\n        if let ch not in vowels {\n            result += ch\n        }\n    }\n    return result"}
{"task_id": "HumanEval/52", "completion": "\n    for i in 0..<l.len() {\n        if l[i] >= t {\n            return false\n        }\n    }\n    return true"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y;"}
{"task_id": "HumanEval/54", "completion": "\n    let c0 = s0.to_char_array(s0.length())\n    let c1 = s1.to_char_array(s1.length())\n    for i in 0..c0.length() {\n        if c0[i]!= c1[i] {\n            return false\n        }\n    }\n    return true"}
{"task_id": "HumanEval/55", "completion": "\n    if n < 2 {\n        return n\n    }\n    else {\n        return fib(n - 1) + fib(n - 2)\n    }"}
{"task_id": "HumanEval/56", "completion": "\n    match brackets {\n        case \">\" | \"<\" | \">>\" | \"<<\" | \">>>\" | \"<<<\" | \"<<>>\" | \"<<<<\" | \"<<>>>\" | \"<<<<<\" | \"<<<<>>\" | \"<<<<>>>\" | \"<<<<<<\" | \"<<<<<<>\" | \"<<<<<<>>\" | \"<<<<<<>>>\" | \"<<<<<<<<\" | \"<<<<<<<<>\" | \"<<<<<<<<>>\" | \"<<<<<<<<>>>\" | \"<<<<<<<<<<\" | \"<<<<<<<<<<>\" | \"<<<<<<<<<<>>\" | \"<<<<<<<<<<>>>\" | \"<<<<<<<<<<<<\" | \"<<<<<<<<<<<<>\" | \"<<<<<<<<<<<<>>\" | \"<<<<<<<<<<<<>>>\" | \"<<<<<<<<<<<<<<\" | \"<<<<<<<<<<<<<<>\" | \"<<<<<<<<<<<<<<>>\" | \"<<<<<<<<<<<<<<>>>\" | \"<<<<<<<<<<<<<<<<\" | \"<<<<<<<<<<<<<<<<>\" | \"<<<<<<<<<<<<<<<<>>\" | \"<<<<<<<<<<<<<<<<>>>\" | \"<<<<<<<<<<<<<<<<<<\" | \"<<<<<<<<<<<<<<<<<<>\" | \"<<<<<<<<<<<<<<<<<<>>\" | \"<<<<<<<<<<<<<<<<<<>>>\" | \"<<<<<<<<<<<<<<<<<<<<\" | \"<<<<<<<<<<<<<<<<<<<<>\" | \"<<<<<<<<<<<<<<<<<<<<>>\" | \"<<<<<<<<<<<<<<<<<<<<>>>\" | \"<<<<<<<<<<<<<<<<<<<<<<\" | \"<<<<<<<<<<<<<<<<<<<<<<>\" | \"<<<<<<<<<<<<<<<<<<<<<<>>\" | \"<<<<<<<<<<<<<<<<<<<<<<>>>\" | \"<<<<<<<<<<<<<<<<<<<<<<<<\" | \"<<<<<<<<<<<<<<<<<<<<<<<<>\" | \"<<<<<<<<<<<<<<<<<<<<<<<<>>\" | \"<<<<<<<<<<<<<<<<<<<<<<<<>>>\" | \"<<<<<<<<<<<<<<"}
{"task_id": "HumanEval/57", "completion": "\n    let (min, max) = l.minmax();\n    return min < max;"}
{"task_id": "HumanEval/58", "completion": "\n    let common_set = l1.intersection(l2)\n    let common_list = common_set.to_list()\n    common_list.sort()\n    common_list"}
{"task_id": "HumanEval/59", "completion": "\n    while n % 2 == 0 {\n        n = n / 2\n    }\n    for i in [3..sqrt(n)] {\n        if n % i == 0 {\n            n = n / i\n            break\n        }\n    }\n    n"}
{"task_id": "HumanEval/60", "completion": "\n    let total: isize = 0;\n    for i in [1..n] {\n        total += i;\n    }\n    return total;"}
{"task_id": "HumanEval/61", "completion": "\n    stack = 0\n    for c in brackets.to_string() {\n        if c == \"(\" {\n            stack += 1\n        } else if c == \")\" {\n            if stack == 0 {\n                return false\n            } else {\n                stack -= 1\n            }\n        }\n    }\n    return stack == 0"}
{"task_id": "HumanEval/62", "completion": "\n    return [\n        xs[1] * xs[0],\n        xs[2] * (xs[0] + xs[1]),\n        xs[3] * (xs[0] + xs[1] + xs[2]),\n        xs[4] * (xs[0] + xs[1] + xs[2] + xs[3]),\n    ]"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n    }"}
{"task_id": "HumanEval/64", "completion": "\n    let count = 0;\n    for i in s.iter_characters() {\n        if i.is_lowercase_letter() || i.is_uppercase_letter() {\n            count += 1;\n        } else if i.is_vowel() {\n            count += 1;\n        } else if i == 'y' {\n            count += 1;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/65", "completion": "\n    let n = to_string(x);\n    if shift >= n.len() {\n        n.reverse();\n        n.slice(0, shift).reverse();\n        n.reverse();\n    } else {\n        n.slice(shift, n.len()).reverse();\n    }\n    return n;"}
{"task_id": "HumanEval/66", "completion": "\n    let sum = 0;\n    for i in s.to_char_array {\n        if i.to_ascii_code >= 65 && i.to_ascii_code <= 90 {\n            sum += i.to_ascii_code;\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/67", "completion": "\n    let (apples, oranges) = s.split(\" \").map(&|(|).to_i).uniq\n    let (mango, _) = n - (apples + oranges)\n    if mango == 0 {\n        return 0\n    }\n    if apples == 0 {\n        return mango\n    }\n    if oranges == 0 {\n        return mango\n    }\n    return (apples + oranges).to_i - mango"}
{"task_id": "HumanEval/68", "completion": "\n    if!arr.exists(&[0]) {\n        return Vec::<isize>::new()\n    }\n    let min_even = -1\n    let min_even_index = -1\n    for i, v in enumerate(arr) {\n        if v.even() && min_even == -1 {\n            min_even = v.value\n            min_even_index = i\n        } else if v.even() && v.value < min_even {\n            min_even = v.value\n            min_even_index = i\n        }\n    }\n    if min_even_index == -1 {\n        return Vec::<isize>::new()\n    }\n    return Vec::<isize>::new([min_even, min_even_index])"}
{"task_id": "HumanEval/69", "completion": "\n    max_freq: isize = 0\n    max_freq_val: isize = 0\n    for i, v in enumerate(lst):\n        freq: isize = 0\n        for j, v2 in enumerate(lst):\n            if v == v2:\n                freq += 1\n        if freq >= v:\n            if freq > max_freq:\n                max_freq = freq\n                max_freq_val = v\n    if max_freq == 0:\n        return -1\n    return max_freq_val"}
{"task_id": "HumanEval/70", "completion": "\n    let l = lst.len()\n    if l == 0 {\n        return Vec::new()\n    }\n    let min = lst.min()\n    let max = lst.max()\n    let min_index = lst.index_of(min)\n    let max_index = lst.index_of(max)\n    let min_rem = lst.drop(min_index)\n    let max_rem = lst.drop(max_index)\n    let min_rem_sorted = strange_sort_list(min_rem)\n    let max_rem_sorted = strange_sort_list(max_rem)\n    let min_sorted = min_rem_sorted.concat(Vec::new([min]))\n    let max_sorted = max_rem_sorted.concat(Vec::new([max]))\n    return min_sorted.concat(max_sorted)"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c && b + c > a && a + c > b {\n        return round(a * b * c / (4 * sqrt(a * a + b * b + c * c)), 2)\n    } else {\n        return -1.0\n    }"}
{"task_id": "HumanEval/72", "completion": "\n    let max_weight = w.to_i32();\n    let total = 0;\n    for i, v in enumerate(q) {\n        total += v.to_i32();\n    }\n    return total.to_i32() <= max_weight;"}
{"task_id": "HumanEval/73", "completion": "\n    n = arr.len()\n    dp = [0] * (n + 1)\n    for i in range(n):\n        dp[i + 1] = dp[i] + 1\n        for j in range(i):\n            if arr[j] == arr[i]:\n                dp[i + 1] = min(dp[i + 1], dp[j] + 1)\n    return dp[n]"}
{"task_id": "HumanEval/74", "completion": "\n    let total_len = lst1.length + lst2.length;\n    let total_chars = 0;\n    let lst1_chars = 0;\n    let lst2_chars = 0;\n    for i in lst1 {\n        lst1_chars += i.length;\n    }\n    for i in lst2 {\n        lst2_chars += i.length;\n    }\n    if lst1_chars < lst2_chars {\n        lst1_chars\n    } else {\n        lst2_chars\n    }\n    if lst1_chars == lst2_chars {\n        lst1\n    } else {\n        lst2\n    }"}
{"task_id": "HumanEval/75", "completion": "\n    for i in 0..a.size() {\n        if a[i] % 3!= 0 {\n            return false\n        }\n    }\n    return true"}
{"task_id": "HumanEval/76", "completion": "\n    if x == 0 {\n        return false\n    }\n    if x == n {\n        return true\n    }\n    if x % n!= 0 {\n        return false\n    }\n    return is_simple_power(x / n, n)"}
{"task_id": "HumanEval/77", "completion": "\n    return a.to_pow(3) == a"}
{"task_id": "HumanEval/78", "completion": "\n    let count = 0;\n    for i in num.to_char_array() {\n        if i.to_i32_s() % 2 == 0 {\n            count += 1;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/79", "completion": "\n    let binary = String::new(\"db\")\n    while (decimal > 0) {\n        decimal = decimal - 1\n        binary = binary + String::from(\"{0}\".format(decimal % 2))\n        decimal = decimal / 2\n    }\n    binary = binary + String::new(\"db\")\n    return binary"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3 {\n        return false\n    }\n    let chars = [c for c in s]\n    let i = 0\n    let j = 3\n    while j < len(chars) {\n        if chars[i]!= chars[j] {\n            i += 1\n            j += 1\n        } else {\n            return false\n        }\n    }\n    return true"}
{"task_id": "HumanEval/81", "completion": "\n    let grades_map = {\n        4.0: \"A+\",\n        3.7: \"A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n        2.7: \"B\",\n        2.3: \"B-\",\n        2.0: \"C+\",\n        1.7: \"C\",\n        1.3: \"C-\",\n        1.0: \"D+\",\n        0.7: \"D\",\n        0.0: \"D-\",\n        0.0: \"E\"\n    }\n    grades.map(&|(|!grades_map[grade])).reject(&|(&!_) => \"E\")"}
{"task_id": "HumanEval/82", "completion": "\n    let length = string.length;\n    if length == 2 {\n        return true;\n    } else if length == 3 {\n        return true;\n    } else if length == 5 {\n        return true;\n    } else if length == 7 {\n        return true;\n    } else if length == 11 {\n        return true;\n    } else if length == 13 {\n        return true;\n    } else if length == 17 {\n        return true;\n    } else if length == 19 {\n        return true;\n    } else if length == 23 {\n        return true;\n    } else if length == 29 {\n        return true;\n    } else if length == 31 {\n        return true;\n    } else if length == 37 {\n        return true;\n    } else if length == 41 {\n        return true;\n    } else if length == 43 {\n        return true;\n    } else if length == 47 {\n        return true;\n    } else if length == 53 {\n        return true;\n    } else if length == 59 {\n        return true;\n    } else if length == 61 {\n        return true;\n    } else if length == 67 {\n        return true;\n    } else if length == 71 {\n        return true;\n    } else if length == 73 {\n        return true;\n    } else if length == 79 {\n        return true;\n    } else if length == 83 {\n        return true;\n    } else if length == 89 {\n        return true;\n    } else if length == 97 {\n        return true;\n    } else if length == 101 {\n        return true;\n    } else if length == 103 {\n        return true;\n    } else if length == 107 {\n        return true;\n    } else if length == 109 {\n        return true;\n    } else if length == 113 {\n        return true;\n    } else if length == 127 {\n        return true;\n    } else if length == 131 {\n        return true;\n    } else if length == 137 {\n        return true;\n    } else if length == 139 {\n        return true;\n    } else if length == 149 {\n        return true;\n    } else if length == 151 {\n        return true;\n"}
{"task_id": "HumanEval/83", "completion": "\n    let count = 0;\n    for i in 1..n {\n        if i.to_string().starts_with(\"1\") {\n            count += 1;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/84", "completion": "\n    let total = 0;\n    for i in N {\n        total += i;\n    }\n    let binary = String::from(to_binary(total));\n    return binary;"}
{"task_id": "HumanEval/85", "completion": "\n    let i = 0\n    let j = 0\n    while i < lst.size {\n        if lst[i] % 2 == 0 {\n            lst[j] = lst[i]\n            j++\n        }\n        i++\n    }\n    return j"}
{"task_id": "HumanEval/86", "completion": "\n    let words = s.split(\" \");\n    let res = [];\n    for i in words {\n        let word = i;\n        let chars = word.split(\"\");\n        let char_list = [];\n        for j in chars {\n            let char = j;\n            char_list.push(char);\n        }\n        char_list.sort();\n        let new_word = \"\";\n        for j in char_list {\n            new_word += j;\n        }\n        res.push(new_word);\n    }\n    return String::from(\" \".join(res));"}
{"task_id": "HumanEval/87", "completion": "\n    let row_count = lst.size();\n    let col_count = lst[0].size();\n    let result = Vec::<(isize, isize)>::new();\n    for i in 0..row_count {\n        for j in 0..col_count {\n            if lst[i].get(j) == x {\n                result.push((i, j));\n            }\n        }\n    }\n    result.sort((a, b) => a.0 - b.0);\n    result.sort((a, b) => b.1);\n    return result;"}
{"task_id": "HumanEval/88", "completion": "\n    let sum = array.reduce(|a, b| a + b)\n    if sum % 2 == 0 {\n        return array.sort(|a, b| a - b)\n    } else {\n        return array.sort(|a, b| b - a)\n    }"}
{"task_id": "HumanEval/89", "completion": "\n    let i = 0;\n    let res = \"\";\n    while i < s.length {\n        let c = s.index(i);\n        let c2 = s.index(i + 1);\n        let c3 = s.index(i + 2);\n        let c4 = s.index(i + 3);\n        let c5 = s.index(i + 4);\n        let c6 = s.index(i + 5);\n        let c7 = s.index(i + 6);\n        let c8 = s.index(i + 7);\n        let c9 = s.index(i + 8);\n        let c10 = s.index(i + 9);\n        let c11 = s.index(i + 10);\n        let c12 = s.index(i + 11);\n        let c13 = s.index(i + 12);\n        let c14 = s.index(i + 13);\n        let c15 = s.index(i + 14);\n        let c16 = s.index(i + 15);\n        let c17 = s.index(i + 16);\n        let c18 = s.index(i + 17);\n        let c19 = s.index(i + 18);\n        let c20 = s.index(i + 19);\n        let c21 = s.index(i + 20);\n        let c22 = s.index(i + 21);\n        let c23 = s.index(i + 22);\n        let c24 = s.index(i + 23);\n        let c25 = s.index(i + 24);\n        let c26 = s.index(i + 25);\n        let c27 = s.index(i + 26);\n        let c28 = s.index(i + 27);\n        let c29 = s.index(i + 28);\n        let c30 = s.index(i + 29);\n        let c31 = s.index(i + 30);\n        let c32 = s.index(i + 31);\n        let c33 = s.index(i + 32);\n        let c34 = s.index(i + 33);\n        let c35 = s.index(i + 34);\n        "}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2 {\n        return None\n    }\n    val smallest = lst[0]\n    val next_smallest = None\n    for i in 1..len(lst) {\n        if lst[i] < smallest {\n            next_smallest = smallest\n            smallest = lst[i]\n        }\n    }\n    if next_smallest == None {\n        return None\n    }\n    return Some(next_smallest)"}
{"task_id": "HumanEval/91", "completion": "\n    let count = 0;\n    for line in S.splitlines() {\n        if line.starts_with(\"I\") {\n            count += 1;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/92", "completion": "\n    return x == y + z || x == z + y || y == x + z || y == z + x || z == x + y || z == y + x;"}
{"task_id": "HumanEval/93", "completion": "\n    let vowels = \"aeiou\"\n    let new_message = \"\"\n    for let i in message {\n        let char = message[i]\n        if let char in vowels {\n            let new_char = message[i + 2]\n            new_message += new_char\n        } else {\n            new_message += char\n        }\n    }\n    return new_message"}
{"task_id": "HumanEval/94", "completion": "\n    var max: isize = 0;\n    var sum: isize = 0;\n    for i in lst {\n        if i > max {\n            max = i;\n        }\n        if is_prime(i) {\n            sum += i;\n        }\n    }\n    return sum;"}
{"task_id": "HumanEval/95", "completion": "\n    let all_lower_case = true;\n    let all_upper_case = true;\n    for i in dict.key_set().iter() {\n        all_lower_case = all_lower_case && i.to_lower() == i;\n        all_upper_case = all_upper_case && i.to_upper() == i;\n    }\n    return all_lower_case || all_upper_case;"}
{"task_id": "HumanEval/96", "completion": "\n    let vec = Vec::new()\n    for i in [2..n] {\n        if i.is_prime {\n            vec.push(i)\n        }\n    }\n    return vec"}
{"task_id": "HumanEval/97", "completion": "\n    var a_unit: isize;\n    var b_unit: isize;\n    var a_unit_digit: u8;\n    var b_unit_digit: u8;\n    var product: isize;\n    if (a < 0) {\n        a = -a;\n        a_unit = -1;\n    } else {\n        a_unit = 1;\n    }\n    if (b < 0) {\n        b = -b;\n        b_unit = -1;\n    } else {\n        b_unit = 1;\n    }\n    while (a > 0) {\n        a_unit_digit = a % 10;\n        a = a / 10;\n        product = product + a_unit_digit * b_unit;\n    }\n    return product;"}
{"task_id": "HumanEval/98", "completion": "\n    let count = 0;\n    for i, c in enumerate(s.to_char_array()) {\n        if i % 2 == 0 and c.to_u8() >= 'A' and c.to_u8() <= 'Z' {\n            count += 1;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/99", "completion": "\n    let i = parse_int(value)\n    if i == 0 {\n        return i\n    }\n    let diff = i - 0\n    let diff_abs = abs(diff)\n    let diff_abs_2 = abs(diff - 2)\n    let diff_abs_3 = abs(diff - 3)\n    let diff_abs_4 = abs(diff - 4)\n    let diff_abs_5 = abs(diff - 5)\n    let diff_abs_6 = abs(diff - 6)\n    let diff_abs_7 = abs(diff - 7)\n    let diff_abs_8 = abs(diff - 8)\n    let diff_abs_9 = abs(diff - 9)\n    let diff_abs_10 = abs(diff - 10)\n    let diff_abs_11 = abs(diff - 11)\n    let diff_abs_12 = abs(diff - 12)\n    let diff_abs_13 = abs(diff - 13)\n    let diff_abs_14 = abs(diff - 14)\n    let diff_abs_15 = abs(diff - 15)\n    let diff_abs_16 = abs(diff - 16)\n    let diff_abs_17 = abs(diff - 17)\n    let diff_abs_18 = abs(diff - 18)\n    let diff_abs_19 = abs(diff - 19)\n    let diff_abs_20 = abs(diff - 20)\n    let diff_abs_21 = abs(diff - 21)\n    let diff_abs_22 = abs(diff - 22)\n    let diff_abs_23 = abs(diff - 23)\n    let diff_abs_24 = abs(diff - 24)\n    let diff_abs_25 = abs(diff - 25)\n    let diff_abs_26 = abs(diff - 26)\n    let diff_abs_27 = abs(diff - 27)\n    let diff_abs_28 = abs(diff - 28)\n    let diff_abs_29 = abs(diff - 29)\n    let diff_abs_30 = abs(diff - 30)\n    let diff_abs_31 = abs(diff - 31)\n    let diff_abs_32 = abs(diff - 32)\n    let"}
{"task_id": "HumanEval/100", "completion": "\n    if n % 2 == 0 {\n        return make_a_pile(n - 2)\n    }\n    else {\n        return make_a_pile(n - 1)\n    }"}
{"task_id": "HumanEval/101", "completion": "\n    return s.split(\", \")"}
{"task_id": "HumanEval/102", "completion": "\n    match x {\n        case 0:\n            return -1\n        case y:\n            return y\n        case _:\n            return choose_num(y, x)\n    }"}
{"task_id": "HumanEval/104", "completion": "\n    let mut v = Vec::new();\n    for i in x {\n        if i % 2 == 0 {\n            v.push_back(i);\n        }\n    }\n    v.sort();\n    v.unique();\n    v.sort();\n    return v;"}
{"task_id": "HumanEval/105", "completion": "\n    let mut result = Vec::new();\n    for i in 0..arr.len() {\n        if let x = arr[i] {\n            if x >= 1 && x <= 9 {\n                result.push(String::from(x.to_str().to_s))\n            }\n        }\n    }\n    result.reverse!();\n    result.map!(&*mut result.iter());\n    return result;"}
{"task_id": "HumanEval/106", "completion": "\n    let vec![isize] = Vec![isize]::new(n)\n    for i in vec! {\n        if i % 2 == 0 {\n            vec![i] = i * i\n        } else {\n            vec![i] = i\n        }\n    }\n    return vec!"}
{"task_id": "HumanEval/107", "completion": "\n    let even = 0;\n    let odd = 0;\n    for i in [1..n] {\n        if i % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n    return (even, odd);"}
{"task_id": "HumanEval/108", "completion": "\n    let count = 0;\n    for i in arr {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    return count;"}
{"task_id": "HumanEval/109", "completion": "\n    if len(arr) == 0 {\n        return true\n    }\n    let i = 0\n    let j = len(arr) - 1\n    while i < j {\n        if arr[i] > arr[j] {\n            return false\n        }\n        let k = i\n        while k <= j {\n            if arr[k] > arr[k + 1] {\n                arr[k] = arr[k + 1]\n                arr[k + 1] = arr[k]\n                k = k + 1\n            } else {\n                break\n            }\n        }\n        j = j - 1\n    }\n    return true"}
{"task_id": "HumanEval/110", "completion": "\n    let (evens: Vec<isize> = lst1.filter(|x| x % 2 == 0))\n    let (odds: Vec<isize> = lst1.filter(|x| x % 2!= 0))\n    let (evens2: Vec<isize> = lst2.filter(|x| x % 2 == 0))\n    let (odds2: Vec<isize> = lst2.filter(|x| x % 2!= 0))\n    let (exchanged: Vec<isize> = odds.concat(evens2))\n    let (exchanged2: Vec<isize> = odds2.concat(evens))\n    if (exchanged.is_empty() || exchanged2.is_empty()) {\n        return \"NO\"\n    }\n    let (exchanged_evens: Vec<isize> = exchanged.filter(|x| x % 2 == 0))\n    let (exchanged_odds: Vec<isize> = exchanged.filter(|x| x % 2!= 0))\n    if (exchanged_evens.is_empty() || exchanged_odds.is_empty()) {\n        return \"NO\"\n    }\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "\n    let hash: HashMap<String, isize> = HashMap::new();\n    let count: isize = 0;\n    for let letter in test.split(\" \") {\n        count += 1;\n        hash.insert(letter, count);\n    }\n    return hash;"}
{"task_id": "HumanEval/112", "completion": "\n    let result = s;\n    for i in c {\n        result = result.filter {|x| x!= i}\n    }\n    if result == s {\n        false\n    } else {\n        result\n        true\n    }"}
{"task_id": "HumanEval/113", "completion": "\n    let lst = lst.map(|s| {\n        let num_odd = s.scan(|i| {\n            let count = 0;\n            while i.match(/\\d/) {\n                count += 1;\n                i\n            }\n            if count % 2 == 1 {\n                count\n            } else {\n                0\n            }\n        }).map(&|i| i.length).sum;\n        let s = s.map(&|i| {\n            let count = 0;\n            while i.match(/\\d/) {\n                count += 1;\n                i\n            }\n            if count % 2 == 1 {\n                count\n            } else {\n                0\n            }\n        }).join(\"\");\n        s\n    });\n    lst"}
{"task_id": "HumanEval/114", "completion": "\n    let min_sum = +INF\n    for i, j in sliding_window(nums, 2):\n        min_sum = min(min_sum, sum(nums[i:j]))\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "\n    let n = grid.length\n    let m = grid[0].length\n    let dp = [0] * (n + 1)\n    for i in 0..n {\n        dp[i + 1] = dp[i]\n        for j in 0..m {\n            dp[i + 1] = dp[i + 1] + grid[i][j]\n        }\n    }\n    let ans = 0\n    for i in 0..n {\n        for j in 0..m {\n            if grid[i][j] == 1 {\n                let curr = dp[i + 1] - dp[i]\n                if curr > capacity {\n                    ans = ans + 1\n                }\n            }\n        }\n    }\n    ans"}
{"task_id": "HumanEval/116", "completion": "\n    let counts = [0, 0, 0, 0, 0]\n    for i in arr {\n        counts[i] += 1\n    }\n    let sort_key = fn(i: isize) {\n        let count = counts[i]\n        if count == 0 {\n            return i\n        }\n        if count == 1 {\n            return i.to_i32()\n        }\n        return i.to_i32() + count.to_i32()\n    }\n    return sorted(arr, key: sort_key)"}
{"task_id": "HumanEval/117", "completion": "\n    let words = s.split(\" \")\n    let result = Vec::new()\n    for i in 0..words.size() {\n        let word = words[i]\n        if (word.size() == n) {\n            result.push(word)\n        }\n    }\n    return result"}
{"task_id": "HumanEval/118", "completion": "\n    match word.reverse().match(|c|\n        match c.reverse().match(|v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |v|\n            |_|\n            |"}
{"task_id": "HumanEval/119", "completion": "\n    match lst {\n        [String::from(\"()\")] => \"Yes\",\n        [String::from(\"(())\")] => \"Yes\",\n        [String::from(\"(()\")] => \"No\",\n        [String::from(\"()()\")] => \"Yes\",\n        [String::from(\"(())()\")] => \"Yes\",\n        [String::from(\"(()\")] => \"No\",\n        [String::from(\"()()()\")] => \"Yes\",\n        [String::from(\"(())()\")] => \"No\",\n        [String::from(\"(()()\")] => \"No\",\n        [String::from(\"(()\")] => \"No\",\n        [String::from(\"()()()()\")] => \"No\",\n        [String::from(\"(()()\")] => \"No\",\n        [String::from(\"(()\")] => \"No\",\n        [String::from(\"()()()()()\")] => \"No\",\n        [String::from(\"(()()\")] => \"No\",\n        [String::from(\"(()\")] => \"No\",\n        [String::from(\"()()()()()()\")] => \"No\",\n        [String::from(\"(()()\")] => \"No\",\n        [String::from(\"(()\")] => \"No\",\n        [String::from(\"()()()()()()()\")] => \"No\",\n        [String::from(\"(()()\")] => \"No\",\n        [String::from(\"(()\")] => \"No\",\n        [String::from(\"()()()()()()()()\")] => \"No\",\n        [String::from(\"(()()\")] => \"No\",\n        [String::from(\"(()\")] => \"No\",\n        [String::from(\"()()()()()()()()()\")] => \"No\",\n        [String::from(\"(()()\")] => \"No\",\n        [String::from(\"(()\")] => \"No\",\n        [String::from(\"()()()()()()()()()()\")] => \"No\",\n        [String::from(\"(()()\")] => \"No\",\n        [String::from(\"(()\")]"}
{"task_id": "HumanEval/120", "completion": "\n    let arr = arr.sort(|a, b| a - b).reverse!\n    let k = k % len(arr)\n    let arr = arr[:k]\n    arr"}
{"task_id": "HumanEval/121", "completion": "\n    let total = 0\n    for i, v in enumerate(lst) {\n        if i % 2 == 0 {\n            total += v\n        }\n    }\n    return total"}
{"task_id": "HumanEval/122", "completion": "\n    let total = 0\n    for i, x in enumerate(arr) {\n        if i < k {\n            total += x\n        } else {\n            break\n        }\n    }\n    return total"}
{"task_id": "HumanEval/123", "completion": "\n    let collatz = fn(n: isize) -> Vec<isize> {\n        if n == 1 {\n            Vec<isize>()\n        } else if n % 2 == 0 {\n            collatz(n = n / 2)\n        } else {\n            collatz(n = 3 * n + 1)\n        }\n    }\n    collatz(n)"}
{"task_id": "HumanEval/124", "completion": "\n    match date {\n        case \"\": false\n        case \" \": false\n        case \"  \": false\n        case \"   \": false\n        case \"    \": false\n        case \"     \": false\n        case \"      \": false\n        case \"       \": false\n        case \"        \": false\n        case \"         \": false\n        case \"          \": false\n        case \"           \": false\n        case \"            \": false\n        case \"             \": false\n        case \"              \": false\n        case \"               \": false\n        case \"                \": false\n        case \"                 \": false\n        case \"                  \": false\n        case \"                   \": false\n        case \"                    \": false\n        case \"                     \": false\n        case \"                      \": false\n        case \"                       \": false\n        case \"                         \": false\n        case \"                           \": false\n        case \"                              \": false\n        case \"                               \": false\n        case \"                                 \": false\n        case \"                                  \": false\n        case \"                                   \": false\n        case \"                                    \": false\n        case \"                                     \": false\n        case \"                                       \": false\n        case \"                                        \": false\n        case \"                                         \": false\n        case \"                                          \": false\n        case \"                                           \": false\n        case \"                                            \": false\n        case \"                                             \": false\n        case \"                                              \": false\n        case \"                                               \": false\n        case \"                                                \": false\n        case \"                                                 \": false\n        case \"                                                   \": false\n        case \"                                                    \": false\n        case \"                                                      \": false\n        case \"                                                       \": false\n        case \"                                                         \": false\n        case \"                                                          \": false\n        case \"                                                           \": false\n        case \"                                                           \": false\n        case \"                                                           \": false\n        case \"                                                           \": false\n        case"}
{"task_id": "HumanEval/126", "completion": "\n    for i in 0..<lst.len() {\n        if lst[i] < lst[i+1] {\n            continue\n        } else {\n            return false\n        }\n    }\n    return true"}
{"task_id": "HumanEval/127", "completion": "\n    let (start1, end1) = interval1\n    let (start2, end2) = interval2\n    let (start, end) = (start1, end1) & (start2, end2)\n    if (start, end) == (0, 0) {\n        return \"NO\"\n    } else {\n        let (start, end) = (start, end)\n        let (start, end) = (start, end)\n        if (start, end) == (0, 0) {\n            return \"NO\"\n        } else {\n            let (start, end) = (start, end)\n            let (start, end) = (start, end)\n            if (start, end) == (0, 0) {\n                return \"NO\"\n            } else {\n                let (start, end) = (start, end)\n                let (start, end) = (start, end)\n                if (start, end) == (0, 0) {\n                    return \"NO\"\n                } else {\n                    let (start, end) = (start, end)\n                    let (start, end) = (start, end)\n                    if (start, end) == (0, 0) {\n                        return \"NO\"\n                    } else {\n                        let (start, end) = (start, end)\n                        let (start, end) = (start, end)\n                        if (start, end) == (0, 0) {\n                            return \"NO\"\n                        } else {\n                            let (start, end) = (start, end)\n                            let (start, end) = (start, end)\n                            if (start, end) == (0, 0) {\n                                return \"NO\"\n                            } else {\n                                let (start, end) = (start, end)\n                                let (start, end) = (start, end)\n                                if (start, end) == (0, 0) {\n                                    return \"NO\"\n                                } else {\n                                    let (start, end) = (start, end)\n                                    let (start, end) = (start, end)\n                                    if (start, end) == (0, 0) {\n                                        return \"NO"}
{"task_id": "HumanEval/128", "completion": "\n    let sum = 0;\n    let prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *= i.sign();\n    }\n    if prod == 0 {\n        return None;\n    }\n    return Some(sum * prod);"}
{"task_id": "HumanEval/129", "completion": "\n    n: isize = grid.len()\n    m: isize = grid[0].len()\n    lst: Vec<isize> = Vec.new(k + 1)\n    lst[0] = 0\n    for i in range(1, k + 1):\n        lst[i] = lst[i - 1] + 1\n        for j in range(n):\n            for x in range(m):\n                if grid[j][x] == i:\n                    lst[i] = min(lst[i], lst[i - 1] + 1)\n    return lst"}
{"task_id": "HumanEval/130", "completion": "\n    let t = [1, 1, 1]\n    for i in [0..n] {\n        if i % 2 == 0 {\n            t = t.concat(Vec<isize>::new(2))\n        } else {\n            t = t.concat(Vec<isize>::new(3))\n        }\n    }\n    return t"}
{"task_id": "HumanEval/131", "completion": "\n    if n < 10 {\n        return n;\n    }\n    let mut product: isize = 1;\n    for i in 0..9 {\n        if n % 10 == 0 {\n            continue;\n        }\n        product *_ = product * 10 + n % 10;\n    }\n    return product;"}
{"task_id": "HumanEval/132", "completion": "\n    match string {\n        case \"[]\":\n            return true\n        case \"[[][]]\":\n            return true\n        case \"[]][[][[]]\":\n            return true\n        case \"[]][[][[]]][[][[]]\":\n            return true\n        case \"[]][[][[]]][[][[]]][[][[]]\":\n            return true\n        case \"[]][[][[]]][[][[]]][[][[]]][[][[]]\":\n            return true\n        case \"[]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]\":\n            return true\n        case \"[]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]\":\n            return true\n        case \"[]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]\":\n            return true\n        case \"[]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]\":\n            return true\n        case \"[]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]\":\n            return true\n        case \"[]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]\":\n            return true\n        case \"[]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]\":\n            return true\n        case \"[]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]][[][[]]"}
{"task_id": "HumanEval/133", "completion": "\n    let total: isize = 0;\n    for x in lst {\n        total += int(Ceil(x * x));\n    }\n    return total;"}
{"task_id": "HumanEval/134", "completion": "\n    if txt.trim().length == 0 {\n        return false\n    }\n    return txt.trim().split(\" \").last().trim().length == 1"}
{"task_id": "HumanEval/135", "completion": "\n    var i = 0;\n    for i, e in enumerate(arr) {\n        if i > 0 and e < arr[i - 1] {\n            return i;\n        }\n    }\n    return -1;"}
{"task_id": "HumanEval/136", "completion": "\n    match lst {\n        [] -> (None, None)\n        Some(xs) -> (Some(max(xs)), Some(min(xs)))\n    }"}
{"task_id": "HumanEval/138", "completion": "\n    let sum = 0;\n    for i in [0..n] {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    if sum == n {\n        true;\n    } else {\n        false;\n    }"}
{"task_id": "HumanEval/139", "completion": "\n    if n < 0 {\n        return 0\n    }\n    var factorial: isize = 1\n    for i in [1..n] {\n        factorial *= i\n    }\n    return factorial"}
{"task_id": "HumanEval/140", "completion": "\n    if text.contains(\"  \") {\n        text = text.replace_all(\"  \", \"-\")\n    }\n    text = text.replace_all(\" \", \"_\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "\n    if (file_name.length < 3) {\n        return \"No\";\n    }\n    if (file_name.match(/^[a-zA-Z]/)) {\n        return \"No\";\n    }\n    if (file_name.match(/^[a-zA-Z0-9]{3,}$/)) {\n        return \"No\";\n    }\n    if (!file_name.match(/^[a-zA-Z0-9]{3,}[.](txt|exe|dll)$/)) {\n        return \"No\";\n    }\n    return \"Yes\";"}
{"task_id": "HumanEval/142", "completion": "\n    let sum = 0\n    for i, x in enumerate(lst) {\n        if i % 3 == 0 {\n            sum += x * x\n        } else if i % 4 == 0 {\n            sum += x * x * x\n        }\n    }\n    return sum"}
{"task_id": "HumanEval/143", "completion": "\n    let words = sentence.split(\" \")\n    let result = \"\"\n    for word in words {\n        if is_prime(word.length()) {\n            result += word + \" \"\n        }\n    }\n    return result.trim()"}
{"task_id": "HumanEval/144", "completion": "\n    var a = parse_fraction(x);\n    var b = parse_fraction(n);\n    var c = a.multiply(b);\n    return c.is_whole();"}
{"task_id": "HumanEval/145", "completion": "\n    let sum_digits = fn(i: isize) -> isize {\n        let sum = 0\n        while i > 0 {\n            sum += i % 10\n            i /= 10\n        }\n        sum\n    }\n    let sum_digits_vec = vec![sum_digits(i) for i in nums]\n    let sort_vec = sort!(sum_digits_vec)\n    let sort_nums = vec![nums[i] for i in sort_vec]\n    sort_nums"}
{"task_id": "HumanEval/146", "completion": "\n    let count = 0\n    for i in nums {\n        if i > 10 && i % 2 == 1 {\n            count += 1\n        }\n    }\n    return count"}
{"task_id": "HumanEval/147", "completion": "\n    let a = vec![i64](n)\n    a.fill!(i64(0))\n    a.foreach(&|(&i, &j) =>\n        if i < j {\n            a[i] = i * i - i + 1\n            a[j] = i * i - i + 1\n        }\n    )\n    let count = 0\n    a.foreach(&|(&i, &j) =>\n        if i < j {\n            if (a[i] + a[j] % 3 == 0) {\n                count += 1\n            }\n        }\n    )\n    return count"}
{"task_id": "HumanEval/149", "completion": "\n    let lst = lst.sort(|a, b| a.length() < b.length()? -1 : a.length() > b.length()? 1 : 0)\n    let result = Vec::new(lst.size())\n    for i, word in enumerate(lst) {\n        if word.length() % 2 == 0 {\n            result.push(word)\n        }\n    }\n    return result"}
{"task_id": "HumanEval/150", "completion": "\n    if n == 0 {\n        x\n    } else if n == 1 {\n        y\n    } else if n == 2 {\n        x\n    } else if n == 3 {\n        y\n    } else if n == 4 {\n        x\n    } else if n == 5 {\n        y\n    } else if n == 6 {\n        x\n    } else if n == 7 {\n        y\n    } else if n == 8 {\n        x\n    } else if n == 9 {\n        y\n    } else if n == 10 {\n        x\n    } else if n == 11 {\n        y\n    } else if n == 12 {\n        x\n    } else if n == 13 {\n        y\n    } else if n == 14 {\n        x\n    } else if n == 15 {\n        y\n    } else if n == 16 {\n        x\n    } else if n == 17 {\n        y\n    } else if n == 18 {\n        x\n    } else if n == 19 {\n        y\n    } else if n == 20 {\n        x\n    } else if n == 21 {\n        y\n    } else if n == 22 {\n        x\n    } else if n == 23 {\n        y\n    } else if n == 24 {\n        x\n    } else if n == 25 {\n        y\n    } else if n == 26 {\n        x\n    } else if n == 27 {\n        y\n    } else if n == 28 {\n        x\n    } else if n == 29 {\n        y\n    } else if n == 30 {\n        x\n    } else if n == 31 {\n        y\n    } else if n == 32 {\n        x\n    } else if n == 33 {\n        y\n    } else if n == 34 {\n        x\n    } else if n == 35 {\n        y\n    } else if n == 36 {\n        x\n    } else if n == 37 {\n        y\n    } else if n == 38 {\n        x\n    } else if n == 39 {\n        y\n    } else if n == 40 {\n        x\n    } else if n == 41 {\n        y\n    } else if n == 42 {\n"}
{"task_id": "HumanEval/151", "completion": "\n    match lst {\n        [] -> 0\n        [x: f64] -> {\n            x % 2!= 0? x * x : 0\n        }\n    }"}
{"task_id": "HumanEval/152", "completion": "\n    let diffs = Vec::new(guess.length)\n    for i, (score, guess) in enumerate(zip(game, guess)) {\n        if score == guess {\n            diffs[i] = 0\n        } else {\n            diffs[i] = abs(score - guess)\n        }\n    }\n    return diffs"}
{"task_id": "HumanEval/153", "completion": "\n    let class_name_lower = class_name.to_lower\n    let extensions_lower = map!(|e| e.to_lower)\n    let class_name_upper = class_name.to_upper\n    let extensions_upper = map!(|e| e.to_upper)\n    let class_name_cap = class_name.to_capitalize\n    let extensions_cap = map!(|e| e.to_capitalize)\n    let class_name_cap_lower = class_name.to_capitalize_lower\n    let extensions_cap_lower = map!(|e| e.to_capitalize_lower)\n    let class_name_cap_upper = class_name.to_capitalize_upper\n    let extensions_cap_upper = map!(|e| e.to_capitalize_upper)\n    let class_name_cap_cap = class_name.to_capitalize_capitalize\n    let extensions_cap_cap = map!(|e| e.to_capitalize_capitalize)\n    let class_name_cap_cap_lower = class_name.to_capitalize_capitalize_lower\n    let extensions_cap_cap_lower = map!(|e| e.to_capitalize_capitalize_lower)\n    let class_name_cap_cap_upper = class_name.to_capitalize_capitalize_upper\n    let extensions_cap_cap_upper = map!(|e| e.to_capitalize_capitalize_upper)\n    let class_name_cap_cap_cap = class_name.to_capitalize_capitalize_capitalize\n    let extensions_cap_cap_cap = map!(|e| e.to_capitalize_capitalize_capitalize)\n    let class_name_cap_cap_cap_lower = class_name.to_capitalize_capitalize_capitalize_lower\n    let extensions_cap_cap_cap_lower = map!(|e| e.to_capitalize_capitalize_capitalize_lower)\n    let class_name_cap_cap_cap_upper = class_name.to_capitalize_capitalize_capitalize_upper\n    let extensions_"}
{"task_id": "HumanEval/154", "completion": "\n    let a_len = a.len()\n    let b_len = b.len()\n    let a_str = a.to_string()\n    let b_str = b.to_string()\n    let a_str_len = a_str.len()\n    let b_str_len = b_str.len()\n    let a_str_str = a_str.to_string()\n    let b_str_str = b_str.to_string()\n    let a_str_str_len = a_str_str.len()\n    let b_str_str_len = b_str_str.len()\n    let a_str_str_str = a_str_str.to_string()\n    let b_str_str_str = b_str_str.to_string()\n    let a_str_str_str_len = a_str_str_str.len()\n    let b_str_str_str_len = b_str_str_str.len()\n    let a_str_str_str_str = a_str_str_str.to_string()\n    let b_str_str_str_str = b_str_str_str.to_string()\n    let a_str_str_str_str_len = a_str_str_str_str.len()\n    let b_str_str_str_str_len = b_str_str_str_str.len()\n    let a_str_str_str_str_str = a_str_str_str_str.to_string()\n    let b_str_str_str_str_str = b_str_str_str_str.to_string()\n    let a_str_str_str_str_str_len = a_str_str_str_str_str.len()\n    let b_str_str_str_str_str_len = b_str_str_str_str_str.len()\n    let a_str_str_str_str_str_str = a_str_str_str_str_str.to_string()\n    let b_str_str_str_str_str_str ="}
{"task_id": "HumanEval/155", "completion": "\n    let even = 0;\n    let odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 10;\n    }\n    (even, odd);"}
{"task_id": "HumanEval/156", "completion": "\n    let numeral_map = {\n        1: \"I\",\n        5: \"V\",\n        10: \"X\",\n        50: \"L\",\n        100: \"C\",\n        500: \"D\",\n        1000: \"M\",\n    }\n    let numeral_string = \"\"\n    while number > 0 {\n        if number >= 1000 {\n            numeral_string += numeral_map[1000]\n            number -= 1000\n        } else if number >= 500 {\n            numeral_string += numeral_map[500]\n            number -= 500\n        } else if number >= 100 {\n            numeral_string += numeral_map[100]\n            number -= 100\n        } else if number >= 50 {\n            numeral_string += numeral_map[50]\n            number -= 50\n        } else if number >= 10 {\n            numeral_string += numeral_map[10]\n            number -= 10\n        } else if number >= 5 {\n            numeral_string += numeral_map[5]\n            number -= 5\n        } else if number >= 1 {\n            numeral_string += numeral_map[1]\n            number -= 1\n        }\n    }\n    return numeral_string"}
{"task_id": "HumanEval/157", "completion": "\n    let s = a.abs() + b.abs() + c.abs();\n    let s2 = a.abs() * b.abs() * c.abs();\n    return s == s2;"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_chars = 0\n    max_unique_chars_word = \"\"\n    for word in words {\n        if word.length() > max_unique_chars {\n            max_unique_chars = word.length()\n            max_unique_chars_word = word\n        }\n    }\n    for word in words {\n        if word.length() == max_unique_chars {\n            if word < max_unique_chars_word {\n                max_unique_chars_word = word\n            }\n        }\n    }\n    return max_unique_chars_word"}
{"task_id": "HumanEval/159", "completion": "\n    let total = number + need;\n    let left = remaining - need;\n    if (total < remaining) {\n        total\n    } else {\n        remaining\n    }\n    if (left < 0) {\n        0\n    } else {\n        left\n    }\n    vec![total, left]"}
{"task_id": "HumanEval/160", "completion": "\n    let result = 0\n    for i, op in enumerate(operand) {\n        if operator[i] == '+' {\n            result += op\n        } else if operator[i] == '-' {\n            result -= op\n        } else if operator[i] == '*' {\n            result *= op\n        } else if operator[i] == '//' {\n            result //= op\n        } else if operator[i] == '**' {\n            result **= op\n        }\n    }\n    return result"}
{"task_id": "HumanEval/161", "completion": "\n    let mut s = s;\n    for i in s.iter() {\n        if i.is_alpha() {\n            if i.is_upper() {\n                i.to_lower()\n            } else {\n                i.to_upper()\n            }\n        }\n    }\n    return s"}
{"task_id": "HumanEval/162", "completion": "\n    if text.is_empty {\n        None\n    } else {\n        Some(String::from(text.to_sha1))\n    }"}
{"task_id": "HumanEval/163", "completion": "\n    let vec = Vec::new();\n    for i in [a..b] {\n        if i % 2 == 0 {\n            vec.push(i);\n        }\n    }\n    vec"}
