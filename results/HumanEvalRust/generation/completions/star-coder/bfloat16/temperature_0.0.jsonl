{"task_id": "HumanEval/0", "completion": "\n    let mut numbers = numbers.clone();\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    for i in 0..numbers.len() - 1 {\n        if numbers[i + 1] - numbers[i] < threshold {\n            return true;\n        }\n    }\n    false"}
{"task_id": "HumanEval/1", "completion": "\n    let mut result: Vec<String> = vec![];\n    let mut current_group: String = String::new();\n    let mut paren_count: i32 = 0;\n    for c in paren_string.chars() {\n        if c == '(' {\n            paren_count += 1;\n        } else if c == ')' {\n            paren_count -= 1;\n        }\n        if paren_count == 0 {\n            result.push(current_group.clone());\n            current_group = String::new();\n        } else {\n            current_group.push(c);\n        }\n    }\n    result"}
{"task_id": "HumanEval/2", "completion": "\n    number - number.floor()"}
{"task_id": "HumanEval/3", "completion": "\n    let mut balance = 0;\n    for op in operations {\n        balance += op;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false"}
{"task_id": "HumanEval/4", "completion": "\n    let mean = mean(&numbers);\n    let mut absolute_deviations: Vec<f64> = vec![];\n    for number in numbers {\n        absolute_deviations.push(number.abs());\n    }\n    mean(&absolute_deviations)"}
{"task_id": "HumanEval/5", "completion": "\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate() {\n        if i > 0 {\n            result.push(delimeter);\n        }\n        result.push(*n);\n    }\n    result"}
{"task_id": "HumanEval/6", "completion": "\n    let mut paren_stack: Vec<char> = Vec::new();\n    let mut paren_level: Vec<isize> = Vec::new();\n    let mut paren_level_max: Vec<isize> = Vec::new();\n    let mut paren_level_max_index: Vec<isize> = Vec::new();\n    let mut paren_level_max_index_count: Vec<isize> = Vec::new();\n    let mut paren_level_max_index_count_max: Vec<isize> = Vec::new();\n    let mut paren_level_max_index_count_max_index: Vec<isize> = Vec::new();\n    let mut paren_level_max_index_count_max_index_count: Vec<isize> = Vec::new();\n    let mut paren_level_max_index_count_max_index_count_max: Vec<isize> = Vec::new();\n    let mut paren_level_max_index_count_max_index_count_max_index: Vec<isize> = Vec::new();\n    let mut paren_level_max_index_count_max_index_count_max_index_count: Vec<isize> = Vec::new();\n    let mut paren_level_max_index_count_max_index_count_max_index_count_max: Vec<isize> = Vec::new();\n    let mut paren_level_max_index_count_max_index_count_max_index_count_max_index: Vec<isize> = Vec::new();\n    let mut paren_level_max_index_count_max_index_count_max_index_count_max_index_count: Vec<isize> = Vec::new();\n    let mut paren_level_max_index_count_max_index_count_max_index_count_max_index_count_max: Vec<isize> = Vec::new();\n    let mut paren_level_max_index_count_max_index_count_max_index_count_max_index_count_max_index: Vec<isize> = Vec::new();\n    let mut paren_level_max_index_count_max"}
{"task_id": "HumanEval/7", "completion": "\n    strings\n       .into_iter()\n       .filter(|s| s.contains(&substring))\n       .collect()"}
{"task_id": "HumanEval/8", "completion": "\n    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    (sum, product)"}
{"task_id": "HumanEval/9", "completion": "\n    let mut max_so_far = numbers[0];\n    let mut result = vec![max_so_far];\n    for number in numbers.iter().skip(1) {\n        max_so_far = max(max_so_far, *number);\n        result.push(max_so_far);\n    }\n    result"}
{"task_id": "HumanEval/10", "completion": "\n    let mut result = String::new();\n    let mut i = string.len() - 1;\n    while i >= 0 && string[i] == string[0] {\n        i -= 1;\n    }\n    for j in 0..=i {\n        result.push(string[j]);\n    }\n    for j in (0..=i).rev() {\n        result.push(string[j]);\n    }\n    result"}
{"task_id": "HumanEval/11", "completion": "\n    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b { '0' } else { '1' })\n    }\n    result"}
{"task_id": "HumanEval/12", "completion": "\n    let mut longest = None;\n    for s in strings {\n        if longest.is_none() || longest.as_ref().unwrap().len() < s.len() {\n            longest = Some(s);\n        }\n    }\n    longest"}
{"task_id": "HumanEval/13", "completion": "\n    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }"}
{"task_id": "HumanEval/14", "completion": "\n    let mut result = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n    }\n    result"}
{"task_id": "HumanEval/15", "completion": "\n    let mut s = String::new();\n    for i in 0..n + 1 {\n        s.push_str(&i.to_string());\n        s.push_str(\" \");\n    }\n    s.pop();\n    s"}
{"task_id": "HumanEval/16", "completion": "\n    let mut chars = HashMap::new();\n    for c in string.chars() {\n        chars.entry(c).and_modify(|e| *e += 1).or_insert(1);\n    }\n    chars.len() as isize"}
{"task_id": "HumanEval/17", "completion": "\n    let mut beats: Vec<isize> = Vec::new();\n    let mut beat_count: isize = 0;\n    for beat in music_string.chars() {\n        if beat == 'o' {\n            beat_count += 4;\n        } else if beat == 'o|' {\n            beat_count += 2;\n        } else if beat == '.|' {\n            beat_count += 1;\n        }\n        beats.push(beat_count);\n    }\n    beats"}
{"task_id": "HumanEval/18", "completion": "\n    let mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n        if string[index..].starts_with(substring.as_str()) {\n            count += 1;\n        }\n        index += 1;\n    }\n    count"}
{"task_id": "HumanEval/19", "completion": "\n    let mut numbers = numbers.split_whitespace();\n    let mut numbers: Vec<i32> = numbers.map(|x| x.parse::<i32>().unwrap()).collect();\n    numbers.sort();\n    numbers.iter().map(|x| x.to_string()).collect::<Vec<String>>().join(\" \")"}
{"task_id": "HumanEval/20", "completion": "\n    let mut min_index = 0;\n    let mut min_value = numbers[0];\n    let mut max_index = 0;\n    let mut max_value = numbers[0];\n    for (i, value) in numbers.iter().enumerate() {\n        if value < &min_value {\n            min_index = i;\n            min_value = *value;\n        }\n        if value > &max_value {\n            max_index = i;\n            max_value = *value;\n        }\n    }\n    if min_index > max_index {\n        (max_value, min_value)\n    } else {\n        (min_value, max_value)\n    }"}
{"task_id": "HumanEval/21", "completion": "\n    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()"}
{"task_id": "HumanEval/23", "completion": "\n    string.len() as isize"}
{"task_id": "HumanEval/24", "completion": "\n    let mut divisor = n;\n    while divisor > 1 {\n        if n % divisor == 0 {\n            return divisor;\n        }\n        divisor -= 1;\n    }\n    return 1;"}
{"task_id": "HumanEval/25", "completion": "\n    let mut factors = Vec::new();\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors"}
{"task_id": "HumanEval/26", "completion": "\n    let mut result = Vec::new();\n    for number in numbers {\n        if!result.contains(&number) {\n            result.push(number);\n        }\n    }\n    result"}
{"task_id": "HumanEval/27", "completion": "\n    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase().unwrap());\n        } else if c.is_uppercase() {\n            result.push(c.to_lowercase().unwrap());\n        } else {\n            result.push(c);\n        }\n    }\n    result"}
{"task_id": "HumanEval/28", "completion": "\n    strings.into_iter().collect()"}
{"task_id": "HumanEval/29", "completion": "\n    strings.into_iter().filter(|s| s.starts_with(prefix)).collect()"}
{"task_id": "HumanEval/30", "completion": "\n    l.into_iter().filter(|&x| x > 0).collect()"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2 {\n        return false;\n    }\n    for i in 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/33", "completion": "\n    let mut l_prime = l.clone();\n    let mut i = 0;\n    while i < l_prime.len() {\n        if i % 3 == 0 {\n            l_prime.swap(i, i + 2);\n        }\n        i += 1;\n    }\n    l_prime"}
{"task_id": "HumanEval/34", "completion": "\n    let mut result = Vec::new();\n    for i in l {\n        if!result.contains(&i) {\n            result.push(i);\n        }\n    }\n    result"}
{"task_id": "HumanEval/35", "completion": "\n    let mut max = l[0];\n    for i in 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n    }\n    max"}
{"task_id": "HumanEval/36", "completion": "\n    let mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/37", "completion": "\n    let mut l_sorted = l.clone();\n    let mut i = 0;\n    while i < l.len() {\n        if i % 2 == 0 {\n            l_sorted[i] = l[i / 2];\n        }\n        i += 1;\n    }\n    l_sorted"}
{"task_id": "HumanEval/39", "completion": "\n    let mut fib = 1;\n    let mut fib_prev = 1;\n    let mut fib_next = 2;\n    let mut i = 0;\n    while i < n {\n        fib = fib_next;\n        fib_next = fib_next + fib_prev;\n        fib_prev = fib;\n        i += 1;\n    }\n    fib"}
{"task_id": "HumanEval/40", "completion": "\n    let mut seen = HashSet::new();\n    for i in l {\n        if seen.contains(&-i) {\n            return true;\n        }\n        seen.insert(i);\n    }\n    false"}
{"task_id": "HumanEval/41", "completion": "\n    let mut cars_left = n;\n    let mut cars_right = n;\n    let mut collisions = 0;\n    while cars_left > 0 && cars_right > 0 {\n        cars_left -= 1;\n        cars_right -= 1;\n        collisions += 1;\n    }\n    collisions"}
{"task_id": "HumanEval/42", "completion": "\n    l.iter().map(|&x| x + 1).collect()"}
{"task_id": "HumanEval/43", "completion": "\n    let mut seen = HashSet::new();\n    for i in l {\n        if seen.contains(&-i) {\n            return true;\n        }\n        seen.insert(i);\n    }\n    false"}
{"task_id": "HumanEval/44", "completion": "\n    let mut result = String::new();\n    let mut x = x;\n    let mut base = base;\n    while x > 0 {\n        result.push(char::from_digit((x % base) as u32, base as u32).unwrap());\n        x /= base;\n    }\n    result.chars().rev().collect()"}
{"task_id": "HumanEval/45", "completion": "\n    a * h / 2.0"}
{"task_id": "HumanEval/46", "completion": "\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    d"}
{"task_id": "HumanEval/47", "completion": "\n    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2 - 1] + l[n / 2]) as f64 / 2.0\n    } else {\n        l[n / 2] as f64\n    }"}
{"task_id": "HumanEval/48", "completion": "\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    let mut last = chars.next_back();\n\n    while let (Some(f), Some(l)) = (first, last) {\n        if f.to_ascii_lowercase()!= l.to_ascii_lowercase() {\n            return false;\n        }\n        first = chars.next();\n        last = chars.next_back();\n    }\n    true"}
{"task_id": "HumanEval/49", "completion": "\n    if n < 0 {\n        return modp(n + p, p)\n    }\n    if n < p {\n        return n\n    }\n    return modp(n - p, p)"}
{"task_id": "HumanEval/51", "completion": "\n    let mut result = String::new();\n    for c in text.chars() {\n        if!c.is_alphabetic() {\n            result.push(c);\n        }\n    }\n    result"}
{"task_id": "HumanEval/52", "completion": "\n    for i in l {\n        if i >= t {\n            return false;\n        }\n    }\n    true"}
{"task_id": "HumanEval/53", "completion": "\n    x + y"}
{"task_id": "HumanEval/54", "completion": "\n    let mut chars0 = s0.chars();\n    let mut chars1 = s1.chars();\n    let mut c0 = chars0.next();\n    let mut c1 = chars1.next();\n    while c0.is_some() && c1.is_some() {\n        if c0.unwrap()!= c1.unwrap() {\n            return false;\n        }\n        c0 = chars0.next();\n        c1 = chars1.next();\n    }\n    c0.is_none() && c1.is_none()"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0 { return 1; }\n    if n == 1 { return 1; }\n    return fib(n - 1) + fib(n - 2);"}
{"task_id": "HumanEval/56", "completion": "\n    let mut stack = Vec::new();\n    for c in brackets.chars() {\n        if c == '<' {\n            stack.push(c);\n        } else if c == '>' {\n            if stack.pop().is_none() {\n                return false;\n            }\n        }\n    }\n    stack.is_empty()"}
{"task_id": "HumanEval/57", "completion": "\n    let mut increasing = true;\n    let mut decreasing = true;\n    for i in 0..l.len() - 1 {\n        if l[i] > l[i + 1] {\n            increasing = false;\n        }\n        if l[i] < l[i + 1] {\n            decreasing = false;\n        }\n    }\n    increasing || decreasing"}
{"task_id": "HumanEval/58", "completion": "\n    let mut result = Vec::new();\n    for i in l1 {\n        if l2.contains(&i) {\n            result.push(i);\n        }\n    }\n    result"}
{"task_id": "HumanEval/59", "completion": "\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    n"}
{"task_id": "HumanEval/60", "completion": "\n    if n == 1 {\n        return 1;\n    }\n    n + sum_to_n(n - 1)"}
{"task_id": "HumanEval/61", "completion": "\n    let mut stack = Vec::new();\n    for c in brackets.chars() {\n        if c == '(' {\n            stack.push(c);\n        } else if c == ')' {\n            if let Some(last) = stack.pop() {\n                if last!= '(' {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n    }\n    stack.is_empty()"}
{"task_id": "HumanEval/62", "completion": "\n    let mut ys = vec![0; xs.len() - 1];\n    for i in 0..xs.len() - 1 {\n        ys[i] = xs[i + 1] * (i + 1) as isize;\n    }\n    ys"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0 {\n        0\n    } else if n == 1 {\n        0\n    } else if n == 2 {\n        1\n    } else {\n        fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n    }"}
{"task_id": "HumanEval/64", "completion": "\n    let mut count = 0;\n    for c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/65", "completion": "\n    let mut x_str = x.to_string();\n    let mut result = String::new();\n    if shift > x_str.len() as isize {\n        for c in x_str.chars().rev() {\n            result.push(c);\n        }\n    } else {\n        for c in x_str.chars() {\n            result.push(c);\n        }\n        for _ in 0..shift {\n            result.remove(0);\n        }\n    }\n    result"}
{"task_id": "HumanEval/66", "completion": "\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/67", "completion": "\n    let mut apples: isize = 0;\n    let mut oranges: isize = 0;\n    let mut mangoes: isize = 0;\n    let mut apples_str: String = String::new();\n    let mut oranges_str: String = String::new();\n    let mut mangoes_str: String = String::new();\n    let mut apples_index: usize = 0;\n    let mut oranges_index: usize = 0;\n    let mut mangoes_index: usize = 0;\n    let mut apples_count: usize = 0;\n    let mut oranges_count: usize = 0;\n    let mut mangoes_count: usize = 0;\n    let mut apples_end: usize = 0;\n    let mut oranges_end: usize = 0;\n    let mut mangoes_end: usize = 0;\n    let mut apples_start: usize = 0;\n    let mut oranges_start: usize = 0;\n    let mut mangoes_start: usize = 0;\n    let mut apples_len: usize = 0;\n    let mut oranges_len: usize = 0;\n    let mut mangoes_len: usize = 0;\n    let mut apples_and_oranges: String = String::new();\n    let mut apples_and_oranges_len: usize = 0;\n    let mut apples_and_oranges_index: usize = 0;\n    let mut apples_and_oranges_start: usize = 0;\n    let mut apples_and_oranges_end: usize = 0;\n    let mut apples_and_oranges_count: usize = 0;\n    let mut apples_and_oranges_str: String = String::new();\n    let mut apples_and_oranges_index_start: usize = 0;\n    let mut apples_and_oranges_index_end: usize = 0;\n    let mut apples_and_oranges_index_count: usize = 0;\n    let mut apples_and_oranges_index_str: String = String::new();\n    let mut apples_and_oranges_index_start_str: String = String::new();\n    let"}
{"task_id": "HumanEval/68", "completion": "\n    let mut min_even = isize::MAX;\n    let mut min_even_index = 0;\n    let mut min_index = 0;\n    for (i, &value) in arr.iter().enumerate() {\n        if value % 2 == 0 && value < min_even {\n            min_even = value;\n            min_even_index = i;\n        }\n        if value < min_index {\n            min_index = value;\n        }\n    }\n    if min_even == isize::MAX {\n        return vec![];\n    }\n    if min_even == min_index {\n        return vec![min_even, min_even_index];\n    }\n    vec![min_even, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "\n    let mut max_val = -1;\n    let mut max_count = 0;\n    let mut max_val_count = 0;\n    for i in lst {\n        if i > max_val {\n            max_val = i;\n            max_count = 1;\n        } else if i == max_val {\n            max_count += 1;\n        }\n        if max_count > max_val_count {\n            max_val_count = max_count;\n        }\n    }\n    if max_val_count == 1 {\n        return -1;\n    }\n    max_val"}
{"task_id": "HumanEval/70", "completion": "\n    let mut result = Vec::new();\n    let mut min = lst[0];\n    let mut max = lst[0];\n    for i in lst {\n        if i < min {\n            min = i;\n        }\n        if i > max {\n            max = i;\n        }\n    }\n    result.push(min);\n    result.push(max);\n    for i in lst {\n        if i!= min && i!= max {\n            result.push(i);\n        }\n    }\n    result"}
{"task_id": "HumanEval/71", "completion": "\n    let mut area: f64 = 0.0;\n    if a + b > c && a + c > b && b + c > a {\n        area = (a + b + c) as f64 / 2.0;\n        area = area.sqrt() * (area - a) * (area - b) * (area - c);\n        area = area.sqrt();\n    } else {\n        area = -1.0;\n    }\n    area"}
{"task_id": "HumanEval/72", "completion": "\n    let mut q = q.clone();\n    q.reverse();\n    let mut sum = 0;\n    for i in 0..q.len() {\n        sum += q[i];\n        if sum > w {\n            return false;\n        }\n    }\n    true"}
{"task_id": "HumanEval/73", "completion": "\n    let mut arr = arr.clone();\n    let mut changes = 0;\n    for i in 0..arr.len() {\n        if arr[i]!= arr[arr.len() - i - 1] {\n            changes += 1;\n            arr[i] = arr[arr.len() - i - 1];\n        }\n    }\n    changes"}
{"task_id": "HumanEval/74", "completion": "\n    let mut result = Vec::new();\n    let mut count1 = 0;\n    let mut count2 = 0;\n    for i in 0..lst1.len() {\n        count1 += lst1[i].len();\n    }\n    for i in 0..lst2.len() {\n        count2 += lst2[i].len();\n    }\n    if count1 < count2 {\n        result = lst1;\n    } else if count1 > count2 {\n        result = lst2;\n    } else {\n        result = lst1;\n    }\n    result"}
{"task_id": "HumanEval/75", "completion": "\n    let mut i = 2;\n    let mut is_prime = true;\n    while i < 100 {\n        if a % i == 0 {\n            is_prime = false;\n            break;\n        }\n        i += 1;\n    }\n    if is_prime {\n        return true;\n    }\n    i = 2;\n    while i < 100 {\n        if a % i == 0 {\n            if is_prime {\n                is_prime = false;\n            } else {\n                return false;\n            }\n        }\n        i += 1;\n    }\n    return is_prime;"}
{"task_id": "HumanEval/76", "completion": "\n    if n == 1 {\n        return true;\n    }\n    if x == 1 {\n        return false;\n    }\n    if x == n {\n        return true;\n    }\n    if x % n!= 0 {\n        return false;\n    }\n    let mut i = 2;\n    while i * i <= x {\n        if x % i == 0 {\n            return false;\n        }\n        i += 1;\n    }\n    return true;"}
{"task_id": "HumanEval/77", "completion": "\n    if a == 0 {\n        return true;\n    }\n    let mut n = 0;\n    while a > 0 {\n        a /= 3;\n        n += 1;\n    }\n    n * n * n == a"}
{"task_id": "HumanEval/78", "completion": "\n    let mut count = 0;\n    for c in num.chars() {\n        if c.is_digit(16) {\n            let n = c.to_digit(16).unwrap();\n            if n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13 || n == 17 {\n                count += 1;\n            }\n        }\n    }\n    count"}
{"task_id": "HumanEval/79", "completion": "\n    let mut binary = String::new();\n    binary.push_str(\"db\");\n    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(if decimal % 2 == 0 { \"0\" } else { \"1\" });\n        decimal /= 2;\n    }\n    binary.push_str(\"db\");\n    binary"}
{"task_id": "HumanEval/80", "completion": "\n    let mut seen = HashSet::new();\n    let mut cur = s.chars();\n    while let Some(c) = cur.next() {\n        let mut s = String::new();\n        s.push(c);\n        if let Some(c) = cur.next() {\n            s.push(c);\n            if let Some(c) = cur.next() {\n                s.push(c);\n            }\n        }\n        if seen.contains(&s) {\n            return false;\n        }\n        seen.insert(s);\n    }\n    true"}
{"task_id": "HumanEval/81", "completion": "\n    let mut letter_grades: Vec<String> = vec![];\n    for grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n        }\n    }\n    letter_grades"}
{"task_id": "HumanEval/82", "completion": "\n    let mut length = string.len();\n    let mut is_prime = true;\n    while length > 1 {\n        if length % 2 == 0 {\n            length = length / 2;\n        } else if length % 3 == 0 {\n            length = length / 3;\n        } else if length % 5 == 0 {\n            length = length / 5;\n        } else if length % 7 == 0 {\n            length = length / 7;\n        } else {\n            is_prime = false;\n            break;\n        }\n    }\n    is_prime"}
{"task_id": "HumanEval/83", "completion": "\n    let mut count = 0;\n    for i in 1..10 {\n        count += starts_one_ends_helper(n, i);\n    }\n    count"}
{"task_id": "HumanEval/84", "completion": "\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum += n % 2;\n        n /= 2;\n    }\n    sum.to_string()"}
{"task_id": "HumanEval/85", "completion": "\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/86", "completion": "\n    let mut words = s.split_whitespace();\n    let mut result = String::new();\n    for word in words {\n        let mut chars = word.chars();\n        let mut chars_iter = chars.by_ref();\n        let mut min_char = chars_iter.next().unwrap();\n        let mut max_char = min_char;\n        for c in chars_iter {\n            if c < min_char {\n                min_char = c;\n            }\n            if c > max_char {\n                max_char = c;\n            }\n        }\n        result.push_str(&max_char.to_string());\n        result.push_str(&min_char.to_string());\n        result.push_str(word);\n    }\n    result"}
{"task_id": "HumanEval/87", "completion": "\n    let mut result: Vec<(isize, isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n        for (j, col) in row.iter().enumerate() {\n            if *col == x {\n                result.push((i as isize, j as isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| a.0.cmp(&b.0));\n    result.sort_by(|a, b| b.1.cmp(&a.1));\n    result"}
{"task_id": "HumanEval/88", "completion": "\n    let mut array = array;\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        if array[i] + array[j] % 2 == 1 {\n            array.swap(i, j);\n            j -= 1;\n        } else {\n            i += 1;\n        }\n    }\n    array"}
{"task_id": "HumanEval/89", "completion": "\n    let mut result = String::new();\n    for c in s.chars() {\n        let mut index = c as usize;\n        if c.is_ascii_lowercase() {\n            index -= 97;\n        } else if c.is_ascii_uppercase() {\n            index -= 65;\n        }\n        index = (index + 2) % 26;\n        if c.is_ascii_lowercase() {\n            result.push(std::char::from_u32(97 + index).unwrap());\n        } else if c.is_ascii_uppercase() {\n            result.push(std::char::from_u32(65 + index).unwrap());\n        } else {\n            result.push(c);\n        }\n    }\n    result"}
{"task_id": "HumanEval/90", "completion": "\n    let mut min = lst[0];\n    let mut min_idx = 0;\n    for (i, v) in lst.iter().enumerate().skip(1) {\n        if v < &min {\n            min = *v;\n            min_idx = i;\n        }\n    }\n    if min_idx == 0 {\n        None\n    } else {\n        Some(min)\n    }"}
{"task_id": "HumanEval/91", "completion": "\n    let mut bored = 0;\n    let mut sentence = false;\n    for c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n            sentence = true;\n        }\n        if c == 'I' && sentence {\n            bored += 1;\n        }\n    }\n    bored"}
{"task_id": "HumanEval/92", "completion": "\n    let sum = x + y + z;\n    x.floor() == sum || y.floor() == sum || z.floor() == sum"}
{"task_id": "HumanEval/93", "completion": "\n    let mut result = String::new();\n    for c in message.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_ascii_lowercase());\n        } else if c.is_lowercase() {\n            result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c);\n        }\n    }\n    result"}
{"task_id": "HumanEval/94", "completion": "\n    let mut max = 0;\n    for i in lst {\n        if i > max {\n            max = i;\n        }\n    }\n    let mut sum = 0;\n    let mut i = max;\n    while i > 0 {\n        if i % 2 == 1 {\n            sum += i;\n        }\n        i /= 2;\n    }\n    sum"}
{"task_id": "HumanEval/95", "completion": "\n    let mut all_lower = true;\n    let mut all_upper = true;\n    for key in dict.keys() {\n        if key.to_lowercase()!= *key {\n            all_lower = false;\n        }\n        if key.to_uppercase()!= *key {\n            all_upper = false;\n        }\n    }\n    all_lower || all_upper"}
{"task_id": "HumanEval/96", "completion": "\n    let mut primes = Vec::new();\n    for i in 2..n {\n        if is_prime(i) {\n            primes.push(i);\n        }\n    }\n    primes"}
{"task_id": "HumanEval/97", "completion": "\n    let mut a_str = a.to_string();\n    let mut b_str = b.to_string();\n    let mut a_len = a_str.len();\n    let mut b_len = b_str.len();\n    if a_len < b_len {\n        let mut temp = a_str;\n        a_str = b_str;\n        b_str = temp;\n        let temp = a_len;\n        a_len = b_len;\n        b_len = temp;\n    }\n    let mut result = 0;\n    for i in 0..b_len {\n        result += (a_str.chars().nth(a_len - i - 1).unwrap() as isize - '0' as isize) * (b_str.chars().nth(b_len - i - 1).unwrap() as isize - '0' as isize);\n    }\n    result"}
{"task_id": "HumanEval/98", "completion": "\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 {\n            if c.is_uppercase() {\n                count += 1;\n            }\n        }\n    }\n    count"}
{"task_id": "HumanEval/99", "completion": "\n    let mut value: f64 = value.parse().unwrap();\n    if value.fract() >= 0.5 {\n        value += 1.0;\n    }\n    value.floor() as isize"}
{"task_id": "HumanEval/100", "completion": "\n    let mut result = Vec::new();\n    let mut n = n;\n    while n > 0 {\n        result.push(n);\n        if n % 2 == 0 {\n            n = n / 2;\n        } else {\n            n = (n + 1) / 2;\n        }\n    }\n    result"}
{"task_id": "HumanEval/101", "completion": "\n    let mut words = Vec::new();\n    let mut word = String::new();\n    let mut is_word = false;\n    for c in s.chars() {\n        if c =='' {\n            if is_word {\n                words.push(word.clone());\n                word.clear();\n                is_word = false;\n            }\n        } else {\n            if!is_word {\n                is_word = true;\n            }\n            word.push(c);\n        }\n    }\n    if is_word {\n        words.push(word.clone());\n    }\n    words"}
{"task_id": "HumanEval/102", "completion": "\n    let mut x = x;\n    let mut y = y;\n    if x % 2 == 1 {\n        x += 1;\n    }\n    if y % 2 == 1 {\n        y -= 1;\n    }\n    if x <= y {\n        return -1;\n    }\n    (x + y) / 2"}
{"task_id": "HumanEval/104", "completion": "\n    let mut result = Vec::new();\n    for i in x {\n        let mut digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap()).collect::<Vec<u32>>();\n        digits.sort();\n        if digits.len() == digits.iter().filter(|&x| x % 2 == 0).count() {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result"}
{"task_id": "HumanEval/105", "completion": "\n    let mut result: Vec<String> = Vec::new();\n    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.push(String::from(match i {\n                1 => \"One\",\n                2 => \"Two\",\n                3 => \"Three\",\n                4 => \"Four\",\n                5 => \"Five\",\n                6 => \"Six\",\n                7 => \"Seven\",\n                8 => \"Eight\",\n                9 => \"Nine\",\n                _ => \"Error\",\n            }));\n        }\n    }\n    result.sort();\n    result.reverse();\n    result"}
{"task_id": "HumanEval/106", "completion": "\n    let mut result = Vec::new();\n    for i in 1..n + 1 {\n        if i % 2 == 0 {\n            result.push(factorial(i));\n        } else {\n            result.push(sum(i));\n        }\n    }\n    result"}
{"task_id": "HumanEval/107", "completion": "\n    let mut even = 0;\n    let mut odd = 0;\n    for i in 1..n + 1 {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even += 1;\n            } else {\n                odd += 1;\n            }\n        }\n    }\n    (even, odd)"}
{"task_id": "HumanEval/108", "completion": "\n    let mut count = 0;\n    for i in arr {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/109", "completion": "\n    let mut arr = arr;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] > arr[j] {\n            arr[i] = arr[i] + arr[j];\n            arr[j] = arr[i] - arr[j];\n            arr[i] = arr[i] - arr[j];\n        }\n        if arr[i] <= arr[j] {\n            i += 1;\n        }\n    }\n    arr.iter().all(|&x| x >= 0)"}
{"task_id": "HumanEval/110", "completion": "\n    let mut lst1 = lst1;\n    let mut lst2 = lst2;\n    let mut count = 0;\n    for i in 0..lst1.len() {\n        if lst1[i] % 2!= 0 {\n            lst1[i] = lst2[i];\n            lst2[i] = lst1[i];\n            count += 1;\n        }\n    }\n    if count == 0 {\n        return \"YES\".to_string();\n    }\n    \"NO\".to_string()"}
{"task_id": "HumanEval/111", "completion": "\n    let mut map = HashMap::new();\n    for c in test.split_whitespace() {\n        let count = map.entry(c.to_string()).or_insert(0);\n        *count += 1;\n    }\n    map"}
{"task_id": "HumanEval/112", "completion": "\n    let mut result = String::new();\n    let mut is_palindrome = true;\n    for c in s.chars() {\n        if c!= c.to_lowercase().next().unwrap() {\n            result.push(c);\n        } else {\n            if c.is_lowercase() {\n                is_palindrome = false;\n            }\n        }\n    }\n    (result, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "\n    let mut result = Vec::new();\n    for i in lst {\n        let mut count = 0;\n        for j in i.chars() {\n            if j.to_digit(10).unwrap() % 2 == 1 {\n                count += 1;\n            }\n        }\n        result.push(format!(\"the number of odd elements {}n the str{}ng {} of the {}nput.\", count, count, count, count));\n    }\n    result"}
{"task_id": "HumanEval/114", "completion": "\n    let mut min_sum = 0;\n    let mut sum = 0;\n    let mut start = 0;\n    for (i, &num) in nums.iter().enumerate() {\n        sum += num;\n        if sum < num {\n            sum = num;\n            start = i;\n        }\n        if sum < min_sum {\n            min_sum = sum;\n        }\n    }\n    min_sum"}
{"task_id": "HumanEval/115", "completion": "\n    let mut ans = 0;\n    let mut grid = grid;\n    let mut row = 0;\n    let mut col = 0;\n    let mut dir = 0;\n    while row < grid.len() && col < grid[0].len() {\n        if grid[row][col] == 0 {\n            dir = (dir + 1) % 4;\n            if dir == 0 {\n                col += 1;\n            } else if dir == 1 {\n                row += 1;\n            } else if dir == 2 {\n                col -= 1;\n            } else {\n                row -= 1;\n            }\n        } else {\n            if dir == 0 {\n                grid[row][col] = 0;\n                if col + 1 < grid[0].len() && grid[row][col + 1] == 1 {\n                    col += 1;\n                } else {\n                    row += 1;\n                }\n            } else if dir == 1 {\n                grid[row][col] = 0;\n                if row + 1 < grid.len() && grid[row + 1][col] == 1 {\n                    row += 1;\n                } else {\n                    col -= 1;\n                }\n            } else if dir == 2 {\n                grid[row][col] = 0;\n                if col > 0 && grid[row][col - 1] == 1 {\n                    col -= 1;\n                } else {\n                    row -= 1;\n                }\n            } else {\n                grid[row][col] = 0;\n                if row > 0 && grid[row - 1][col] == 1 {\n                    row -= 1;\n                } else {\n                    col += 1;\n                }\n            }\n            ans += 1;\n        }\n    }\n    ans"}
{"task_id": "HumanEval/116", "completion": "\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n    })"}
{"task_id": "HumanEval/117", "completion": "\n    let mut words: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    let mut consonants: isize = 0;\n    let mut last_char: char ='';\n    for c in s.chars() {\n        if c.is_alphabetic() {\n            if last_char.is_alphabetic() {\n                word.push(c);\n            } else {\n                word.push(c);\n                consonants = 1;\n            }\n        } else {\n            if consonants == n {\n                words.push(word.clone());\n            }\n            word.clear();\n            consonants = 0;\n        }\n        last_char = c;\n    }\n    if consonants == n {\n        words.push(word.clone());\n    }\n    words"}
{"task_id": "HumanEval/118", "completion": "\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut vowel_index = 0;\n    let mut vowel_found = false;\n    let mut closest_vowel = String::from(\"\");\n    let mut closest_vowel_index = 0;\n    let mut closest_vowel_found = false;\n    let mut word_length = word.len();\n    let mut i = 0;\n    while i < word_length {\n        if vowels.contains(&word[i].to_ascii_lowercase()) {\n            vowel_found = true;\n            vowel_index = i;\n        }\n        if vowel_found &&!closest_vowel_found {\n            if vowel_index > 0 && word[vowel_index - 1].to_ascii_lowercase()!= 'a' {\n                closest_vowel_found = true;\n                closest_vowel_index = vowel_index - 1;\n            }\n            if vowel_index < word_length - 1 && word[vowel_index + 1].to_ascii_lowercase()!= 'a' {\n                closest_vowel_found = true;\n                closest_vowel_index = vowel_index + 1;\n            }\n        }\n        i += 1;\n    }\n    if closest_vowel_found {\n        closest_vowel = word[closest_vowel_index..closest_vowel_index + 1].to_string();\n    }\n    return closest_vowel;"}
{"task_id": "HumanEval/119", "completion": "\n    let mut stack: Vec<char> = vec![];\n    for s in lst {\n        for c in s.chars() {\n            if c == '(' {\n                stack.push(c);\n            } else {\n                if stack.pop().is_none() {\n                    return \"No\".to_string();\n                }\n            }\n        }\n    }\n    if stack.is_empty() {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }"}
{"task_id": "HumanEval/120", "completion": "\n    let mut arr = arr.clone();\n    arr.sort_by(|a, b| b.cmp(a));\n    arr[0..k as usize].to_vec()"}
{"task_id": "HumanEval/121", "completion": "\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && *x % 2!= 0 {\n            sum += *x;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/122", "completion": "\n    let mut sum = 0;\n    for i in 0..k {\n        sum += arr[i]\n    }\n    sum"}
{"task_id": "HumanEval/123", "completion": "\n    let mut odd_collatz: Vec<isize> = Vec::new();\n    let mut current_num = n;\n    while current_num!= 1 {\n        if current_num % 2 == 0 {\n            current_num = current_num / 2;\n        } else {\n            current_num = 3 * current_num + 1;\n        }\n        odd_collatz.push(current_num);\n    }\n    odd_collatz.sort();\n    odd_collatz"}
{"task_id": "HumanEval/124", "completion": "\n    let date_split: Vec<&str> = date.split(\"-\").collect();\n    if date_split.len()!= 3 {\n        return false;\n    }\n    let month: i32 = date_split[0].parse().unwrap();\n    let day: i32 = date_split[1].parse().unwrap();\n    let year: i32 = date_split[2].parse().unwrap();\n    if month < 1 || month > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n        if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n            return false;\n        }\n        if day < 1 || day > 30 {\n            if month == 4 || month == 6 || month == 9 || month == 11 {\n                return false;\n            }\n            if day < 1 || day > 29 {\n                return false;\n            }\n        }\n    }\n    if year < 1000 || year > 3000 {\n        return false;\n    }\n    return true;"}
{"task_id": "HumanEval/126", "completion": "\n    let mut last = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] < last {\n            return false;\n        }\n        last = lst[i];\n    }\n    true"}
{"task_id": "HumanEval/127", "completion": "\n    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n        return \"NO\".to_string();\n    }\n    let mut intersection = (start1.max(start2), end1.min(end2));\n    if intersection.0 > intersection.1 {\n        return \"NO\".to_string();\n    }\n    let mut length = intersection.1 - intersection.0 + 1;\n    if length == 1 {\n        return \"NO\".to_string();\n    }\n    let mut is_prime = true;\n    for i in 2..(length / 2 + 1) {\n        if length % i == 0 {\n            is_prime = false;\n            break;\n        }\n    }\n    if is_prime {\n        return \"YES\".to_string();\n    }\n    \"NO\".to_string()"}
{"task_id": "HumanEval/128", "completion": "\n    let mut prod = 1;\n    let mut sum = 0;\n    for i in arr {\n        if i == 0 {\n            return Some(0);\n        }\n        if i > 0 {\n            prod *= i;\n        } else {\n            prod *= -i;\n        }\n        sum += i;\n    }\n    Some(sum * prod)"}
{"task_id": "HumanEval/129", "completion": "\n    let n = grid.len();\n    let mut dp = vec![vec![0; n]; n];\n    for i in 0..n {\n        for j in 0..n {\n            if i == 0 && j == 0 {\n                dp[i][j] = grid[i][j];\n            } else if i == 0 {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n            } else if j == 0 {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n            } else {\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    let mut ans = vec![0; k as usize];\n    let mut i = n - 1;\n    let mut j = n - 1;\n    for _ in 0..k {\n        ans[k as usize - 1] = grid[i][j];\n        if i == 0 && j == 0 {\n            break;\n        } else if i == 0 {\n            j -= 1;\n        } else if j == 0 {\n            i -= 1;\n        } else {\n            if dp[i - 1][j] < dp[i][j - 1] {\n                i -= 1;\n            } else {\n                j -= 1;\n            }\n        }\n    }\n    ans"}
{"task_id": "HumanEval/130", "completion": "\n    let mut result = vec![0; n as usize + 1];\n    result[0] = 1;\n    result[1] = 1;\n    result[2] = 2;\n    for i in 3..n as usize + 1 {\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    result"}
{"task_id": "HumanEval/131", "completion": "\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n        result *= n % 10;\n        n /= 10;\n    }\n    result"}
{"task_id": "HumanEval/132", "completion": "\n    let mut stack = Vec::new();\n    for c in string.chars() {\n        if c == '[' {\n            stack.push(c);\n        } else if c == ']' {\n            if stack.pop().is_none() {\n                return false;\n            }\n        }\n    }\n    stack.is_empty()"}
{"task_id": "HumanEval/133", "completion": "\n    let mut sum = 0;\n    for i in lst {\n        sum += i.ceil() as isize;\n    }\n    sum"}
{"task_id": "HumanEval/134", "completion": "\n    let mut chars = txt.chars();\n    let mut last_char = chars.next_back();\n    while last_char.is_some() && last_char.unwrap().is_whitespace() {\n        last_char = chars.next_back();\n    }\n    if last_char.is_none() {\n        return false;\n    }\n    last_char.unwrap().is_alphabetic()"}
{"task_id": "HumanEval/135", "completion": "\n    let mut arr = arr;\n    arr.sort();\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = 0;\n    while j < arr.len() {\n        if arr[j] >= arr[i] {\n            i = j;\n            j += 1;\n        } else {\n            k = i;\n            i = j;\n            j = k + 1;\n        }\n    }\n    if arr[i] >= arr[k] {\n        -1\n    } else {\n        i as isize\n    }"}
{"task_id": "HumanEval/136", "completion": "\n    let mut largest = None;\n    let mut smallest = None;\n    for i in lst {\n        if i < 0 {\n            if largest.is_none() || largest.unwrap() < i {\n                largest = Some(i);\n            }\n        } else if smallest.is_none() || smallest.unwrap() > i {\n            smallest = Some(i);\n        }\n    }\n    (largest, smallest)"}
{"task_id": "HumanEval/138", "completion": "\n    let mut n = n;\n    let mut sum = 0;\n    while n > 0 {\n        if n % 2 == 0 {\n            sum += n;\n        }\n        n -= 1;\n    }\n    sum % 4 == 0"}
{"task_id": "HumanEval/139", "completion": "\n    let mut result = 1;\n    for i in 1..n+1 {\n        result *= i;\n    }\n    result"}
{"task_id": "HumanEval/140", "completion": "\n    let mut result = String::new();\n    let mut last_char ='';\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n        if c =='' {\n            if last_char =='' {\n                consecutive_spaces += 1;\n            } else {\n                if consecutive_spaces > 1 {\n                    result.push_str(\"-\");\n                }\n                consecutive_spaces = 0;\n            }\n        } else {\n            if consecutive_spaces > 1 {\n                result.push_str(\"-\");\n            }\n            consecutive_spaces = 0;\n            result.push(c);\n        }\n        last_char = c;\n    }\n    result"}
{"task_id": "HumanEval/141", "completion": "\n    let mut file_name_split = file_name.split(\".\");\n    let file_name_split_len = file_name_split.clone().count();\n    let file_name_split_len_minus_one = file_name_split_len - 1;\n    let file_name_split_len_minus_two = file_name_split_len - 2;\n    let file_name_split_len_minus_three = file_name_split_len - 3;\n    let file_name_split_len_minus_four = file_name_split_len - 4;\n    let file_name_split_len_minus_five = file_name_split_len - 5;\n    let file_name_split_len_minus_six = file_name_split_len - 6;\n    let file_name_split_len_minus_seven = file_name_split_len - 7;\n    let file_name_split_len_minus_eight = file_name_split_len - 8;\n    let file_name_split_len_minus_nine = file_name_split_len - 9;\n    let file_name_split_len_minus_ten = file_name_split_len - 10;\n    let file_name_split_len_minus_eleven = file_name_split_len - 11;\n    let file_name_split_len_minus_twelve = file_name_split_len - 12;\n    let file_name_split_len_minus_thirteen = file_name_split_len - 13;\n    let file_name_split_len_minus_fourteen = file_name_split_len - 14;\n    let file_name_split_len_minus_fifteen = file_name_split_len - 15;\n    let file_name_split_len_minus_sixteen = file_name_split_len - 16;\n    let file_name_split_len_minus_seventeen = file_name_split_len - 17;\n    let file_name_split_len_minus_eighteen = file_name_split_len - 18;\n    let file_"}
{"task_id": "HumanEval/142", "completion": "\n    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += v * v;\n        }\n        if i % 4 == 0 {\n            sum += v * v * v;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/143", "completion": "\n    let mut result = String::new();\n    let mut words = sentence.split_whitespace();\n    while let Some(word) = words.next() {\n        if is_prime(word.len()) {\n            result.push_str(word);\n            result.push(' ');\n        }\n    }\n    result.trim().to_string()"}
{"task_id": "HumanEval/144", "completion": "\n    let x_num = x.split('/').collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n    let x_den = x.split('/').collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n    let n_num = n.split('/').collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n    let n_den = n.split('/').collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n    if x_den * n_num == x_num * n_den {\n        return true;\n    }\n    return false;"}
{"task_id": "HumanEval/145", "completion": "\n    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.abs().to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.abs().to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n        if a_sum == b_sum {\n            a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums"}
{"task_id": "HumanEval/146", "completion": "\n    let mut count = 0;\n    for num in nums {\n        if num > 10 && num % 10 == 1 && num % 100 % 10 == 1 {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/147", "completion": "\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            for k in j+1..n {\n                if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n                    count += 1;\n                }\n            }\n        }\n    }\n    count"}
{"task_id": "HumanEval/149", "completion": "\n    let mut lst = lst;\n    lst.sort_by(|a, b| a.len().cmp(&b.len()));\n    lst.sort();\n    lst"}
{"task_id": "HumanEval/150", "completion": "\n    if is_prime(n) {\n        x\n    } else {\n        y\n    }"}
{"task_id": "HumanEval/151", "completion": "\n    let mut sum = 0;\n    for i in lst {\n        if i.is_integer() && i > 0 {\n            sum += i.powi(2);\n        }\n    }\n    sum as isize"}
{"task_id": "HumanEval/152", "completion": "\n    let mut result = Vec::new();\n    for (g, s) in guess.iter().zip(game.iter()) {\n        result.push(g - s);\n    }\n    result"}
{"task_id": "HumanEval/153", "completion": "\n    let mut strongest_strength = -1;\n    let mut strongest_extension = String::new();\n    for extension in extensions {\n        let mut strength = 0;\n        for (i, c) in extension.chars().enumerate() {\n            if c.is_uppercase() {\n                strength -= 1;\n            } else if c.is_lowercase() {\n                strength += 1;\n            }\n        }\n        if strength > strongest_strength {\n            strongest_strength = strength;\n            strongest_extension = extension;\n        } else if strength == strongest_strength {\n            if extension < strongest_extension {\n                strongest_extension = extension;\n            }\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)"}
{"task_id": "HumanEval/154", "completion": "\n    let mut a_len = a.len();\n    let mut b_len = b.len();\n    if a_len < b_len {\n        return false;\n    }\n    if a_len == b_len {\n        return a == b;\n    }\n    let mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n    let mut a_char = a_iter.next().unwrap();\n    let mut b_char = b_iter.next().unwrap();\n    while a_char!= b_char {\n        a_char = a_iter.next().unwrap();\n        a_len -= 1;\n    }\n    if a_len == 0 {\n        return false;\n    }\n    let mut a_iter = a.chars();\n    let mut b_iter = b.chars();\n    for _ in 0..a_len {\n        a_char = a_iter.next().unwrap();\n        b_char = b_iter.next().unwrap();\n    }\n    while a_char!= b_char {\n        a_char = a_iter.next().unwrap();\n        b_char = b_iter.next().unwrap();\n    }\n    return true;"}
{"task_id": "HumanEval/155", "completion": "\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num = num.abs();\n    while num > 0 {\n        if num % 10 % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n        num /= 10;\n    }\n    (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "\n    let mut result = String::new();\n    let mut number = number;\n    let mut i = 0;\n    while number > 0 {\n        if number >= 1000 {\n            result.push_str(\"M\");\n            number -= 1000;\n        } else if number >= 900 {\n            result.push_str(\"CM\");\n            number -= 900;\n        } else if number >= 500 {\n            result.push_str(\"D\");\n            number -= 500;\n        } else if number >= 400 {\n            result.push_str(\"CD\");\n            number -= 400;\n        } else if number >= 100 {\n            result.push_str(\"C\");\n            number -= 100;\n        } else if number >= 90 {\n            result.push_str(\"XC\");\n            number -= 90;\n        } else if number >= 50 {\n            result.push_str(\"L\");\n            number -= 50;\n        } else if number >= 40 {\n            result.push_str(\"XL\");\n            number -= 40;\n        } else if number >= 10 {\n            result.push_str(\"X\");\n            number -= 10;\n        } else if number >= 9 {\n            result.push_str(\"IX\");\n            number -= 9;\n        } else if number >= 5 {\n            result.push_str(\"V\");\n            number -= 5;\n        } else if number >= 4 {\n            result.push_str(\"IV\");\n            number -= 4;\n        } else if number >= 1 {\n            result.push_str(\"I\");\n            number -= 1;\n        }\n        i += 1;\n    }\n    result"}
{"task_id": "HumanEval/157", "completion": "\n    a.pow(2) + b.pow(2) == c.pow(2)"}
{"task_id": "HumanEval/158", "completion": "\n    let mut max_word = String::new();\n    let mut max_len = 0;\n    for word in words {\n        let mut len = 0;\n        for c in word.chars() {\n            if word.chars().filter(|&x| x == c).count() == 1 {\n                len += 1;\n            }\n        }\n        if len > max_len {\n            max_len = len;\n            max_word = word;\n        }\n    }\n    max_word"}
{"task_id": "HumanEval/159", "completion": "\n    let mut result = Vec::new();\n    let mut total = number;\n    if total < need {\n        total = remaining;\n    }\n    result.push(total - need);\n    result.push(remaining - total + need);\n    result"}
{"task_id": "HumanEval/160", "completion": "\n    let mut result = operand[0];\n    for i in 1..operand.len() {\n        match operator[i-1].as_str() {\n            \"+\" => result += operand[i],\n            \"-\" => result -= operand[i],\n            \"*\" => result *= operand[i],\n            \"//\" => result //= operand[i],\n            \"**\" => result = result.pow(operand[i] as u32),\n            _ => panic!(\"Unknown operator\")\n        }\n    }\n    result"}
{"task_id": "HumanEval/161", "completion": "\n    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase() ^ c.to_ascii_lowercase());\n        } else {\n            result.push(c);\n        }\n    }\n    result"}
{"task_id": "HumanEval/162", "completion": "\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher = Md5::new();\n    hasher.input_str(&text);\n    Some(hasher.result_str())"}
{"task_id": "HumanEval/163", "completion": "\n    let mut result = Vec::new();\n    for i in a..b + 1 {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result"}
