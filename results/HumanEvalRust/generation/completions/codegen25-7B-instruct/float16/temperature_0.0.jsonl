{"task_id": "HumanEval/0", "completion": "\n    numbers.len() <= 1 {\n        false\n    } else {\n        numbers.sort_by(|a, b| a.partial_cmp(&b).unwrap()).unwrap();\n        let mut i = 0;\n        let mut j = 1;\n        while j < numbers.len() {\n            if numbers[i] - numbers[j] <= threshold {\n                return true;\n            }\n            if j == numbers.len() - 1 {\n                i += 1;\n                j = i + 1;\n            } else {\n                j += 1;\n            }\n        }\n        false\n    }"}
{"task_id": "HumanEval/1", "completion": "\n    // TODO: Implement me!\n    vec![]"}
{"task_id": "HumanEval/2", "completion": "\n    let mut decimal = number - (number as f64).floor() as f64;\n    while decimal < 1e-10 {\n        decimal *= 10;\n    }\n    decimal"}
{"task_id": "HumanEval/3", "completion": "\n    let mut balance = 0;\n    for op in operations {\n        balance += op;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false"}
{"task_id": "HumanEval/4", "completion": "\n    // Calculate the mean of the input vector\n    let mean = numbers.iter().sum() / numbers.len() as f64;\n\n    // Calculate the absolute differences between each element and the mean\n    let diffs = numbers.iter().map(|x| abs(x - mean)).collect();\n\n    // Calculate the mean of the absolute differences\n    let mean_abs_diff = diffs.iter().sum() / diffs.len() as f64;\n\n    // Return the mean absolute deviation\n    mean_abs_diff"}
{"task_id": "HumanEval/5", "completion": "\n    let mut result = Vec::<isize>::new();\n    let mut iter = numbers.iter().clone();\n    let mut last = None;\n    while let Some(n) = iter.next() {\n        if let None = last {\n            result.push(n);\n        } else {\n            result.extend([last, delimeter, n]);\n        }\n        last = n;\n    }\n    result"}
{"task_id": "HumanEval/6", "completion": "\n    let mut stack: Vec<isize> = Vec::new();\n    let mut max_depth: Vec<isize> = Vec::new();\n    for c in paren_string.chars() {\n        match c {\n            '(' => stack.push(1),\n            ')' => {\n                if stack.len() > max_depth.last_mut().or_default(0) {\n                    max_depth.push(stack.len());\n                }\n                stack.pop();\n            }\n            _ => {\n                // ignore non-parentheses characters\n            }\n        }\n    }\n    max_depth"}
{"task_id": "HumanEval/7", "completion": "\n    strings.into_iter()\n        .filter(|s| s.contains(substring))\n        .into_collect(Vec::<String>::new)"}
{"task_id": "HumanEval/8", "completion": "\n    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    (sum, product)"}
{"task_id": "HumanEval/9", "completion": "\n    let mut max_so_far = vec![numbers[0]];\n    let mut result = vec![numbers[0]];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_so_far[i - 1] {\n            max_so_far.push(numbers[i]);\n        } else {\n            max_so_far.push(max_so_far[i - 1]);\n        }\n        result.push(max_so_far[i]);\n    }\n    result"}
{"task_id": "HumanEval/10", "completion": "\n    if string.len() <= 1 {\n        string\n    } else {\n        let mut suffix = &string[1..];\n        let mut prefix = &string[0..1];\n        while suffix.rev().eq(prefix) && suffix.len() + 1 < string.len() {\n            suffix = &suffix.concat(&string[suffix.len() + 1..])\n            prefix = &prefix.concat(&string[0..prefix.len() - 1])\n        }\n        let mut result = String::new();\n        result.push_str(&string[suffix.len()..]);\n        result.push_str(string[0..suffix.len()].reversed().as_ref());\n        result.push_str(&string[suffix.len()..]);\n        result\n    }"}
{"task_id": "HumanEval/11", "completion": "\n    let mut result = String::new();\n    for (i, j) in a.chars().zip(b.chars()) {\n        if i == j {\n            result.push(i.as_str());\n        } else {\n            result.push(\"1\");\n        }\n    }\n    result"}
{"task_id": "HumanEval/12", "completion": "\n    let mut longest = None;\n    for string in strings {\n        if longest.is_none() || string.len() > longest.as_ref().map<mask_1><sep><mask_1>(|s| s.len()).unwrap() {\n            longest = Some(string);\n        }\n    }\n    longest"}
{"task_id": "HumanEval/13", "completion": "\n    let mut divisor = 1;\n    let mut remainder = 0;\n    while b != 0 {\n        remainder = b;\n        b = a % b;\n        a = remainder;\n    }\n    divisor = a;\n    divisor"}
{"task_id": "HumanEval/14", "completion": "\n    all_prefixes_helper(string, \"\")"}
{"task_id": "HumanEval/15", "completion": "\n    let mut result = String::new();\n    for i in 0..n {\n        result.push_str(\" \".to_string().chars().collect::<Vec<char>>().join(\"\").as_ref().unwrap());\n    }\n    result"}
{"task_id": "HumanEval/16", "completion": "\n    let mut set = HashSet::new();\n    let count = 0;\n    for c in string.chars() {\n        if !set.contains_with_case(c.to_lowercase()) {\n            set.insert(c.to_lowercase());\n            count += 1;\n        }\n    }\n    count as isize"}
{"task_id": "HumanEval/17", "completion": "\n    // TODO: Implement the function\n    vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/18", "completion": "\n    let mut count = 0\n    let len_s = string.len()\n    let len_ss = substring.len()\n    for i in (0..len_s - len_ss).into() {\n        if string[i..(i + len_ss)].equals(&substring) {\n            count += 1\n        }\n    }\n    count"}
{"task_id": "HumanEval/19", "completion": "\n    let mut numbers = numbers.split(\" \").map(String::from).collect::<Vec<&str>>();\n    // Sort the numbers in-place\n    numbers.sort_by(String::cmp);\n    // Convert the sorted vector back to a string\n    numbers.into::<String>().join(\" \")"}
{"task_id": "HumanEval/20", "completion": "\n    assert!(numbers.len() >= 2);\n    let mut min_diff = numbers[0] - numbers[1];\n    let mut min_indices = (0, 1);\n    for i in 0..numbers.len() as u32 {\n        for j in (i + 1)..numbers.len() as u32 {\n            let diff = numbers[i] - numbers[j];\n            if diff < min_diff {\n                min_diff = diff;\n                min_indices = (i, j);\n            }\n        }\n    }\n    (numbers[min_indices[0]], numbers[min_indices[1]])"}
{"task_id": "HumanEval/21", "completion": "\n    let mut scaled = Vec::new();\n    let mut numbers.sort_by(|a, b| a.cmp(&b));\n    let min = numbers[0];\n    let max = numbers[numbers.len() - 1];\n    for number in numbers {\n        let scaled_number = (number - min) / (max - min);\n        scaled.push(scaled_number);\n    }\n    scaled"}
{"task_id": "HumanEval/23", "completion": "\n    string.len() as isize"}
{"task_id": "HumanEval/24", "completion": "\n    let mut divisor = 1;\n    for i in 1..=n {\n        if n % i == 0 {\n            divisor = i;\n        }\n    }\n    divisor"}
{"task_id": "HumanEval/25", "completion": "\n    let mut factors = Vec::new();\n    let mut i = 2;\n    while i * i < n {\n        while n % i == 0 {\n            factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors"}
{"task_id": "HumanEval/26", "completion": "\n    // TODO: Implement\n    vec![<mask_1><sep><mask_1>1, 2, 3, 4]"}
{"task_id": "HumanEval/27", "completion": "\n    string.map(|c| if c.is_ascii_lowercase() { c.to_uppercase() } else { c.to_lowercase() })"}
{"task_id": "HumanEval/28", "completion": "\n    strings.iter().fold(\"\", |acc, string| acc + string)"}
{"task_id": "HumanEval/29", "completion": "\n    strings.into_iter()\n        .filter(|s| s.starts_with(prefix))\n        .into_collector(collectors::ToVector<String>::new())\n        .unwrap()"}
{"task_id": "HumanEval/30", "completion": "\n    l.into_iter()\n        .filter(|n| n > 0)\n        .collect::<Vec<isize>>()"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=(n as isize).sqrt() as isize {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true"}
{"task_id": "HumanEval/33", "completion": "\n    // TODO: Implement this function\n    vec![];"}
{"task_id": "HumanEval/34", "completion": "\n    let mut set = HashSet::new();\n    let mut res = Vec::new();\n    for i in 0..l.len() {\n        if !set.contains(&l[i]) {\n            set.insert(l[i]);\n            res.push(l[i]);\n        }\n    }\n    res"}
{"task_id": "HumanEval/35", "completion": "\n    let mut max = l[0];\n    for &i in l.iter() {\n        if i > max {\n            max = i;\n        }\n    }\n    max"}
{"task_id": "HumanEval/36", "completion": "\n    let mut count = 0;\n    for i in 1..=n {\n        if i % 11 == 0 || i % 13 == 0 {\n            if i % 7 == 0 {\n                count += 1;\n            }\n        }\n    }\n    count"}
{"task_id": "HumanEval/37", "completion": "\n    // TODO: Implement me!\n    vec![];"}
{"task_id": "HumanEval/39", "completion": "\n    let mut a = 2;\n    let mut b = 1;\n    let mut c = 0;\n    let mut count = 1;\n    while count < n {\n        c = a + b;\n        let mut is_prime = true;\n        for i in 2..=(c / 2).into() {\n            if c % i == 0 {\n                is_prime = false;\n                break;\n            }\n        }\n        if is_prime {\n            count += 1;\n        }\n        a = b;\n        b = c;\n    }\n    c"}
{"task_id": "HumanEval/40", "completion": "\n    // check if the vector has less than three elements\n    if l.len() < 3 {\n        return false;\n    }\n    // create a set to store unique elements\n    let mut s = HashSet::new();\n    // iterate over the vector\n    for i in 0..l.len() {\n        // check if the element has already been added to the set\n        if s.contains(&l[i]) {\n            // add the element to the set\n            s.insert(l[i]);\n        } else {\n            // create a second set to store unique elements\n            let mut t = HashSet::new();\n            // iterate over the remaining vector elements\n            for j in i + 1..l.len() {\n                // check if the element has already been added to the set\n                if t.contains(&l[j]) {\n                    // add the element to the set\n                    t.insert(l[j]);\n                } else {\n                    // create a third set to store unique elements\n                    let mut u = HashSet::new();\n                    // iterate over the remaining vector elements\n                    for k in j + 1..l.len() {\n                        // check if the sum of the three elements equals zero\n                        if l[i] + l[j] + l[k] == 0 {\n                            // return true\n                            return true;\n                        }\n                        // add the element to the set\n                        u.insert(l[k]);\n                    }\n                }\n            }\n        }\n    }\n    // return false\n    false"}
{"task_id": "HumanEval/41", "completion": "\n    let mut left_to_right = Vec::new();\n    let mut right_to_left = Vec::new();\n    for i in 0..n {\n        left_to_right.push(i as f64);\n        right_to_left.push(i as f64);\n    }\n    let mut speed = 1.0;\n    let mut collisions = 0;\n    while !left_to_right.is_empty() && !right_to_left.is_empty() {\n        let left = left_to_right.pop();\n        let right = right_to_left.pop();\n        if left < right {\n            collisions += 1;\n            let delta_x = right - left;\n            let delta_v = speed * (delta_x / n as f64);\n            speed += delta_v;\n        }\n    }\n    collisions"}
{"task_id": "HumanEval/42", "completion": "\n    let mut result = Vec::new();\n    for num in l {\n        result.push(num + 1);\n    }\n    result"}
{"task_id": "HumanEval/43", "completion": "\n    if l.len() < 2 {\n        return false;\n    }\n    for i in 0..l.len()-1 {\n        let i_val = l[i];\n        for j in (i+1)..l.len() {\n            if i_val + l[j] == 0 {\n                return true;\n            }\n        }\n    }\n    false"}
{"task_id": "HumanEval/44", "completion": "\n    let mut result = String::new();\n    let mut temp = x;\n    while temp >= base {\n        let rem = temp / base;\n        let rem = rem as isize;\n        result.push(rem as char);\n        temp = temp - rem * base;\n    }\n    result.push(temp as char);\n    result.reverse();\n    result"}
{"task_id": "HumanEval/45", "completion": "\n    (a * h) / 2.0"}
{"task_id": "HumanEval/46", "completion": "\n    if n < 0 {\n        return 0 // invalid input\n    } else if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }"}
{"task_id": "HumanEval/47", "completion": "\n    let mut n = l.len() as usize;\n    let mut lvec = l;\n    lvec.sort();\n    let mut m = (n / 2) as usize;\n    if n % 2 == 0 {\n        let median = (lvec[m] + lvec[m - 1]) as f64 / 2.0;\n    } else {\n        median = lvec[m] as f64;\n    }\n    median"}
{"task_id": "HumanEval/48", "completion": "\n    let text_case = text.to_lowercase();\n    let mut chars = text_case.chars().collect::<Vec<char>>();\n    while let Some(char) = chars.pop() {\n        let char_lower = char.to_lowercase();\n        let char_upper = char.to_uppercase();\n        if let Some(other_char) = chars.pop() {\n            if other_char != char_lower {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    }\n    true"}
{"task_id": "HumanEval/49", "completion": "\n    (n + (p / 2)) % p"}
{"task_id": "HumanEval/51", "completion": "\n    text.chars().filter(|c| !VOWELS.contains(c)).collect::<String>()"}
{"task_id": "HumanEval/52", "completion": "\n    for i in 0..<l.len() {\n        if l[i] >= t {\n            return false;\n        }\n    }\n    return true;"}
{"task_id": "HumanEval/53", "completion": "\n    x + y"}
{"task_id": "HumanEval/54", "completion": "\n    let s0_set = s0.chars().map(|c| c.to_uppercase()).collect::<HashSet<char>>();\n    let s1_set = s1.chars().map(|c| c.to_uppercase()).collect::<HashSet<char>>();\n    s0_set == s1_set"}
{"task_id": "HumanEval/55", "completion": "\n    if n < 2 {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);"}
{"task_id": "HumanEval/56", "completion": "\n    let mut count = 0;\n    for c in brackets.chars() {\n        if c == '<' {\n            count += 1;\n        } else if c == '>' {\n            if count <= 0 {\n                return false;\n            }\n            count -= 1;\n        }\n    }\n    count == 0"}
{"task_id": "HumanEval/57", "completion": "\n    let mut increasing = true;\n    let mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] < l[i - 1] {\n            increasing = false;\n        } else if l[i] > l[i - 1] {\n            decreasing = false;\n        }\n    }\n    increasing || decreasing"}
{"task_id": "HumanEval/58", "completion": "\n    let mut set1 = HashSet::new();\n    let mut set2 = HashSet::new();\n    for i in l1.iter() {\n        set1.insert(i);\n    }\n    for i in l2.iter() {\n        set2.insert(i);\n    }\n    let res = set1.intersection(set2);\n    res.into_iter().map(|i| i).collect()"}
{"task_id": "HumanEval/59", "completion": "\n    let mut i = 2;\n    let mut limit = isqrt(n);\n    while i <= limit {\n        if n % i == 0 {\n            let divisor = largest_prime_factor(i);\n            if divisor > i {\n                return divisor as isize;\n            }\n            n /= i;\n            limit = isqrt(n);\n            i = 2;\n        } else {\n            i += 1;\n        }\n    }\n    n as isize"}
{"task_id": "HumanEval/60", "completion": "\n    (1..=n).into_iter().fold(0, |a, b| a + b)"}
{"task_id": "HumanEval/61", "completion": "\n    let mut stack: Vec<char> = Vec::new();\n    for c in brackets.chars() {\n        match c {\n            '(' => stack.push('('),\n            ')' => {\n                if stack.is_empty() || stack.pop() != '(', {\n                    return false;\n                }\n            }\n            _ => {/* ignore other characters */}\n        }\n    }\n    stack.is_empty()"}
{"task_id": "HumanEval/62", "completion": "\n    let n = xs.len();\n    let mut result = Vec::new();\n    for i in 0..n {\n        let mut prod = 1;\n        for j in i+1..n {\n            prod *= j;\n        }\n        result.push(prod);\n    }\n    result"}
{"task_id": "HumanEval/63", "completion": "\n    if n < 3 {\n        return n as isize;\n    }\n    let mut fib = [0; n];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 1;\n    for i in 3..=n {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n    }\n    return fib[n-1]"}
{"task_id": "HumanEval/64", "completion": "\n    let mut vowels_count: isize = 0;\n    for c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            vowels_count += 1;\n        } else if c == 'y' && s.len() > 1 && s[s.len() - 2] == 'y' {\n            vowels_count += 1;\n        }\n    }\n    vowels_count"}
{"task_id": "HumanEval/65", "completion": "\n    let mut digits = vec![];\n    while x > 0 {\n        let digit = x % 10;\n        x /= 10;\n        digits.push(digit as char);\n    }\n    if shift > digits.len() {\n        digits.reverse();\n        return digits.into();\n    }\n    let mut shifted = vec![];\n    for i in digits.iter().chain(iter::Repeat(&digits[0])) {\n        shifted.push(i);\n    }\n    shifted.reverse();\n    shifted.into()"}
{"task_id": "HumanEval/66", "completion": "\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            sum += c.as_uchar() - 'A' + 1;\n        } else if c.is_lowercase() {\n            sum += c.as_uchar() - 'a' + 1;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/67", "completion": "\n    // your code here"}
{"task_id": "HumanEval/68", "completion": "\n    // your code here"}
{"task_id": "HumanEval/69", "completion": "\n    let mut max_freq = 0;\n    let mut max_val = -1;\n    for val in lst {\n        let freq = match lst.count(val) {\n            0 => 0,\n            n => n,\n        };\n        if freq > max_freq {\n            max_freq = freq;\n            max_val = val;\n        }\n    }\n    if max_val > 0 {\n        max_val as isize\n    } else {\n        -1\n    }"}
{"task_id": "HumanEval/70", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/71", "completion": "\n    let mut area = 0.0;\n    if a + b > c && a + c > b && b + c > a {\n        // Calculate the semi-perimeter\n        let s = (a + b + c) / 2.0;\n        // Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    } else {\n        area = -1.0;\n    }\n    area"}
{"task_id": "HumanEval/72", "completion": "\n    let s = q.into_iter().sum();\n    let is_palindromic = q.len() % 2 == 1 && q.slice(q.len() / 2, q.len() / 2 + 1).all(|&x, &y| x == y);\n    s <= w && is_palindromic"}
{"task_id": "HumanEval/73", "completion": "\n    let n = arr.len();\n    let mut dp = vec![0; n];\n    for i in 0..n {\n        dp[i] = 1;\n        for j in (0..i).reversed() {\n            if arr[i] == arr[j] && (i - j < 2 || dp[j + 1] < dp[i - 1]) {\n                dp[i] = dp[j] + 1;\n            }\n        }\n    }\n    dp[n - 1]"}
{"task_id": "HumanEval/74", "completion": "\n    // your code here"}
{"task_id": "HumanEval/75", "completion": "\n    let mut is_prime = true;\n    let mut prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29];\n    if a < 2 {\n        return false;\n    }\n    for i in 0..prime_list.len() {\n        if a % prime_list[i] == 0 {\n            is_prime = false;\n        }\n    }\n    if is_prime && a > 100 {\n        return true;\n    } else {\n        return false;\n    }"}
{"task_id": "HumanEval/76", "completion": "\n    x == n || x == 1 || (n > 1 && x != -1 && (x as f64).log(n) == (x as f64).log(n) % 1.0)"}
{"task_id": "HumanEval/77", "completion": "\n    let cube = a * a * a;\n    if cube == a {\n        return true;\n    } else {\n        return false;\n    }"}
{"task_id": "HumanEval/78", "completion": "\n    let mut count = 0;\n    let mut digits = num.chars().map(|c| c.to_uppercase() - '0' as u8).collect::<Vec<u8>>();\n    for i in 0..digits.len() {\n        let digit = digits[i] as u8;\n        if is_prime(digit) {\n            count += 1;\n        }\n    }\n    count as isize"}
{"task_id": "HumanEval/79", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/80", "completion": "\n    let mut visited = HashSet::new();\n    let mut stack = vec![(s, 0)];\n    while !stack.is_empty() {\n        let (string, count) = stack.pop().unwrap();\n        if count > s.len() / 3 {\n            return false;\n        }\n        if string.len() < 3 {\n            return false;\n        }\n        if visited.contains(&string) {\n            return false;\n        }\n        visited.insert(string);\n        for i in 1..string.len() {\n            let substr = &string[i..i + 2];\n            stack.push((substr, count + 1));\n        }\n    }\n    true"}
{"task_id": "HumanEval/81", "completion": "\n    vec!()"}
{"task_id": "HumanEval/82", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/83", "completion": "\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    let mut count = 0\n    for i in 1..=9 {\n        count += starts_one_ends(n-1) * digit_count(i, n)\n    }\n    count"}
{"task_id": "HumanEval/84", "completion": "\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0 {\n        let digit = (n / 2) % 2;\n        result.push(digit.to_string());\n        n /= 2;\n    }\n    result.reverse();\n    result"}
{"task_id": "HumanEval/85", "completion": "\n    let mut sum = 0;\n    for (i, num) in lst.enumerate() {\n        if i % 2 == 1 && num % 2 == 0 {\n            sum += num;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/86", "completion": "\n    // your code here"}
{"task_id": "HumanEval/87", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/88", "completion": "\n    // your code here"}
{"task_id": "HumanEval/89", "completion": "\n    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_letter() {\n            let shifted = (c.to_uppercase() as u8 as i32 - 97 + 26*2) % 26 + 97;\n            result.push_char(shifted.to_char());\n        } else {\n            result.push_char(c);\n        }\n    }\n    result"}
{"task_id": "HumanEval/90", "completion": "\n    // your code here"}
{"task_id": "HumanEval/91", "completion": "\n    let mut count = 0;\n    let mut sentence_started = false;\n    for c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n            if sentence_started && c.is_uppercase() {\n                count += 1;\n            }\n            sentence_started = false;\n        } else {\n            sentence_started = true;\n        }\n    }\n    if sentence_started {\n        count += 1;\n    }\n    count"}
{"task_id": "HumanEval/92", "completion": "\n    if x == y + z || y == x + z || z == x + y {\n        return true;\n    } else {\n        return false;\n    }"}
{"task_id": "HumanEval/93", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/94", "completion": "\n    // TODO: write your solution here"}
{"task_id": "HumanEval/95", "completion": "\n    if dict.is_empty() {\n        return false;\n    }\n\n    let mut lower_case = 0;\n    let mut upper_case = 0;\n\n    for (key, value) in dict.iter() {\n        if key.chars().any(|c| c.is_ascii_lowercase()) {\n            lower_case += 1;\n        } else if key.chars().any(|c| c.is_ascii_uppercase()) {\n            upper_case += 1;\n        } else {\n            return false;\n        }\n\n        if value.chars().any(|c| c.is_ascii_lowercase()) {\n            lower_case += 1;\n        } else if value.chars().any(|c| c.is_ascii_uppercase()) {\n            upper_case += 1;\n        } else {\n            return false;\n        }\n    }\n\n    lower_case > 0 && lower_case == upper_case"}
{"task_id": "HumanEval/96", "completion": "\n    n.to_isize().map(|n| count_up_to_n(n).map(|vec| vec.into_iter().map(|i| i as isize).collect())).unwrap_or(Vec::new())"}
{"task_id": "HumanEval/97", "completion": "\n    let a_units = (a % 10).abs() as isize;\n    let b_units = (b % 10).abs() as isize;\n    a_units * b_units"}
{"task_id": "HumanEval/98", "completion": "\n    let mut count = 0;\n    for c in s.chars() {\n        if c.is_uppercase() && (count % 2) == 0 {\n            count += 1;\n        }\n    }\n    count as isize"}
{"task_id": "HumanEval/99", "completion": "\n    let mut value_f64 = value.trim().parse::<f64>().unwrap();\n    let int_value = value_f64.round_to_zero::<isize>();\n    if (value_f64 - (int_value as f64)).abs() < 0.5 {\n        int_value\n    } else if int_value > 0 {\n        int_value + 1\n    } else {\n        int_value - 1\n    }"}
{"task_id": "HumanEval/100", "completion": "\n    let mut result = vec!();\n    let mut level = n;\n    result.push(level);\n    while level > 1 {\n        if level % 2 == 0 {\n            level = level / 2;\n        } else {\n            level = level * 3 + 1;\n        }\n        result.push(level as isize);\n    }\n    result"}
{"task_id": "HumanEval/101", "completion": "\n    // your code here"}
{"task_id": "HumanEval/102", "completion": "\n    // write your code here"}
{"task_id": "HumanEval/104", "completion": "\n    let mut result = Vec::<isize>::new();\n    for num in x {\n        let digits = num.to_string().chars().map(|c| c.to_uppercase() - 'A' + 1).collect::<Vec<usize>>();\n        if digits.iter().any(|&digit| digit % 2 == 0) {\n            result.push(num);\n        }\n    }\n    result.sort();\n    result"}
{"task_id": "HumanEval/105", "completion": "\n    let mut result = Vec::<String>::new();\n    for num in arr {\n        if num >= 1 && num <= 9 {\n            result.push(num_to_name(num).as_owned());\n        }\n    }\n    result.reverse();\n    result"}
{"task_id": "HumanEval/106", "completion": "\n    vec![1, ..., n.into_iter().map(|i| if i % 2 == 0 { i.powi(i) } else { (1..=i).sum() }).collect()]"}
{"task_id": "HumanEval/107", "completion": "\n    // write your code here"}
{"task_id": "HumanEval/108", "completion": "\n    arr.iter().sum::<isize>().map(|x| x > 0).sum()"}
{"task_id": "HumanEval/109", "completion": "\n    // Write your code here"}
{"task_id": "HumanEval/110", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/111", "completion": "\n    let mut map: HashMap<String, isize> = HashMap::new();\n    for c in test.chars() {\n        let count = map.get_or_insert(c, 0) + 1;\n        map.insert(c, count);\n    }\n    let mut result: HashMap<String, isize> = HashMap::new();\n    for (c, count) in map {\n        result.insert(c, count);\n    }\n    result"}
{"task_id": "HumanEval/112", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/113", "completion": "\n    lst.map(|s| String::from(format!(\"the number of odd elements {}n the str{}ng {} of the {}nput.\", s.chars().filter(|c| c.is_numeric() && c.is_ascii_digit() && c.to_i() % 2 == 1).len(), s.chars().filter(|c| c.is_ascii() && c.is_ascii_letter() && c.to_ascii_lowercase() == 'g').len(), s.chars().filter(|c| c.is_numeric() && c.is_ascii_digit() && c.to_i() % 2 == 1).len(), s.chars().filter(|c| c.is_ascii() && c.is_ascii_letter() && c.to_ascii_lowercase() == 'n').len()))"}
{"task_id": "HumanEval/114", "completion": "\n    let mut sum = 0;\n    let mut min_sum = nums[0];\n    for num in nums {\n        sum += num;\n        if sum < min_sum {\n            min_sum = sum;\n        }\n        if sum == 0 {\n            sum = num;\n        }\n    }\n    min_sum"}
{"task_id": "HumanEval/115", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/116", "completion": "\n    // your code here"}
{"task_id": "HumanEval/117", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/118", "completion": "\n    let mut result = String::new();\n    let mut i = word.len() - 1;\n    while i >= 0 && !is_consonant(&word[i]) {\n        i -= 1;\n    }\n    for j in i..word.len() {\n        if is_vowel(&word[j]) {\n            result = word[j].to_string();\n            break;\n        }\n    }\n    for j in 0..i {\n        if is_vowel(&word[j]) {\n            result = word[j].to_string();\n            break;\n        }\n    }\n    result"}
{"task_id": "HumanEval/119", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/120", "completion": "\n    // your code here"}
{"task_id": "HumanEval/121", "completion": "\n    let mut sum = 0;\n    for (i, val) in lst.enumerate() {\n        if i % 2 == 1 && (i / 2) % 2 == 0 {\n            sum += val as isize;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/122", "completion": "\n    let mut sum = 0;\n    for i in 0..k {\n        if arr[i] % 100 < 10 {\n            sum += arr[i] % 10;\n        } else if arr[i] % 100 < 100 {\n            sum += arr[i] % 100 - (arr[i] % 100 / 100);\n        }\n    }\n    sum"}
{"task_id": "HumanEval/123", "completion": "\n    let mut vec = Vec::new();\n    while n != 1 {\n        if n % 2 == 0 {\n            n /= 2;\n        } else {\n            n = n * 3 + 1;\n        }\n        if n % 2 == 1 {\n            vec.push(n as isize);\n        }\n    }\n    vec.push(1);\n    vec.sort();\n    vec"}
{"task_id": "HumanEval/124", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/126", "completion": "\n    let mut duplicates = HashSet::new();\n    let mut sorted = lst.clone();\n    sorted.sort_by(|a, b| a.cmp(&b));\n    for i in 0..lst.len() - 1 {\n        if lst[i] == lst[i + 1] {\n            duplicates.insert(lst[i]);\n        }\n    }\n    if duplicates.len() > 0 {\n        return false;\n    }\n    for i in 0..sorted.len() - 1 {\n        if sorted[i] == sorted[i + 1] {\n            return false;\n        }\n    }\n    true"}
{"task_id": "HumanEval/127", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/128", "completion": "\n    // your code here"}
{"task_id": "HumanEval/129", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/130", "completion": "\n    let mut vec = vec![];\n    for i in 0..n {\n        if i % 2 == 0 {\n            vec.push(i / 2);\n        } else {\n            let mut num = i - 1;\n            let mut sum = i - 2;\n            while num > 0 {\n                let temp = sum;\n                sum += num;\n                num = temp;\n            }\n            vec.push(sum);\n        }\n    }\n    vec.push(3);\n    vec"}
{"task_id": "HumanEval/131", "completion": "\n    let mut product = 1;\n    let str_n = n.to_string();\n    for char in str_n.chars() {\n        if char.is_digit() {\n            let digit = char.as_u32() - '0' as isize;\n            if digit % 2 != 0 {\n                product *= digit;\n            }\n        }\n    }\n    if str_n.len() == str_n.digits().sum() {\n        0\n    } else {\n        product\n    }"}
{"task_id": "HumanEval/132", "completion": "\n    let mut stack: Vec<char> = Vec::new();\n    for c in string.chars() {\n        match c {\n            '[' => stack.push(c),\n            ']' => {\n                let top = stack.pop();\n                if top != '['.as_char() {\n                    return false;\n                }\n            }\n        }\n    }\n    stack.is_empty()"}
{"task_id": "HumanEval/133", "completion": "\n    let mut sum = 0;\n    for num in lst {\n        sum += (num.as_derefable::<f64>() as f64).round_to_even() as isize;\n    }\n    sum * sum as isize"}
{"task_id": "HumanEval/134", "completion": "\n    let last_char = txt.chars().last().unwrap();\n    let is_letter = last_char.is_letter();\n    let is_not_word = !txt.split_whitespace().last().is_none();\n    is_letter && is_not_word"}
{"task_id": "HumanEval/135", "completion": "\n    for (i, a) in arr.enumerate() {\n        if a >= arr[i - 1] {\n            return i - 1;\n        }\n    }\n    -1"}
{"task_id": "HumanEval/136", "completion": "\n    let mut a: Option<isize> = None;\n    let mut b: Option<isize> = None;\n    for i in 0..lst.len() {\n        let item = lst[i];\n        if a.is_none() || item < 0 && item < a {\n            a = item;\n        } else if b.is_none() || item > 0 && item < b {\n            b = item;\n        }\n    }\n    if a.is_none() && b.is_none() {\n        (None, None)\n    } else {\n        (a, b)\n    }"}
{"task_id": "HumanEval/138", "completion": "\n    let mut even_sum = 0;\n    for i in 1..=n {\n        if i % 2 == 0 {\n            even_sum += i;\n        }\n    }\n    even_sum == n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 0 {\n        1\n    } else {\n        n * special_factorial(n - 1)\n    }"}
{"task_id": "HumanEval/140", "completion": "\n    let mut result = String::new();\n    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n            if spaces > 2 {\n                result.push_str(\"-\");\n                spaces = 0;\n            }\n        } else {\n            result.push_char(c);\n            spaces = 0;\n        }\n    }\n    result.replace_all(\"_\", \" \");\n    result"}
{"task_id": "HumanEval/141", "completion": "\n    let mut has_one_digit = false;\n    let mut has_dot = false;\n    let mut has_valid_extension = false;\n    let mut has_valid_first_letter = false;\n    \n    for c in file_name.chars() {\n        match c {\n            '0'...'9' => has_one_digit = true,\n            '.' => has_dot = true,\n            'a'...'z' | 'A'...'Z' => has_valid_first_letter = true,\n            _ => {},\n        }\n    }\n    \n    if has_one_digit && has_dot && has_valid_first_letter && file_name.contains(\"example\") {\n        if file_name.ends_with(\".txt\") || file_name.ends_with(\".exe\") || file_name.ends_with(\".dll\") {\n            return String::from(\"Yes\");\n        } else {\n            return String::from(\"No\");\n        }\n    } else {\n        return String::from(\"No\");\n    }"}
{"task_id": "HumanEval/142", "completion": "\n    let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 3 == 0 {\n            if i % 4 == 0 {\n                sum += lst[i] * lst[i] * lst[i] * lst[i];\n            } else {\n                sum += lst[i] * lst[i];\n            }\n        } else if i % 4 == 0 {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    sum"}
{"task_id": "HumanEval/143", "completion": "\n    // write your code here"}
{"task_id": "HumanEval/144", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/145", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/146", "completion": "\n   // your code here"}
{"task_id": "HumanEval/147", "completion": "\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n            for k in j+1..n {\n                if i + j + k % 3 == 0 {\n                    count += 1;\n                }\n            }\n        }\n    }\n    count"}
{"task_id": "HumanEval/149", "completion": "\n    // your code here"}
{"task_id": "HumanEval/150", "completion": "\n    // TODO: Implement the function"}
{"task_id": "HumanEval/151", "completion": "\n    let mut sum = 0;\n    for num in lst {\n        if num.is_integer() && num as f64 % 2 != 0 {\n            sum += (num as f64) as isize;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/152", "completion": "\n    game.iter().zip(guess.iter()).map(|&(g1, g2), &(s1, s2)| if g1 == s1 { 0 } else g1 - s1).collect()"}
{"task_id": "HumanEval/153", "completion": "\n    // write your code here"}
{"task_id": "HumanEval/154", "completion": "\n    let a_len = a.len();\n    let b_len = b.len();\n    if a_len < b_len {\n        return false;\n    }\n    for i in 0..a_len - b_len + 1 {\n        let sub = &a[i..i + b_len];\n        if sub == b {\n            return true;\n        }\n    }\n    false"}
{"task_id": "HumanEval/155", "completion": "\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut abs_num = abs(num);\n    while abs_num != 0 {\n        let last_digit = abs_num % 10;\n        abs_num /= 10;\n        if last_digit % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n    (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "\n    let mut roman = String::new();\n    let mut prev = 0;\n    // iterate through each digit in the number\n    for digit in number.abs().to_string().chars().rev() {\n        let digit: char = digit;\n        let digit_val: i32 = digit.to_i32() - '0';\n        // check if the digit is greater than the previous digit\n        if digit_val > prev {\n            // check if the digit is 5 or 50\n            if digit_val == 5 {\n                roman.push_str(\"l\");\n            } else if digit_val == 50 {\n                roman.push_str(\"l\");\n                roman.push_str(\"x\");\n            } else if digit_val == 90 {\n                roman.push_str(\"xc\");\n            } else {\n                // if not, add the appropriate prefix\n                if digit_val > 5 {\n                    roman.push_str(\"l\");\n                }\n                roman.push_str(digit);\n                // subtract the prefix from the digit value\n                digit_val -= (digit_val % 10);\n            }\n        } else {\n            // if not, add the digit\n            roman.push_str(digit);\n        }\n        // set the previous digit\n        prev = digit_val;\n    }\n    // check if the number is negative\n    if number < 0 {\n        roman.insert_str(0, \"-\");\n    }\n    // return the roman numeral\n    roman"}
{"task_id": "HumanEval/157", "completion": "\n    let mut found = false;\n    if a == b || b == c || a == c {\n        found = true;\n    }\n    found"}
{"task_id": "HumanEval/158", "completion": "\n    let mut max_word = String::from(\"\");\n    let mut max_unique = 0;\n    words.sort();\n    for word in words {\n        let unique = word.chars().into_iter().collect::<HashSet<char>>().len();\n        if unique > max_unique {\n            max_word = word;\n            max_unique = unique;\n        }\n    }\n    max_word"}
{"task_id": "HumanEval/159", "completion": "\n    let eaten = if number + need > remaining {\n        remaining\n    } else {\n        number + need\n    }\n    let left = if number + need > remaining {\n        remaining\n    } else {\n        number + need - remaining\n    }\n    vec![eaten, left]"}
{"task_id": "HumanEval/160", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/161", "completion": "\n    // your code here"}
{"task_id": "HumanEval/162", "completion": "\n    if text.is_empty() {\n        return None;\n    }\n    use std::io::Bytes;\n    let mut md5 = [0; 16];\n    let mut n = text.len();\n    let mut i = 0;\n    let mut block;\n    unsafe {\n        block = text.to_bytes();\n        while i < n {\n            if n - i <= 60 {\n                block[60 as isize] = 0x3f;\n                n = n - 60;\n                i = i + 60;\n            } else {\n                block[n as isize] = 0x3f;\n                n = n - 1;\n                i = i + 1;\n            }\n        }\n        block[..n].copy_from(&text[..n]);\n    }\n    hash_func(&block[..n], &mut md5[..n]);\n    Some(String::from_utf8_lossy(md5))"}
{"task_id": "HumanEval/163", "completion": "\n    // implementation here"}
