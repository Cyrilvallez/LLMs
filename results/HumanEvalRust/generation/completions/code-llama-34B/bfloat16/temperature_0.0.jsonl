{"task_id": "HumanEval/0", "completion": "\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len() {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n                return true;\n            }\n        }\n    }\n    false"}
{"task_id": "HumanEval/1", "completion": "\n    let mut result = Vec::new();\n    let mut current_group = String::new();\n    let mut open_parens = 0;\n    for c in paren_string.chars() {\n        if c == '(' {\n            open_parens += 1;\n        } else if c == ')' {\n            open_parens -= 1;\n        }\n        current_group.push(c);\n        if open_parens == 0 {\n            result.push(current_group);\n            current_group = String::new();\n        }\n    }\n    result"}
{"task_id": "HumanEval/2", "completion": "\n    number - number.floor()"}
{"task_id": "HumanEval/3", "completion": "\n    let mut balance = 0;\n    for operation in operations {\n        balance += operation;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false"}
{"task_id": "HumanEval/4", "completion": "\n    let mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n    let mut mad = 0.0;\n    for &number in &numbers {\n        mad += (number - mean).abs();\n    }\n    mad / numbers.len() as f64"}
{"task_id": "HumanEval/5", "completion": "\n    let mut result = Vec::new();\n    for (i, &number) in numbers.iter().enumerate() {\n        if i > 0 {\n            result.push(delimeter);\n        }\n        result.push(number);\n    }\n    result"}
{"task_id": "HumanEval/6", "completion": "\n    let mut paren_vec: Vec<isize> = Vec::new();\n    let mut paren_stack: Vec<char> = Vec::new();\n    let mut max_level: isize = 0;\n    let mut current_level: isize = 0;\n    for c in paren_string.chars() {\n        match c {\n            '(' => {\n                paren_stack.push(c);\n                current_level += 1;\n                if current_level > max_level {\n                    max_level = current_level;\n                }\n            }\n            ')' => {\n                paren_stack.pop();\n                current_level -= 1;\n            }\n            ' ' => {\n                paren_vec.push(max_level);\n                max_level = 0;\n            }\n            _ => {}\n        }\n    }\n    paren_vec"}
{"task_id": "HumanEval/7", "completion": "\n    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .collect()"}
{"task_id": "HumanEval/8", "completion": "\n    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    (sum, product)"}
{"task_id": "HumanEval/9", "completion": "\n    let mut max = numbers[0];\n    let mut result = vec![max];\n    for i in 1..numbers.len() {\n        if numbers[i] > max {\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    result"}
{"task_id": "HumanEval/10", "completion": "\n    let mut string = string;\n    let mut reversed = string.chars().rev().collect::<String>();\n    let mut i = 0;\n    while i < string.len() {\n        if string[i..] == reversed[..string.len() - i] {\n            break;\n        }\n        i += 1;\n    }\n    string.push_str(&reversed[..string.len() - i]);\n    string"}
{"task_id": "HumanEval/11", "completion": "\n    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result"}
{"task_id": "HumanEval/12", "completion": "\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest = &strings[0];\n\n    for string in &strings {\n        if string.len() > longest.len() {\n            longest = string;\n        }\n    }\n\n    Some(longest.to_string())"}
{"task_id": "HumanEval/13", "completion": "\n    let mut a = a;\n    let mut b = b;\n    while b != 0 {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    a"}
{"task_id": "HumanEval/14", "completion": "\n    let mut prefixes = Vec::new();\n    for i in 1..=string.len() {\n        prefixes.push(string[0..i].to_string());\n    }\n    prefixes"}
{"task_id": "HumanEval/15", "completion": "\n    (0..=n).map(|i| i.to_string()).collect::<Vec<String>>().join(\" \")"}
{"task_id": "HumanEval/16", "completion": "\n    let mut set = std::collections::HashSet::new();\n    for c in string.chars() {\n        set.insert(c.to_ascii_lowercase());\n    }\n    set.len() as isize"}
{"task_id": "HumanEval/17", "completion": "\n    let mut result = Vec::new();\n    for c in music_string.chars() {\n        match c {\n            'o' => result.push(4),\n            '|' => result.push(2),\n            '.' => result.push(1),\n            _ => {}\n        }\n    }\n    result"}
{"task_id": "HumanEval/18", "completion": "\n    let mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n        if string[index..].starts_with(&substring) {\n            count += 1;\n            index += substring.len();\n        } else {\n            index += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/19", "completion": "\n    let mut nums: Vec<&str> = numbers.split(' ').collect();\n    nums.sort_by(|a, b| {\n        let a_num = match a {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ => 10,\n        };\n        let b_num = match b {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ => 10,\n        };\n        a_num.cmp(&b_num)\n    });\n    nums.join(\" \")"}
{"task_id": "HumanEval/20", "completion": "\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    let mut min_diff = f64::MAX;\n    let mut min_diff_index = 0;\n    for i in 0..numbers.len() - 1 {\n        let diff = numbers[i + 1] - numbers[i];\n        if diff < min_diff {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n    }\n    (numbers[min_diff_index], numbers[min_diff_index + 1])"}
{"task_id": "HumanEval/21", "completion": "\n    let min = numbers.iter().min_by(|a, b| a.partial_cmp(b).unwrap()).unwrap();\n    let max = numbers.iter().max_by(|a, b| a.partial_cmp(b).unwrap()).unwrap();\n    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()"}
{"task_id": "HumanEval/23", "completion": "\n    string.len() as isize"}
{"task_id": "HumanEval/24", "completion": "\n    let mut largest = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest = i;\n        }\n    }\n    largest"}
{"task_id": "HumanEval/25", "completion": "\n    let mut factors = Vec::new();\n    let mut n = n;\n    let mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n            n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n    factors"}
{"task_id": "HumanEval/26", "completion": "\n    let mut result = Vec::new();\n    for number in numbers {\n        if !result.contains(&number) {\n            result.push(number);\n        }\n    }\n    result"}
{"task_id": "HumanEval/27", "completion": "\n    let mut flipped = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n        } else if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n        } else {\n            flipped.push(c);\n        }\n    }\n    flipped"}
{"task_id": "HumanEval/28", "completion": "\n    let mut result = String::new();\n    for s in strings {\n        result.push_str(&s);\n    }\n    result"}
{"task_id": "HumanEval/29", "completion": "\n    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()"}
{"task_id": "HumanEval/30", "completion": "\n    l.into_iter().filter(|x| *x > 0).collect()"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1 {\n        return false;\n    }\n    if n == 2 {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n    }\n    let mut i = 3;\n    while i * i <= n {\n        if n % i == 0 {\n            return false;\n        }\n        i += 2;\n    }\n    true"}
{"task_id": "HumanEval/33", "completion": "\n    let mut l_prime = l.clone();\n    let mut third_indicies = vec![];\n    for i in 0..l.len() {\n        if i % 3 == 0 {\n            third_indicies.push(i);\n        }\n    }\n    for i in third_indicies {\n        let mut third_indicies_values = vec![];\n        for j in 0..l.len() {\n            if j % 3 == 0 {\n                third_indicies_values.push(l[j]);\n            }\n        }\n        third_indicies_values.sort();\n        l_prime[i] = third_indicies_values[i / 3];\n    }\n    l_prime"}
{"task_id": "HumanEval/34", "completion": "\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l"}
{"task_id": "HumanEval/35", "completion": "\n    let mut max = l[0];\n    for i in l {\n        if i > max {\n            max = i;\n        }\n    }\n    max"}
{"task_id": "HumanEval/36", "completion": "\n    let mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let mut j = i;\n            while j > 0 {\n                if j % 10 == 7 {\n                    count += 1;\n                    break;\n                }\n                j /= 10;\n            }\n        }\n    }\n    count"}
{"task_id": "HumanEval/37", "completion": "\n    let mut l_even = l.clone();\n    l_even.sort();\n    l.iter()\n        .enumerate()\n        .map(|(i, x)| if i % 2 == 0 { *x } else { l_even[i / 2] })\n        .collect()"}
{"task_id": "HumanEval/39", "completion": "\n    let mut a = 0;\n    let mut b = 1;\n    let mut c = 1;\n    let mut i = 1;\n    while i < n {\n        let d = a + b;\n        if d.is_prime() {\n            i += 1;\n        }\n        a = b;\n        b = d;\n        c = d;\n    }\n    c"}
{"task_id": "HumanEval/40", "completion": "\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j {\n        let k = l.binary_search(&(-l[i] - l[j])).unwrap_or_else(|x| x);\n        if k < j && k > i {\n            return true;\n        }\n        if -l[i] - l[j] < 0 {\n            j -= 1;\n        } else {\n            i += 1;\n        }\n    }\n    false"}
{"task_id": "HumanEval/41", "completion": "\n    let mut collisions = 0;\n    for i in 0..n {\n        for j in 0..n {\n            if i + j == n - 1 {\n                collisions += 1;\n            }\n        }\n    }\n    collisions"}
{"task_id": "HumanEval/42", "completion": "\n    l.iter().map(|&x| x + 1).collect()"}
{"task_id": "HumanEval/43", "completion": "\n    let mut set = std::collections::HashSet::new();\n    for i in l {\n        if set.contains(&i) {\n            return true;\n        }\n        set.insert(-i);\n    }\n    false"}
{"task_id": "HumanEval/44", "completion": "\n    let mut result = String::new();\n    let mut x = x;\n    let mut base = base;\n    while x > 0 {\n        result.push((b'0' + (x % base) as u8) as char);\n        x /= base;\n    }\n    result.chars().rev().collect()"}
{"task_id": "HumanEval/45", "completion": "\n    (a * h) as f64 / 2.0"}
{"task_id": "HumanEval/46", "completion": "\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let mut i = 2;\n    while i < n {\n        let e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n        i += 1;\n    }\n    a + b + c + d"}
{"task_id": "HumanEval/47", "completion": "\n    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2 - 1] + l[n / 2]) as f64 / 2.0\n    } else {\n        l[n / 2] as f64\n    }"}
{"task_id": "HumanEval/48", "completion": "\n    let mut i = 0;\n    let mut j = text.len() - 1;\n    let mut result = true;\n\n    while i < j {\n        if text.chars().nth(i).unwrap() != text.chars().nth(j).unwrap() {\n            result = false;\n            break;\n        }\n        i += 1;\n        j -= 1;\n    }\n\n    result"}
{"task_id": "HumanEval/49", "completion": "\n    let mut n = n;\n    let mut p = p;\n    if n < 0 {\n        n = -n;\n    }\n    if p < 0 {\n        p = -p;\n    }\n    let mut r = 1;\n    while n > 0 {\n        if n % 2 == 1 {\n            r = (r * p) % 101;\n        }\n        n = n / 2;\n        p = (p * p) % 101;\n    }\n    r"}
{"task_id": "HumanEval/51", "completion": "\n    let mut result = String::new();\n    for c in text.chars() {\n        if !\"aeiou\".contains(c) {\n            result.push(c);\n        }\n    }\n    result"}
{"task_id": "HumanEval/52", "completion": "\n    l.iter().all(|&x| x < t)"}
{"task_id": "HumanEval/53", "completion": "\n    x + y"}
{"task_id": "HumanEval/54", "completion": "\n    let mut s0 = s0.chars().collect::<Vec<char>>();\n    let mut s1 = s1.chars().collect::<Vec<char>>();\n    s0.sort_unstable();\n    s1.sort_unstable();\n    s0 == s1"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0 {\n        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }"}
{"task_id": "HumanEval/56", "completion": "\n    let mut stack = Vec::new();\n    for c in brackets.chars() {\n        match c {\n            '<' => stack.push(c),\n            '>' => {\n                if stack.pop().is_none() {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()"}
{"task_id": "HumanEval/57", "completion": "\n    let mut increasing = true;\n    let mut decreasing = true;\n    for i in 1..l.len() {\n        if l[i] > l[i - 1] {\n            decreasing = false;\n        }\n        if l[i] < l[i - 1] {\n            increasing = false;\n        }\n    }\n    increasing || decreasing"}
{"task_id": "HumanEval/58", "completion": "\n    let mut v = Vec::new();\n    for i in l1 {\n        if l2.contains(&i) {\n            v.push(i);\n        }\n    }\n    v.sort();\n    v.dedup();\n    v"}
{"task_id": "HumanEval/59", "completion": "\n    let mut n = n;\n    let mut largest_factor = 1;\n    let mut factor = 2;\n    while factor * factor <= n {\n        if n % factor == 0 {\n            largest_factor = factor;\n            n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n    if n > 1 {\n        largest_factor = n;\n    }\n    largest_factor"}
{"task_id": "HumanEval/60", "completion": "\n    (1..=n).sum()"}
{"task_id": "HumanEval/61", "completion": "\n    let mut stack = Vec::new();\n    for c in brackets.chars() {\n        match c {\n            '(' => stack.push(c),\n            ')' => {\n                if stack.pop().is_none() {\n                    return false;\n                }\n            }\n            _ => {}\n        }\n    }\n    stack.is_empty()"}
{"task_id": "HumanEval/62", "completion": "\n    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * (i as isize));\n    }\n    result"}
{"task_id": "HumanEval/63", "completion": "\n    if n < 3 {\n        return 0;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    for _ in 3..=n {\n        let d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    c"}
{"task_id": "HumanEval/64", "completion": "\n    let mut count = 0;\n    for c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/65", "completion": "\n    let mut digits = x.to_string().chars().collect::<Vec<char>>();\n    let mut shift = shift;\n    if shift > digits.len() as isize {\n        shift = shift % digits.len() as isize;\n    }\n    digits.rotate_right(shift as usize);\n    digits.iter().collect()"}
{"task_id": "HumanEval/66", "completion": "\n    s.chars()\n        .filter(|c| c.is_uppercase())\n        .map(|c| c as isize)\n        .sum()"}
{"task_id": "HumanEval/67", "completion": "\n    let mut fruits = s.split_whitespace();\n    let mut apples = fruits.next().unwrap().parse::<isize>().unwrap();\n    let mut oranges = fruits.next().unwrap().parse::<isize>().unwrap();\n    let mut mangoes = n - apples - oranges;\n    mangoes"}
{"task_id": "HumanEval/68", "completion": "\n    let mut min_even = isize::MAX;\n    let mut min_even_index = 0;\n    let mut found = false;\n\n    for (i, &v) in arr.iter().enumerate() {\n        if v % 2 == 0 && v < min_even {\n            min_even = v;\n            min_even_index = i;\n            found = true;\n        }\n    }\n\n    if found {\n        vec![min_even, min_even_index as isize]\n    } else {\n        vec![]\n    }"}
{"task_id": "HumanEval/69", "completion": "\n    let mut map = std::collections::HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n        if k > max && v >= k {\n            max = k;\n        }\n    }\n    max"}
{"task_id": "HumanEval/70", "completion": "\n    let mut sorted = Vec::new();\n    let mut sorted_indices = Vec::new();\n    let mut unsorted = lst.clone();\n    let mut unsorted_indices = (0..lst.len()).collect();\n\n    while !unsorted.is_empty() {\n        let mut min_index = 0;\n        let mut max_index = 0;\n        let mut min = unsorted[0];\n        let mut max = unsorted[0];\n\n        for (i, &item) in unsorted.iter().enumerate() {\n            if item < min {\n                min = item;\n                min_index = i;\n            }\n            if item > max {\n                max = item;\n                max_index = i;\n            }\n        }\n\n        sorted.push(min);\n        sorted_indices.push(unsorted_indices[min_index]);\n        unsorted.remove(min_index);\n        unsorted_indices.remove(min_index);\n\n        if !unsorted.is_empty() {\n            sorted.push(max);\n            sorted_indices.push(unsorted_indices[max_index]);\n            unsorted.remove(max_index);\n            unsorted_indices.remove(max_index);\n        }\n    }\n\n    let mut result = Vec::new();\n    for &index in &sorted_indices {\n        result.push(lst[index]);\n    }\n    result"}
{"task_id": "HumanEval/71", "completion": "\n    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] <= sides[2] {\n        return -1.0;\n    }\n    let s = (sides[0] + sides[1] + sides[2]) / 2;\n    let area = (s * (s - sides[0]) * (s - sides[1]) * (s - sides[2])).sqrt();\n    (area * 100.0).round() / 100.0"}
{"task_id": "HumanEval/72", "completion": "\n    let mut sum = 0;\n    let mut i = 0;\n    let mut j = q.len() - 1;\n    while i < j {\n        if q[i] != q[j] {\n            return false;\n        }\n        sum += q[i];\n        i += 1;\n        j -= 1;\n    }\n    sum <= w"}
{"task_id": "HumanEval/73", "completion": "\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n    let mut changes = 0;\n\n    while left < right {\n        if arr[left] == arr[right] {\n            left += 1;\n            right -= 1;\n        } else {\n            changes += 1;\n            if arr[left] < arr[right] {\n                right -= 1;\n            } else {\n                left += 1;\n            }\n        }\n    }\n\n    changes"}
{"task_id": "HumanEval/74", "completion": "\n    let mut total_chars_lst1 = 0;\n    let mut total_chars_lst2 = 0;\n    for i in lst1.iter() {\n        total_chars_lst1 += i.len();\n    }\n    for i in lst2.iter() {\n        total_chars_lst2 += i.len();\n    }\n    if total_chars_lst1 < total_chars_lst2 {\n        return lst1;\n    } else {\n        return lst2;\n    }"}
{"task_id": "HumanEval/75", "completion": "\n    if a < 2 {\n        return false;\n    }\n    let mut i = 2;\n    while i * i <= a {\n        if a % i == 0 {\n            let b = a / i;\n            if is_prime(i) && is_prime(b) {\n                return true;\n            }\n        }\n        i += 1;\n    }\n    false"}
{"task_id": "HumanEval/76", "completion": "\n    if x == 1 {\n        return true;\n    }\n    if x == n {\n        return true;\n    }\n    if x % n != 0 {\n        return false;\n    }\n    is_simple_power(x / n, n)"}
{"task_id": "HumanEval/77", "completion": "\n    let mut i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i == a"}
{"task_id": "HumanEval/78", "completion": "\n    let mut count = 0;\n    for c in num.chars() {\n        match c {\n            '2' | '3' | '5' | '7' | 'B' | 'D' => count += 1,\n            _ => (),\n        }\n    }\n    count"}
{"task_id": "HumanEval/79", "completion": "\n    let mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push(if decimal % 2 == 0 { '0' } else { '1' });\n        decimal /= 2;\n    }\n    binary.chars().rev().collect()"}
{"task_id": "HumanEval/80", "completion": "\n    if s.len() < 3 {\n        return false;\n    }\n    let mut chars = s.chars();\n    let mut prev = chars.next().unwrap();\n    let mut curr = chars.next().unwrap();\n    let mut next = chars.next().unwrap();\n    for c in chars {\n        if prev == curr || curr == next || prev == next {\n            return false;\n        }\n        prev = curr;\n        curr = next;\n        next = c;\n    }\n    true"}
{"task_id": "HumanEval/81", "completion": "\n    let mut result = Vec::new();\n    for grade in grades {\n        if grade >= 4.0 {\n            result.push(String::from(\"A+\"));\n        } else if grade >= 3.7 {\n            result.push(String::from(\"A\"));\n        } else if grade >= 3.3 {\n            result.push(String::from(\"A-\"));\n        } else if grade >= 3.0 {\n            result.push(String::from(\"B+\"));\n        } else if grade >= 2.7 {\n            result.push(String::from(\"B\"));\n        } else if grade >= 2.3 {\n            result.push(String::from(\"B-\"));\n        } else if grade >= 2.0 {\n            result.push(String::from(\"C+\"));\n        } else if grade >= 1.7 {\n            result.push(String::from(\"C\"));\n        } else if grade >= 1.3 {\n            result.push(String::from(\"C-\"));\n        } else if grade >= 1.0 {\n            result.push(String::from(\"D+\"));\n        } else if grade >= 0.7 {\n            result.push(String::from(\"D\"));\n        } else if grade >= 0.0 {\n            result.push(String::from(\"D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n        }\n    }\n    result"}
{"task_id": "HumanEval/82", "completion": "\n    let mut prime = true;\n    let mut i = 2;\n    let length = string.len();\n    if length == 1 {\n        return false;\n    }\n    while i < length {\n        if length % i == 0 {\n            prime = false;\n            break;\n        }\n        i += 1;\n    }\n    prime"}
{"task_id": "HumanEval/83", "completion": "\n    let mut count = 0;\n    for i in 1..10 {\n        count += 9 * i.pow(n - 1);\n    }\n    count"}
{"task_id": "HumanEval/84", "completion": "\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum += n % 2;\n        n /= 2;\n    }\n    sum.to_string()"}
{"task_id": "HumanEval/85", "completion": "\n    lst.iter()\n        .enumerate()\n        .filter(|(i, _)| i % 2 == 1)\n        .map(|(_, x)| x)\n        .filter(|x| x % 2 == 0)\n        .sum()"}
{"task_id": "HumanEval/86", "completion": "\n    let mut words: Vec<String> = s.split_whitespace().map(|s| s.to_string()).collect();\n    for word in words.iter_mut() {\n        let mut chars: Vec<char> = word.chars().collect();\n        chars.sort_by(|a, b| a.cmp(b));\n        *word = chars.into_iter().collect();\n    }\n    words.join(\" \")"}
{"task_id": "HumanEval/87", "completion": "\n    let mut result = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n        for (j, col) in row.iter().enumerate() {\n            if *col == x {\n                result.push((i as isize, j as isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| a.0.cmp(&b.0).then(b.1.cmp(&a.1)));\n    result"}
{"task_id": "HumanEval/88", "completion": "\n    let mut array = array;\n    let mut sum = 0;\n    for i in 0..array.len() {\n        sum += array[i];\n    }\n    if sum % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array"}
{"task_id": "HumanEval/89", "completion": "\n    let mut result = String::new();\n    for c in s.chars() {\n        let mut c = c;\n        if c.is_ascii_lowercase() {\n            c = (((c as u8 - 97) + 2) % 26 + 97) as char;\n        } else if c.is_ascii_uppercase() {\n            c = (((c as u8 - 65) + 2) % 26 + 65) as char;\n        }\n        result.push(c);\n    }\n    result"}
{"task_id": "HumanEval/90", "completion": "\n    let mut sorted = lst.clone();\n    sorted.sort();\n    let mut iter = sorted.iter();\n    let first = iter.next();\n    let second = iter.next();\n    match (first, second) {\n        (Some(first), Some(second)) => {\n            if first == second {\n                None\n            } else {\n                Some(*second)\n            }\n        }\n        _ => None,\n    }"}
{"task_id": "HumanEval/91", "completion": "\n    let mut count = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n        }\n        if is_bored {\n            count += 1;\n        }\n        if c == 'I' {\n            is_bored = true;\n        }\n    }\n    count"}
{"task_id": "HumanEval/92", "completion": "\n    if x.fract() == 0.0 && y.fract() == 0.0 && z.fract() == 0.0 {\n        if x == y + z || y == x + z || z == x + y {\n            return true;\n        }\n    }\n    false"}
{"task_id": "HumanEval/93", "completion": "\n    let mut encoded = String::new();\n    for c in message.chars() {\n        let mut new_char = c;\n        if c.is_lowercase() {\n            new_char = c.to_uppercase().next().unwrap();\n        } else if c.is_uppercase() {\n            new_char = c.to_lowercase().next().unwrap();\n        }\n        match new_char {\n            'A' => encoded.push('C'),\n            'E' => encoded.push('G'),\n            'I' => encoded.push('K'),\n            'O' => encoded.push('M'),\n            'U' => encoded.push('P'),\n            _ => encoded.push(new_char),\n        }\n    }\n    encoded"}
{"task_id": "HumanEval/94", "completion": "\n    let mut max = 0;\n    for i in lst {\n        if i > max {\n            max = i;\n        }\n    }\n    let mut sum = 0;\n    let mut n = max;\n    while n > 0 {\n        sum += n % 10;\n        n /= 10;\n    }\n    sum"}
{"task_id": "HumanEval/95", "completion": "\n    if dict.is_empty() {\n        return false;\n    }\n\n    let mut is_lower = true;\n    let mut is_upper = true;\n\n    for key in dict.keys() {\n        if !key.chars().all(char::is_lowercase) {\n            is_lower = false;\n        }\n        if !key.chars().all(char::is_uppercase) {\n            is_upper = false;\n        }\n    }\n\n    is_lower || is_upper"}
{"task_id": "HumanEval/96", "completion": "\n    let mut primes: Vec<isize> = Vec::new();\n    if n <= 1 {\n        return primes;\n    }\n    let mut i = 2;\n    while i < n {\n        if is_prime(i) {\n            primes.push(i);\n        }\n        i += 1;\n    }\n    primes"}
{"task_id": "HumanEval/97", "completion": "\n    let a = a % 10;\n    let b = b % 10;\n    a * b"}
{"task_id": "HumanEval/98", "completion": "\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/99", "completion": "\n    let value: f64 = value.parse().unwrap();\n    let rounded = value.round();\n    if rounded - value == 0.5 {\n        if value > 0.0 {\n            rounded as isize + 1\n        } else {\n            rounded as isize - 1\n        }\n    } else {\n        rounded as isize\n    }"}
{"task_id": "HumanEval/100", "completion": "\n    let mut result = Vec::new();\n    let mut current = n;\n    while current > 0 {\n        result.push(current);\n        current = if current % 2 == 0 {\n            current + 1\n        } else {\n            current + 2\n        };\n    }\n    result"}
{"task_id": "HumanEval/101", "completion": "\n    s.split(|c: char| c.is_whitespace() || c == ',')\n        .map(|s| s.to_string())\n        .collect()"}
{"task_id": "HumanEval/102", "completion": "\n    let mut max = x;\n    if y < x {\n        max = y;\n    }\n    for i in (x..=y).rev() {\n        if i % 2 == 0 {\n            return i;\n        }\n    }\n    -1"}
{"task_id": "HumanEval/104", "completion": "\n    let mut result = Vec::new();\n    for i in x {\n        let mut flag = true;\n        let mut temp = i;\n        while temp > 0 {\n            if temp % 10 % 2 == 0 {\n                flag = false;\n                break;\n            }\n            temp /= 10;\n        }\n        if flag {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result"}
{"task_id": "HumanEval/105", "completion": "\n    let mut result = Vec::new();\n    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.push(i.to_string());\n        }\n    }\n    result.sort_by(|a, b| b.cmp(a));\n    result\n        .iter()\n        .map(|x| match x.parse::<usize>().unwrap() {\n            1 => String::from(\"One\"),\n            2 => String::from(\"Two\"),\n            3 => String::from(\"Three\"),\n            4 => String::from(\"Four\"),\n            5 => String::from(\"Five\"),\n            6 => String::from(\"Six\"),\n            7 => String::from(\"Seven\"),\n            8 => String::from(\"Eight\"),\n            9 => String::from(\"Nine\"),\n            _ => String::from(\"\"),\n        })\n        .collect()"}
{"task_id": "HumanEval/106", "completion": "\n    let mut v = Vec::new();\n    for i in 1..=n {\n        if i % 2 == 0 {\n            v.push(factorial(i));\n        } else {\n            v.push(sum(i));\n        }\n    }\n    v"}
{"task_id": "HumanEval/107", "completion": "\n    let mut even = 0;\n    let mut odd = 0;\n    for i in 1..=n {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even += 1;\n            } else {\n                odd += 1;\n            }\n        }\n    }\n    (even, odd)"}
{"task_id": "HumanEval/108", "completion": "\n    let mut count = 0;\n    for num in arr {\n        let mut sum = 0;\n        let mut n = num;\n        while n != 0 {\n            sum += n % 10;\n            n /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/109", "completion": "\n    let mut arr = arr;\n    let mut count = 0;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > arr[(i + 1) % arr.len()] {\n            count += 1;\n            arr.rotate_right(1);\n        } else {\n            i += 1;\n        }\n    }\n    count <= 1"}
{"task_id": "HumanEval/110", "completion": "\n    let mut lst1 = lst1;\n    let mut lst2 = lst2;\n    let mut even_count = 0;\n    let mut odd_count = 0;\n\n    for i in 0..lst1.len() {\n        if lst1[i] % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n\n    for i in 0..lst2.len() {\n        if lst2[i] % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n\n    if even_count == lst1.len() {\n        return String::from(\"YES\");\n    }\n\n    if odd_count == lst1.len() {\n        return String::from(\"YES\");\n    }\n\n    if even_count == lst1.len() + lst2.len() {\n        return String::from(\"YES\");\n    }\n\n    if odd_count == lst1.len() + lst2.len() {\n        return String::from(\"YES\");\n    }\n\n    String::from(\"NO\")"}
{"task_id": "HumanEval/111", "completion": "\n    let mut map = HashMap::new();\n    for c in test.split_whitespace() {\n        let count = map.entry(c.to_string()).or_insert(0);\n        *count += 1;\n    }\n    map"}
{"task_id": "HumanEval/112", "completion": "\n    let mut result = String::new();\n    for ch in s.chars() {\n        if !c.contains(ch) {\n            result.push(ch);\n        }\n    }\n    (result, result == result.chars().rev().collect::<String>())"}
{"task_id": "HumanEval/113", "completion": "\n    let mut result = Vec::new();\n    for s in lst {\n        let mut count = 0;\n        for c in s.chars() {\n            if c.to_digit(10).unwrap() % 2 == 1 {\n                count += 1;\n            }\n        }\n        result.push(format!(\n            \"the number of odd elements {}n the str{}ng {} of the {}nput.\",\n            count,\n            count,\n            count,\n            count\n        ));\n    }\n    result"}
{"task_id": "HumanEval/114", "completion": "\n    let mut min = nums[0];\n    let mut sum = nums[0];\n    for i in 1..nums.len() {\n        sum = if sum + nums[i] < nums[i] {\n            nums[i]\n        } else {\n            sum + nums[i]\n        };\n        if sum < min {\n            min = sum;\n        }\n    }\n    min"}
{"task_id": "HumanEval/115", "completion": "\n    let mut count = 0;\n    let mut water = capacity;\n    let mut row = 0;\n    let mut col = 0;\n    let mut row_len = grid.len();\n    let mut col_len = grid[0].len();\n\n    while row < row_len && col < col_len {\n        if water == 0 {\n            water = capacity;\n            count += 1;\n        }\n\n        if grid[row][col] == 1 {\n            water -= 1;\n        }\n\n        if col == col_len - 1 {\n            col = 0;\n            row += 1;\n        } else {\n            col += 1;\n        }\n    }\n\n    count"}
{"task_id": "HumanEval/116", "completion": "\n    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr"}
{"task_id": "HumanEval/117", "completion": "\n    let mut v = Vec::new();\n    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n            if c.is_lowercase() {\n                count += 1;\n            }\n            word.push(c);\n        } else {\n            if count == n {\n                v.push(word);\n            }\n            count = 0;\n            word = String::new();\n        }\n    }\n    if count == n {\n        v.push(word);\n    }\n    v"}
{"task_id": "HumanEval/118", "completion": "\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut word_chars = word.chars().collect::<Vec<char>>();\n    let mut result = String::new();\n    let mut found = false;\n    let mut i = word_chars.len() - 1;\n    while i > 0 {\n        if vowels.contains(&word_chars[i]) {\n            if !vowels.contains(&word_chars[i - 1]) && !vowels.contains(&word_chars[i + 1]) {\n                result.push(word_chars[i]);\n                found = true;\n                break;\n            }\n        }\n        i -= 1;\n    }\n    if found {\n        result\n    } else {\n        String::new()\n    }"}
{"task_id": "HumanEval/119", "completion": "\n    let mut left_parens = 0;\n    let mut right_parens = 0;\n    for s in lst {\n        for c in s.chars() {\n            if c == '(' {\n                left_parens += 1;\n            } else {\n                right_parens += 1;\n            }\n        }\n    }\n    if left_parens == right_parens {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\")\n    }"}
{"task_id": "HumanEval/120", "completion": "\n    let mut arr = arr;\n    arr.sort_by(|a, b| b.cmp(a));\n    arr.into_iter().take(k as usize).collect()"}
{"task_id": "HumanEval/121", "completion": "\n    lst.iter()\n        .enumerate()\n        .filter(|(i, _)| i % 2 == 0)\n        .map(|(_, x)| x)\n        .filter(|x| x % 2 != 0)\n        .sum()"}
{"task_id": "HumanEval/122", "completion": "\n    let mut sum = 0;\n    for i in 0..k {\n        let mut num = arr[i as usize];\n        while num > 99 {\n            num /= 10;\n        }\n        sum += num;\n    }\n    sum"}
{"task_id": "HumanEval/123", "completion": "\n    let mut result = vec![];\n    let mut current = n;\n    while current > 1 {\n        if current % 2 == 0 {\n            current /= 2;\n        } else {\n            current = 3 * current + 1;\n        }\n        if current % 2 == 1 {\n            result.push(current);\n        }\n    }\n    result.sort();\n    result"}
{"task_id": "HumanEval/124", "completion": "\n    let mut date_vec = date.split(\"-\").collect::<Vec<&str>>();\n    if date_vec.len() != 3 {\n        return false;\n    }\n    let month = date_vec[0].parse::<i32>().unwrap();\n    let day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n    if month < 1 || month > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n        return false;\n    }\n    if month == 2 {\n        if day > 29 {\n            return false;\n        }\n    }\n    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n        if day > 31 {\n            return false;\n        }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return false;\n        }\n    }\n    if year < 1900 {\n        return false;\n    }\n    true"}
{"task_id": "HumanEval/126", "completion": "\n    let mut prev = None;\n    for i in lst {\n        match prev {\n            Some(p) => {\n                if i < p {\n                    return false;\n                }\n            }\n            None => {}\n        }\n        prev = Some(i);\n    }\n    true"}
{"task_id": "HumanEval/127", "completion": "\n    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\n    let mut start = start1.max(start2);\n    let mut end = end1.min(end2);\n\n    if start > end {\n        return String::from(\"NO\");\n    }\n\n    if start == end {\n        start -= 1;\n    }\n\n    let mut primes = vec![true; end - start + 1];\n    primes[0] = false;\n    primes[1] = false;\n\n    for i in 2..((end - start) as f64).sqrt() as usize + 1 {\n        if primes[i] {\n            let mut j = i * i;\n            while j <= end - start {\n                primes[j] = false;\n                j += i;\n            }\n        }\n    }\n\n    let mut result = \"NO\";\n    for i in 2..primes.len() {\n        if primes[i] {\n            if i + start == end {\n                result = \"YES\";\n                break;\n            }\n        }\n    }\n\n    result.to_string()"}
{"task_id": "HumanEval/128", "completion": "\n    if arr.is_empty() {\n        return None;\n    }\n\n    let mut result = 0;\n    let mut sign = 1;\n\n    for &x in &arr {\n        if x == 0 {\n            return Some(0);\n        }\n\n        if x < 0 {\n            sign *= -1;\n        }\n\n        result += x.abs();\n    }\n\n    Some(result * sign)"}
{"task_id": "HumanEval/129", "completion": "\n    let mut visited = vec![false; grid.len() * grid[0].len()];\n    let mut queue = Vec::new();\n    let mut result = Vec::new();\n    let mut min_path = Vec::new();\n    let mut min_path_len = isize::MAX;\n\n    for i in 0..grid.len() {\n        for j in 0..grid[0].len() {\n            queue.push((i, j));\n            visited[i * grid[0].len() + j] = true;\n            break;\n        }\n    }\n\n    while !queue.is_empty() {\n        let (i, j) = queue.pop().unwrap();\n        let mut path = vec![grid[i][j]];\n        let mut len = 1;\n\n        if len == k {\n            if path < min_path {\n                min_path = path;\n                min_path_len = len;\n            }\n            continue;\n        }\n\n        let neighbors = vec![(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)];\n        for (x, y) in neighbors {\n            if x >= 0 && x < grid.len() as isize && y >= 0 && y < grid[0].len() as isize {\n                if !visited[x as usize * grid[0].len() + y as usize] {\n                    visited[x as usize * grid[0].len() + y as usize] = true;\n                    queue.push((x, y));\n                }\n            }\n        }\n    }\n\n    result"}
{"task_id": "HumanEval/130", "completion": "\n    let mut v = vec![1, 3, 2];\n    for i in 3..n {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        } else {\n            v[i - 1] + v[i - 2] + v[i + 1]\n        });\n    }\n    v"}
{"task_id": "HumanEval/131", "completion": "\n    let mut result = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n            result *= digit;\n        }\n        n /= 10;\n    }\n    result"}
{"task_id": "HumanEval/132", "completion": "\n    let mut stack: Vec<char> = Vec::new();\n    for c in string.chars() {\n        if c == '[' {\n            stack.push(c);\n        } else {\n            if stack.is_empty() {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    stack.is_empty()"}
{"task_id": "HumanEval/133", "completion": "\n    lst.iter().map(|x| x.ceil() as isize).map(|x| x * x).sum()"}
{"task_id": "HumanEval/134", "completion": "\n    let mut is_letter = false;\n    let mut is_word = false;\n    for c in txt.chars().rev() {\n        if c.is_alphabetic() {\n            is_letter = true;\n        }\n        if c.is_whitespace() {\n            is_word = true;\n        }\n        if is_word && is_letter {\n            return false;\n        }\n    }\n    is_letter"}
{"task_id": "HumanEval/135", "completion": "\n    let mut max_index = -1;\n    let mut max_value = -1;\n    for (i, &v) in arr.iter().enumerate() {\n        if v < max_value {\n            max_index = i as isize;\n            max_value = v;\n        }\n    }\n    max_index"}
{"task_id": "HumanEval/136", "completion": "\n    let mut largest_negative = None;\n    let mut smallest_positive = None;\n\n    for &x in &lst {\n        if x < 0 {\n            if largest_negative.is_none() || x > largest_negative.unwrap() {\n                largest_negative = Some(x);\n            }\n        } else if x > 0 {\n            if smallest_positive.is_none() || x < smallest_positive.unwrap() {\n                smallest_positive = Some(x);\n            }\n        }\n    }\n\n    (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/138", "completion": "\n    let mut i = 2;\n    let mut sum = 0;\n    while i < n {\n        sum += i;\n        i += 2;\n    }\n    sum == n"}
{"task_id": "HumanEval/139", "completion": "\n    if n <= 1 {\n        return 1;\n    }\n\n    n * special_factorial(n - 1)"}
{"task_id": "HumanEval/140", "completion": "\n    let mut result = String::new();\n    let mut count = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            count += 1;\n        } else {\n            if count > 0 {\n                if count == 1 {\n                    result.push('_');\n                } else {\n                    result.push('-');\n                }\n                count = 0;\n            }\n            result.push(c);\n        }\n    }\n    result"}
{"task_id": "HumanEval/141", "completion": "\n    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n    let mut after_dot = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n        if c == '.' {\n            dot = true;\n        }\n        if !dot && !c.is_digit(10) {\n            before_dot = true;\n        }\n        if dot && !c.is_digit(10) {\n            after_dot = true;\n        }\n    }\n    if digits > 3 || !dot || !before_dot || !after_dot {\n        return String::from(\"No\");\n    }\n    let mut after_dot_str = String::new();\n    for c in file_name.chars() {\n        if c == '.' {\n            break;\n        }\n        after_dot_str.push(c);\n    }\n    if after_dot_str == \"txt\" || after_dot_str == \"exe\" || after_dot_str == \"dll\" {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"No\");"}
{"task_id": "HumanEval/142", "completion": "\n    let mut sum = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x * x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        } else {\n            sum += x;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/143", "completion": "\n    let mut result = String::new();\n    let mut is_prime = true;\n    let mut count = 0;\n    for word in sentence.split_whitespace() {\n        count = 0;\n        is_prime = true;\n        for i in 2..word.len() {\n            if word.len() % i == 0 {\n                is_prime = false;\n                break;\n            }\n        }\n        if is_prime {\n            if result.is_empty() {\n                result = word.to_string();\n            } else {\n                result = format!(\"{} {}\", result, word);\n            }\n        }\n    }\n    result"}
{"task_id": "HumanEval/144", "completion": "\n    let x_parts: Vec<&str> = x.split('/').collect();\n    let n_parts: Vec<&str> = n.split('/').collect();\n\n    let x_numerator = x_parts[0].parse::<i32>().unwrap();\n    let x_denominator = x_parts[1].parse::<i32>().unwrap();\n\n    let n_numerator = n_parts[0].parse::<i32>().unwrap();\n    let n_denominator = n_parts[1].parse::<i32>().unwrap();\n\n    let result = (x_numerator * n_numerator) % (x_denominator * n_denominator) == 0;\n\n    result"}
{"task_id": "HumanEval/145", "completion": "\n    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.abs().to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n        let b_sum = b.abs().to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n        a_sum.cmp(&b_sum)\n    });\n    nums"}
{"task_id": "HumanEval/146", "completion": "\n    nums.iter()\n        .filter(|&x| x > &10)\n        .filter(|&x| x % 10 % 2 == 1)\n        .filter(|&x| x / 10 % 2 == 1)\n        .count() as isize"}
{"task_id": "HumanEval/147", "completion": "\n    let mut a = vec![0; n as usize];\n    for i in 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            for k in j+1..n {\n                if a[i as usize] + a[j as usize] + a[k as usize] % 3 == 0 {\n                    count += 1;\n                }\n            }\n        }\n    }\n    count"}
{"task_id": "HumanEval/149", "completion": "\n    let mut result = Vec::new();\n    for word in lst {\n        if word.len() % 2 == 0 {\n            result.push(word);\n        }\n    }\n    result.sort();\n    result"}
{"task_id": "HumanEval/150", "completion": "\n    if is_prime(n) {\n        x\n    } else {\n        y\n    }"}
{"task_id": "HumanEval/151", "completion": "\n    let mut sum = 0;\n    for i in lst {\n        if i.fract() == 0.0 && i % 2 != 0 {\n            sum += i * i;\n        }\n    }\n    sum as isize"}
{"task_id": "HumanEval/152", "completion": "\n    let mut result = Vec::new();\n    for i in 0..game.len() {\n        result.push((game[i] - guess[i]).abs());\n    }\n    result"}
{"task_id": "HumanEval/153", "completion": "\n    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength = 0;\n    for extension in extensions {\n        let mut extension_strength = 0;\n        for c in extension.chars() {\n            if c.is_uppercase() {\n                extension_strength += 1;\n            } else if c.is_lowercase() {\n                extension_strength -= 1;\n            }\n        }\n        if extension_strength > strongest_extension_strength {\n            strongest_extension = extension;\n            strongest_extension_strength = extension_strength;\n        }\n    }\n    return format!(\"{}.{}\", class_name, strongest_extension);"}
{"task_id": "HumanEval/154", "completion": "\n    let mut b = b;\n    let mut a = a;\n    if a.len() < b.len() {\n        return false;\n    }\n    if a.len() == b.len() {\n        return a == b;\n    }\n    let mut b_len = b.len();\n    while b_len > 0 {\n        if a.contains(&b) {\n            return true;\n        }\n        b.push(b.remove(0));\n        b_len -= 1;\n    }\n    false"}
{"task_id": "HumanEval/155", "completion": "\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n    while num != 0 {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)"}
{"task_id": "HumanEval/156", "completion": "\n    let mut result = String::new();\n    let mut num = number;\n    while num > 0 {\n        if num >= 100 {\n            result.push('c');\n            num -= 100;\n        } else if num >= 90 {\n            result.push('x');\n            result.push('c');\n            num -= 90;\n        } else if num >= 50 {\n            result.push('l');\n            num -= 50;\n        } else if num >= 40 {\n            result.push('x');\n            result.push('l');\n            num -= 40;\n        } else if num >= 10 {\n            result.push('x');\n            num -= 10;\n        } else if num >= 9 {\n            result.push('i');\n            result.push('x');\n            num -= 9;\n        } else if num >= 5 {\n            result.push('v');\n            num -= 5;\n        } else if num >= 4 {\n            result.push('i');\n            result.push('v');\n            num -= 4;\n        } else if num >= 1 {\n            result.push('i');\n            num -= 1;\n        }\n    }\n    result"}
{"task_id": "HumanEval/157", "completion": "\n    let mut sides = vec![a, b, c];\n    sides.sort();\n    sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]"}
{"task_id": "HumanEval/158", "completion": "\n    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word in words {\n        let mut count = 0;\n        for c in word.chars() {\n            if !word.contains(c) {\n                count += 1;\n            }\n        }\n        if count > max_count {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    max_word"}
{"task_id": "HumanEval/159", "completion": "\n    let mut total = number + need;\n    if total > remaining {\n        total = remaining;\n    }\n    vec![total, remaining - total]"}
{"task_id": "HumanEval/160", "completion": "\n    let mut result = operand[0];\n    for i in 0..operator.len() {\n        let op = operator[i].as_str();\n        let operand = operand[i + 1];\n        match op {\n            \"+\" => result += operand,\n            \"-\" => result -= operand,\n            \"*\" => result *= operand,\n            \"/\" => result /= operand,\n            \"**\" => result = result.pow(operand as u32),\n            _ => {}\n        }\n    }\n    result"}
{"task_id": "HumanEval/161", "completion": "\n    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(if c.is_lowercase() {\n                c.to_uppercase().next().unwrap()\n            } else {\n                c.to_lowercase().next().unwrap()\n            });\n        } else {\n            result.push(c);\n        }\n    }\n    if result.is_empty() {\n        s.chars().rev().collect()\n    } else {\n        result\n    }"}
{"task_id": "HumanEval/162", "completion": "\n    if text.is_empty() {\n        return None;\n    }\n    let mut hasher = md5::Md5::new();\n    hasher.update(text);\n    Some(hasher.finalize().to_hex())"}
{"task_id": "HumanEval/163", "completion": "\n    let mut result = Vec::new();\n    let mut current = a;\n    while current <= b {\n        if current % 2 == 0 {\n            result.push(current);\n        }\n        current += 1;\n    }\n    result"}
