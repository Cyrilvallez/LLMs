{"task_id": "HumanEval/0", "completion": "\n    let mut iter = numbers.iter();\n    let mut prev = iter.next();\n    for curr in iter {\n        if prev.is_some() && (curr - prev.unwrap()).abs() < threshold {\n            return true;\n        }\n        prev = Some(curr);\n    }\n    false"}
{"task_id": "HumanEval/1", "completion": "\n    let mut result: Vec<String> = Vec::new();\n    let mut current_group: String = String::new();\n    let mut open_braces: usize = 0;\n    for c in paren_string.chars() {\n        if c == '(' {\n            open_braces += 1;\n            current_group.push(c);\n        } else if c == ')' {\n            open_braces -= 1;\n            current_group.push(c);\n            if open_braces == 0 {\n                result.push(current_group);\n                current_group = String::new();\n            }\n        } else {\n            current_group.push(c);\n        }\n    }\n    result"}
{"task_id": "HumanEval/2", "completion": "\n    number - number.floor()"}
{"task_id": "HumanEval/3", "completion": "\n    let mut balance = 0;\n    for operation in operations {\n        balance += operation;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false"}
{"task_id": "HumanEval/4", "completion": "\n    let mean = mean(numbers);\n    let mut sum = 0.0;\n    for number in numbers {\n        sum += (number - mean).abs();\n    }\n    sum / numbers.len() as f64"}
{"task_id": "HumanEval/5", "completion": "\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate() {\n        if i!= 0 {\n            result.push(delimeter);\n        }\n        result.push(*n);\n    }\n    result"}
{"task_id": "HumanEval/6", "completion": "\n    let mut paren_vec: Vec<isize> = Vec::new();\n    let mut paren_stack: Vec<char> = Vec::new();\n    let mut paren_level: isize = 0;\n    for c in paren_string.chars() {\n        if c == '(' {\n            paren_stack.push(c);\n            paren_level += 1;\n        } else if c == ')' {\n            paren_stack.pop();\n            paren_level -= 1;\n        }\n        paren_vec.push(paren_level);\n    }\n    paren_vec"}
{"task_id": "HumanEval/7", "completion": "\n    strings\n       .into_iter()\n       .filter(|s| s.contains(&substring))\n       .collect()"}
{"task_id": "HumanEval/8", "completion": "\n    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    (sum, product)"}
{"task_id": "HumanEval/9", "completion": "\n    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n    max_numbers.push(max_number);\n    for number in numbers.iter().skip(1) {\n        if *number > max_number {\n            max_number = *number;\n        }\n        max_numbers.push(max_number);\n    }\n    max_numbers"}
{"task_id": "HumanEval/10", "completion": "\n    let mut result = String::new();\n    let mut longest_palindrome_postfix = find_longest_palindrome_postfix(&string);\n    result.push_str(&string[0..longest_palindrome_postfix]);\n    result.push_str(&string[longest_palindrome_postfix..].chars().rev().collect::<String>());\n    result"}
{"task_id": "HumanEval/11", "completion": "\n    let mut result = String::new();\n    for (a, b) in a.chars().zip(b.chars()) {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result"}
{"task_id": "HumanEval/12", "completion": "\n    let mut longest_string = None;\n    let mut longest_length = 0;\n    for string in strings {\n        if string.len() > longest_length {\n            longest_string = Some(string);\n            longest_length = string.len();\n        }\n    }\n    longest_string"}
{"task_id": "HumanEval/13", "completion": "\n    if a == 0 {\n        return b;\n    }\n    if b == 0 {\n        return a;\n    }\n    if a == b {\n        return a;\n    }\n    if a > b {\n        return greatest_common_divisor(a - b, b);\n    }\n    greatest_common_divisor(a, b - a)"}
{"task_id": "HumanEval/14", "completion": "\n    let mut result = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n    }\n    result"}
{"task_id": "HumanEval/15", "completion": "\n    let mut s = String::new();\n    for i in 0..n {\n        s.push_str(&i.to_string());\n        s.push_str(\" \");\n    }\n    s"}
{"task_id": "HumanEval/16", "completion": "\n    let mut chars = HashSet::new();\n    for c in string.chars() {\n        chars.insert(c.to_ascii_lowercase());\n    }\n    chars.len() as isize"}
{"task_id": "HumanEval/17", "completion": "\n    let mut beats: Vec<isize> = Vec::new();\n    let mut beat_count: isize = 0;\n    for c in music_string.chars() {\n        match c {\n            'o' => {\n                beat_count += 4;\n            }\n            'o|' => {\n                beat_count += 2;\n            }\n            '.|' => {\n                beat_count += 1;\n            }\n            _ => {}\n        }\n        beats.push(beat_count);\n    }\n    beats"}
{"task_id": "HumanEval/18", "completion": "\n    let mut count = 0;\n    let mut index = 0;\n    while let Some(i) = string[index..].find(&substring) {\n        count += 1;\n        index += i + substring.len();\n    }\n    count"}
{"task_id": "HumanEval/19", "completion": "\n    let mut numbers: Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n    numbers.sort_by(|a, b| a.cmp(b));\n    numbers.join(\" \")"}
{"task_id": "HumanEval/20", "completion": "\n    let mut numbers = numbers;\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    (numbers[0], numbers[1])"}
{"task_id": "HumanEval/21", "completion": "\n    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()"}
{"task_id": "HumanEval/23", "completion": "\n    string.len() as isize"}
{"task_id": "HumanEval/24", "completion": "\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return i;\n        }\n        i += 1;\n    }\n    n"}
{"task_id": "HumanEval/25", "completion": "\n    let mut factors = Vec::new();\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n            while n % i == 0 {\n                n /= i;\n            }\n        }\n        i += 1;\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors"}
{"task_id": "HumanEval/26", "completion": "\n    let mut result = Vec::new();\n    for number in numbers {\n        if!result.contains(&number) {\n            result.push(number);\n        }\n    }\n    result"}
{"task_id": "HumanEval/27", "completion": "\n    let mut new_string = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            new_string.push(c.to_ascii_uppercase());\n        } else {\n            new_string.push(c.to_ascii_lowercase());\n        }\n    }\n    new_string"}
{"task_id": "HumanEval/28", "completion": "\n    strings.join(\"\")"}
{"task_id": "HumanEval/29", "completion": "\n    strings\n       .into_iter()\n       .filter(|s| s.starts_with(&prefix))\n       .collect()"}
{"task_id": "HumanEval/30", "completion": "\n    l.into_iter().filter(|&x| x > 0).collect()"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2 {\n        return false;\n    }\n    if n == 2 {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n    }\n    let mut i = 3;\n    while i * i <= n {\n        if n % i == 0 {\n            return false;\n        }\n        i += 2;\n    }\n    true"}
{"task_id": "HumanEval/33", "completion": "\n    let mut l_sorted = l.clone();\n    let mut l_sorted_iter = l_sorted.iter_mut();\n    for (i, v) in l.iter().enumerate() {\n        if i % 3 == 0 {\n            *l_sorted_iter.next().unwrap() = *v;\n        }\n    }\n    l_sorted"}
{"task_id": "HumanEval/34", "completion": "\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v"}
{"task_id": "HumanEval/35", "completion": "\n    let mut max = l[0];\n    for i in l {\n        if i > max {\n            max = i;\n        }\n    }\n    max"}
{"task_id": "HumanEval/36", "completion": "\n    let mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/37", "completion": "\n    let mut l_sorted = l.clone();\n    let mut i = 0;\n    while i < l.len() {\n        if i % 2 == 0 {\n            l_sorted[i] = l[i / 2];\n        }\n        i += 1;\n    }\n    l_sorted"}
{"task_id": "HumanEval/39", "completion": "\n    let mut fib = 1;\n    let mut fib_prev = 0;\n    let mut fib_next = 1;\n    let mut i = 0;\n    while i < n {\n        fib = fib_next;\n        fib_next = fib + fib_prev;\n        fib_prev = fib;\n        i += 1;\n    }\n    fib"}
{"task_id": "HumanEval/40", "completion": "\n    let mut seen = HashSet::new();\n    for i in l {\n        if seen.contains(&(-i)) {\n            return true;\n        }\n        seen.insert(i);\n    }\n    false"}
{"task_id": "HumanEval/41", "completion": "\n    let mut left_cars = Vec::new();\n    let mut right_cars = Vec::new();\n    for i in 0..n {\n        left_cars.push(Car::new(i, true));\n        right_cars.push(Car::new(i, false));\n    }\n    let mut collisions = 0;\n    loop {\n        let mut left_cars_moved = 0;\n        let mut right_cars_moved = 0;\n        for i in 0..n {\n            if left_cars[i].is_moving_left {\n                left_cars[i].x -= 1;\n                if right_cars[i].is_moving_right {\n                    collisions += 1;\n                }\n            } else {\n                left_cars[i].x += 1;\n            }\n            if right_cars[i].is_moving_right {\n                right_cars[i].x += 1;\n                if left_cars[i].is_moving_left {\n                    collisions += 1;\n                }\n            } else {\n                right_cars[i].x -= 1;\n            }\n            if left_cars[i].x == 0 {\n                left_cars[i].is_moving_left = false;\n                left_cars_moved += 1;\n            }\n            if right_cars[i].x == 0 {\n                right_cars[i].is_moving_right = false;\n                right_cars_moved += 1;\n            }\n        }\n        if left_cars_moved == n {\n            break;\n        }\n        if right_cars_moved == n {\n            break;\n        }\n    }\n    collisions"}
{"task_id": "HumanEval/42", "completion": "\n    l.iter().map(|x| x + 1).collect()"}
{"task_id": "HumanEval/43", "completion": "\n    let mut seen = HashSet::new();\n    for i in l {\n        if seen.contains(&-i) {\n            return true;\n        }\n        seen.insert(i);\n    }\n    false"}
{"task_id": "HumanEval/44", "completion": "\n    let mut result = String::new();\n    let mut x = x;\n    while x > 0 {\n        result.push(char::from_digit((x % base) as u32, base as u32).unwrap());\n        x /= base;\n    }\n    result.chars().rev().collect()"}
{"task_id": "HumanEval/45", "completion": "\n    (a * h) as f64 / 2.0"}
{"task_id": "HumanEval/46", "completion": "\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    d"}
{"task_id": "HumanEval/47", "completion": "\n    let mut l = l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }"}
{"task_id": "HumanEval/48", "completion": "\n    let mut chars = text.chars();\n    let mut chars_rev = text.chars().rev();\n    loop {\n        match (chars.next(), chars_rev.next()) {\n            (Some(a), Some(b)) => {\n                if a!= b {\n                    return false;\n                }\n            }\n            (None, None) => {\n                return true;\n            }\n            _ => {\n                return false;\n            }\n        }\n    }"}
{"task_id": "HumanEval/49", "completion": "\n    if n < 0 {\n        n + p\n    } else {\n        n % p\n    }"}
{"task_id": "HumanEval/51", "completion": "\n    let mut result = String::new();\n    for c in text.chars() {\n        if!c.is_alphabetic() {\n            result.push(c);\n        }\n    }\n    result"}
{"task_id": "HumanEval/52", "completion": "\n    for n in l {\n        if n >= t {\n            return false;\n        }\n    }\n    true"}
{"task_id": "HumanEval/53", "completion": "\n    x + y"}
{"task_id": "HumanEval/54", "completion": "\n    let mut chars0 = s0.chars();\n    let mut chars1 = s1.chars();\n    loop {\n        match (chars0.next(), chars1.next()) {\n            (Some(c0), Some(c1)) => {\n                if c0!= c1 {\n                    return false;\n                }\n            }\n            (None, None) => {\n                return true;\n            }\n            _ => {\n                return false;\n            }\n        }\n    }"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);"}
{"task_id": "HumanEval/56", "completion": "\n    let mut stack: Vec<char> = Vec::new();\n    for c in brackets.chars() {\n        if c == '<' || c == '{' || c == '[' {\n            stack.push(c);\n        } else if c == '>' || c == '}' || c == ']' {\n            if stack.is_empty() {\n                return false;\n            }\n            let last = stack.pop().unwrap();\n            if (c == '>' && last!= '<')\n                || (c == '}' && last!= '{')\n                || (c == ']' && last!= '[')\n            {\n                return false;\n            }\n        }\n    }\n    stack.is_empty()"}
{"task_id": "HumanEval/57", "completion": "\n    let mut prev = l[0];\n    for i in 1..l.len() {\n        if l[i] < prev {\n            return false;\n        }\n        prev = l[i];\n    }\n    true"}
{"task_id": "HumanEval/58", "completion": "\n    let mut l1 = l1;\n    let mut l2 = l2;\n    l1.sort();\n    l2.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < l1.len() && j < l2.len() {\n        if l1[i] == l2[j] {\n            result.push(l1[i]);\n            i += 1;\n            j += 1;\n        } else if l1[i] < l2[j] {\n            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n    result"}
{"task_id": "HumanEval/59", "completion": "\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return i;\n        }\n        i += 1;\n    }\n    n"}
{"task_id": "HumanEval/60", "completion": "\n    let mut sum = 0;\n    for i in 1..n+1 {\n        sum += i;\n    }\n    sum"}
{"task_id": "HumanEval/61", "completion": "\n    let mut stack: Vec<char> = Vec::new();\n    for c in brackets.chars() {\n        if c == '(' {\n            stack.push('(');\n        } else if c == ')' {\n            if stack.is_empty() {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    stack.is_empty()"}
{"task_id": "HumanEval/62", "completion": "\n    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * (i as isize));\n    }\n    result"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0 {\n        0\n    } else if n == 1 {\n        0\n    } else if n == 2 {\n        1\n    } else {\n        fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n    }"}
{"task_id": "HumanEval/64", "completion": "\n    let mut count = 0;\n    for c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/65", "completion": "\n    let mut x_str = x.to_string();\n    let x_len = x_str.len();\n    let shift_len = shift.abs() as usize;\n    if shift_len > x_len {\n        x_str.chars().rev().collect()\n    } else {\n        let mut x_chars = x_str.chars();\n        let mut result = String::new();\n        for _ in 0..shift_len {\n            result.push(x_chars.next().unwrap());\n        }\n        for c in x_chars {\n            result.push(c);\n        }\n        result\n    }"}
{"task_id": "HumanEval/66", "completion": "\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase() {\n            sum += c as isize;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/67", "completion": "\n    let mut apples: isize = 0;\n    let mut oranges: isize = 0;\n    let mut mangoes: isize = 0;\n    let mut words: Vec<&str> = s.split_whitespace().collect();\n    apples = words[0].parse::<isize>().unwrap();\n    oranges = words[2].parse::<isize>().unwrap();\n    mangoes = n - apples - oranges;\n    mangoes"}
{"task_id": "HumanEval/68", "completion": "\n    let mut min_even = 0;\n    let mut min_even_index = 0;\n    let mut min_index = 0;\n    for (i, &value) in arr.iter().enumerate() {\n        if value % 2 == 0 && value < min_even {\n            min_even = value;\n            min_even_index = i;\n        }\n        if value < min_index {\n            min_index = value;\n        }\n    }\n    if min_even == 0 {\n        vec![]\n    } else if min_even == min_index {\n        vec![min_even, min_even_index]\n    } else {\n        vec![min_even, min_even_index]\n    }"}
{"task_id": "HumanEval/69", "completion": "\n    let mut max = 0;\n    let mut max_index = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if x > max {\n            max = x;\n            max_index = i;\n        }\n    }\n    if max == 0 {\n        return -1;\n    }\n    let mut count = 0;\n    for &x in lst.iter() {\n        if x == max {\n            count += 1;\n        }\n    }\n    if count == 1 {\n        return -1;\n    }\n    max"}
{"task_id": "HumanEval/70", "completion": "\n    let mut min = lst[0];\n    let mut max = lst[0];\n    let mut min_index = 0;\n    let mut max_index = 0;\n    let mut result = Vec::new();\n    for (i, &x) in lst.iter().enumerate() {\n        if x < min {\n            min = x;\n            min_index = i;\n        }\n        if x > max {\n            max = x;\n            max_index = i;\n        }\n    }\n    for i in 0..lst.len() {\n        if i == min_index {\n            result.push(min);\n        } else if i == max_index {\n            result.push(max);\n        } else {\n            result.push(lst[i]);\n        }\n    }\n    result"}
{"task_id": "HumanEval/71", "completion": "\n    let sides = vec![a, b, c];\n    let mut sides_sorted = sides.clone();\n    sides_sorted.sort();\n    if sides_sorted[0] + sides_sorted[1] > sides_sorted[2] {\n        let s = (sides_sorted[0] + sides_sorted[1] + sides_sorted[2]) as f64;\n        (s * (s - sides_sorted[0] as f64) * (s - sides_sorted[1] as f64) * (s - sides_sorted[2] as f64)).sqrt() / 4.0\n    } else {\n        -1.0\n    }"}
{"task_id": "HumanEval/72", "completion": "\n    let mut sum = 0;\n    for i in 0..q.len() {\n        sum += q[i];\n    }\n    if sum > w {\n        return false;\n    }\n    let mut i = 0;\n    let mut j = q.len() - 1;\n    while i < j {\n        if q[i]!= q[j] {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n    }\n    true"}
{"task_id": "HumanEval/73", "completion": "\n    let mut arr = arr;\n    let mut count = 0;\n    for i in 0..arr.len() {\n        if arr[i]!= arr[arr.len() - 1 - i] {\n            count += 1;\n            arr[i] = arr[arr.len() - 1 - i];\n        }\n    }\n    count"}
{"task_id": "HumanEval/74", "completion": "\n    let mut result = Vec::new();\n    let mut count1 = 0;\n    let mut count2 = 0;\n    for i in 0..lst1.len() {\n        count1 += lst1[i].len();\n    }\n    for i in 0..lst2.len() {\n        count2 += lst2[i].len();\n    }\n    if count1 < count2 {\n        result = lst1;\n    } else if count1 > count2 {\n        result = lst2;\n    } else {\n        result = lst1;\n    }\n    result"}
{"task_id": "HumanEval/75", "completion": "\n    let mut is_prime = true;\n    let mut i = 2;\n    while i < a && is_prime {\n        if a % i == 0 {\n            is_prime = false;\n        }\n        i += 1;\n    }\n    if is_prime {\n        let mut j = 2;\n        while j < a && is_prime {\n            if a % j == 0 {\n                is_prime = false;\n            }\n            j += 1;\n        }\n    }\n    is_prime"}
{"task_id": "HumanEval/76", "completion": "\n    if n == 1 {\n        return true;\n    }\n    if n == 0 {\n        return false;\n    }\n    if x == 1 {\n        return true;\n    }\n    if x == 0 {\n        return false;\n    }\n    if x == n {\n        return true;\n    }\n    if x % n == 0 {\n        return is_simple_power(x / n, n);\n    }\n    return false;"}
{"task_id": "HumanEval/77", "completion": "\n    if a == 0 {\n        return true;\n    }\n    let mut b = a;\n    while b % 3 == 0 {\n        b /= 3;\n    }\n    b == 1"}
{"task_id": "HumanEval/78", "completion": "\n    let mut count = 0;\n    for c in num.chars() {\n        let n = match c {\n            '0' => 0,\n            '1' => 1,\n            '2' => 2,\n            '3' => 3,\n            '4' => 4,\n            '5' => 5,\n            '6' => 6,\n            '7' => 7,\n            '8' => 8,\n            '9' => 9,\n            'A' => 10,\n            'B' => 11,\n            'C' => 12,\n            'D' => 13,\n            'E' => 14,\n            'F' => 15,\n            _ => 0,\n        };\n        if is_prime(n) {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/79", "completion": "\n    let mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push(if decimal % 2 == 0 { '0' } else { '1' });\n        decimal /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()"}
{"task_id": "HumanEval/80", "completion": "\n    let mut s = s.chars().collect::<Vec<char>>();\n    let mut seen = HashSet::new();\n    while s.len() > 3 {\n        let mut new_s = String::new();\n        for i in 0..s.len() {\n            if i + 2 < s.len() {\n                new_s.push(s[i]);\n                new_s.push(s[i + 1]);\n                new_s.push(s[i + 2]);\n            }\n        }\n        s = new_s.chars().collect::<Vec<char>>();\n        if seen.contains(&s) {\n            return false;\n        }\n        seen.insert(s.clone());\n    }\n    s.len() >= 3"}
{"task_id": "HumanEval/81", "completion": "\n    let mut letter_grades: Vec<String> = Vec::new();\n    for grade in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n        }\n    }\n    letter_grades"}
{"task_id": "HumanEval/82", "completion": "\n    let mut length = string.len();\n    let mut is_prime = true;\n    while length > 1 && is_prime {\n        if length % 2 == 0 {\n            length /= 2;\n        } else if length % 3 == 0 {\n            length /= 3;\n        } else if length % 5 == 0 {\n            length /= 5;\n        } else if length % 7 == 0 {\n            length /= 7;\n        } else if length % 11 == 0 {\n            length /= 11;\n        } else if length % 13 == 0 {\n            length /= 13;\n        } else if length % 17 == 0 {\n            length /= 17;\n        } else if length % 19 == 0 {\n            length /= 19;\n        } else if length % 23 == 0 {\n            length /= 23;\n        } else if length % 29 == 0 {\n            length /= 29;\n        } else if length % 31 == 0 {\n            length /= 31;\n        } else if length % 37 == 0 {\n            length /= 37;\n        } else if length % 41 == 0 {\n            length /= 41;\n        } else if length % 43 == 0 {\n            length /= 43;\n        } else if length % 47 == 0 {\n            length /= 47;\n        } else if length % 53 == 0 {\n            length /= 53;\n        } else if length % 59 == 0 {\n            length /= 59;\n        } else if length % 61 == 0 {\n            length /= 61;\n        } else if length % 67 == 0 {\n            length /= 67;\n        } else if length % 71 == 0 {\n            length /= 71;\n        } else if length % 73 == 0 {\n            length /= 73;\n        } else if length % 79 == 0 {\n            length /= 79;\n        } else if length % 83 == 0 {\n            length /= 83;\n        } else if length % 89 == 0 {\n            length /= 89;\n        } else if length % 97 == 0 {"}
{"task_id": "HumanEval/83", "completion": "\n    let mut count = 0;\n    for i in 1..10 {\n        count += starts_one(i, n);\n        count += ends_one(i, n);\n    }\n    count"}
{"task_id": "HumanEval/84", "completion": "\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0 {\n        result.push_str(&n.to_string()[..1]);\n        n = n / 2;\n    }\n    result.chars().rev().collect()"}
{"task_id": "HumanEval/85", "completion": "\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/86", "completion": "\n    let mut v: Vec<&str> = s.split_whitespace().collect();\n    v.sort_by(|a, b| a.cmp(b));\n    v.join(\" \")"}
{"task_id": "HumanEval/87", "completion": "\n    let mut result: Vec<(isize, isize)> = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n        for (j, col) in row.iter().enumerate() {\n            if *col == x {\n                result.push((i as isize, j as isize));\n            }\n        }\n    }\n    result.sort_by(|a, b| a.0.cmp(&b.0));\n    result.sort_by(|a, b| b.1.cmp(&a.1));\n    result"}
{"task_id": "HumanEval/88", "completion": "\n    let mut array = array;\n    let mut sum = 0;\n    for i in 0..array.len() {\n        sum += array[i];\n    }\n    if sum % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array"}
{"task_id": "HumanEval/89", "completion": "\n    let mut result = String::new();\n    for c in s.chars() {\n        let mut index = c as usize;\n        if c.is_alphabetic() {\n            index = c as usize - 'a' as usize;\n            index = (index + 2) % 26;\n            index += 'a' as usize;\n        }\n        result.push(index as u8 as char);\n    }\n    result"}
{"task_id": "HumanEval/90", "completion": "\n    let mut smallest = lst[0];\n    let mut second_smallest = lst[0];\n    for i in lst {\n        if i < smallest {\n            second_smallest = smallest;\n            smallest = i;\n        } else if i < second_smallest {\n            second_smallest = i;\n        }\n    }\n    if second_smallest == lst[0] {\n        None\n    } else {\n        Some(second_smallest)\n    }"}
{"task_id": "HumanEval/91", "completion": "\n    let mut count = 0;\n    for word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/92", "completion": "\n    let x_int = x.trunc() == x;\n    let y_int = y.trunc() == y;\n    let z_int = z.trunc() == z;\n    let sum = x + y + z;\n    let sum_int = sum.trunc() == sum;\n    x_int || y_int || z_int || sum_int"}
{"task_id": "HumanEval/93", "completion": "\n    let mut result = String::new();\n    for c in message.chars() {\n        if c.is_alphabetic() {\n            if c.is_lowercase() {\n                result.push(c.to_ascii_uppercase());\n            } else {\n                result.push(c.to_ascii_lowercase());\n            }\n        } else {\n            result.push(c);\n        }\n    }\n    result"}
{"task_id": "HumanEval/94", "completion": "\n    let mut max = 0;\n    for i in lst {\n        if i > max {\n            max = i;\n        }\n    }\n    let mut sum = 0;\n    let mut num = max;\n    while num > 0 {\n        let rem = num % 10;\n        if rem == 0 {\n            break;\n        }\n        if is_prime(rem as usize) {\n            sum += rem;\n        }\n        num /= 10;\n    }\n    sum"}
{"task_id": "HumanEval/95", "completion": "\n    let mut all_lower = true;\n    let mut all_upper = true;\n    for key in dict.keys() {\n        if key.chars().all(|c| c.is_lowercase()) == false {\n            all_lower = false;\n        }\n        if key.chars().all(|c| c.is_uppercase()) == false {\n            all_upper = false;\n        }\n    }\n    all_lower || all_upper"}
{"task_id": "HumanEval/96", "completion": "\n    let mut primes = Vec::new();\n    for i in 2..n {\n        if is_prime(i) {\n            primes.push(i);\n        }\n    }\n    primes"}
{"task_id": "HumanEval/97", "completion": "\n    let mut result = 0;\n    let mut a_digits = a.to_string().chars().rev();\n    let mut b_digits = b.to_string().chars().rev();\n    while let Some(a_digit) = a_digits.next() {\n        while let Some(b_digit) = b_digits.next() {\n            result += (a_digit as isize - '0' as isize) * (b_digit as isize - '0' as isize);\n        }\n    }\n    result"}
{"task_id": "HumanEval/98", "completion": "\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/99", "completion": "\n    let mut value: f64 = value.parse().unwrap();\n    if value.fract() == 0.0 {\n        value = value.round();\n    } else {\n        value = value.round() + 1.0;\n    }\n    value as isize"}
{"task_id": "HumanEval/100", "completion": "\n    let mut pile = vec![n];\n    let mut next = n;\n    while next > 0 {\n        next = if next % 2 == 0 { next / 2 } else { next * 3 + 1 };\n        pile.push(next);\n    }\n    pile"}
{"task_id": "HumanEval/101", "completion": "\n    let mut words = Vec::new();\n    let mut word = String::new();\n    for c in s.chars() {\n        if c == ',' || c =='' {\n            words.push(word);\n            word = String::new();\n        } else {\n            word.push(c);\n        }\n    }\n    words.push(word);\n    words"}
{"task_id": "HumanEval/102", "completion": "\n    let mut result = -1;\n    for i in x..=y {\n        if i % 2 == 0 {\n            result = i;\n        }\n    }\n    result"}
{"task_id": "HumanEval/104", "completion": "\n    x.into_iter()\n       .filter(|&x| x.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1))\n       .collect()"}
{"task_id": "HumanEval/105", "completion": "\n    let mut result: Vec<String> = Vec::new();\n    for i in arr {\n        if i >= 1 && i <= 9 {\n            result.push(match i {\n                1 => String::from(\"One\"),\n                2 => String::from(\"Two\"),\n                3 => String::from(\"Three\"),\n                4 => String::from(\"Four\"),\n                5 => String::from(\"Five\"),\n                6 => String::from(\"Six\"),\n                7 => String::from(\"Seven\"),\n                8 => String::from(\"Eight\"),\n                9 => String::from(\"Nine\"),\n                _ => String::from(\"\"),\n            });\n        }\n    }\n    result.reverse();\n    result"}
{"task_id": "HumanEval/106", "completion": "\n    let mut result = Vec::new();\n    for i in 1..n + 1 {\n        if i % 2 == 0 {\n            result.push(factorial(i));\n        } else {\n            result.push(sum(i));\n        }\n    }\n    result"}
{"task_id": "HumanEval/107", "completion": "\n    let mut even = 0;\n    let mut odd = 0;\n    for i in 1..=n {\n        let mut s = i.to_string();\n        let mut r = s.chars().rev().collect::<String>();\n        if s == r {\n            even += 1;\n        }\n        if s == r.chars().rev().collect::<String>() {\n            odd += 1;\n        }\n    }\n    (even, odd)"}
{"task_id": "HumanEval/108", "completion": "\n    let mut count = 0;\n    for i in arr {\n        let mut sum = 0;\n        let mut num = i;\n        while num > 0 {\n            sum += num % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/109", "completion": "\n    let mut arr = arr;\n    let mut i = 0;\n    while i < arr.len() - 1 {\n        if arr[i] > arr[i + 1] {\n            arr.swap(i, i + 1);\n            if i > 0 {\n                i -= 1;\n            }\n        } else {\n            i += 1;\n        }\n    }\n    true"}
{"task_id": "HumanEval/110", "completion": "\n    let mut lst1_iter = lst1.iter();\n    let mut lst2_iter = lst2.iter();\n    let mut lst1_val = lst1_iter.next();\n    let mut lst2_val = lst2_iter.next();\n    let mut lst1_even = false;\n    let mut lst2_even = false;\n    while lst1_val.is_some() && lst2_val.is_some() {\n        if lst1_val.unwrap() % 2 == 0 {\n            lst1_even = true;\n        }\n        if lst2_val.unwrap() % 2 == 0 {\n            lst2_even = true;\n        }\n        if lst1_even && lst2_even {\n            return String::from(\"YES\");\n        }\n        lst1_val = lst1_iter.next();\n        lst2_val = lst2_iter.next();\n    }\n    String::from(\"NO\")"}
{"task_id": "HumanEval/111", "completion": "\n    let mut map = HashMap::new();\n    let mut max = 0;\n    let mut max_key = String::from(\"\");\n    for c in test.chars() {\n        let count = map.entry(c.to_string()).or_insert(0);\n        *count += 1;\n        if *count > max {\n            max = *count;\n            max_key = c.to_string();\n        }\n    }\n    if max == 1 {\n        HashMap::from([(max_key, max)])\n    } else {\n        map\n    }"}
{"task_id": "HumanEval/112", "completion": "\n    let mut result = String::new();\n    for c in s.chars() {\n        if!c.to_string().eq(&c) {\n            result.push(c);\n        }\n    }\n    (result, result.eq(&result.chars().rev().collect::<String>()))"}
{"task_id": "HumanEval/113", "completion": "\n    let mut result = Vec::new();\n    for i in lst {\n        let mut count = 0;\n        for c in i.chars() {\n            if c.is_digit(10) {\n                if c.to_digit(10).unwrap() % 2 == 1 {\n                    count += 1;\n                }\n            }\n        }\n        result.push(format!(\"the number of odd elements {}n the str{}ng {} of the {}nput.\", count, i, i, i));\n    }\n    result"}
{"task_id": "HumanEval/114", "completion": "\n    let mut min_sum = nums[0];\n    let mut sum = nums[0];\n    for i in 1..nums.len() {\n        sum += nums[i];\n        if sum < min_sum {\n            min_sum = sum;\n        }\n        if sum < 0 {\n            sum = 0;\n        }\n    }\n    min_sum"}
{"task_id": "HumanEval/115", "completion": "\n    let mut ans = 0;\n    let mut buckets = vec![0; grid[0].len()];\n    for row in grid {\n        for (i, &bucket) in row.iter().enumerate() {\n            if bucket == 1 {\n                buckets[i] += 1;\n            }\n        }\n        ans += fill_buckets(&mut buckets, capacity);\n    }\n    ans"}
{"task_id": "HumanEval/116", "completion": "\n    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.to_string().chars().filter(|c| *c == '1').count();\n        let b_ones = b.to_string().chars().filter(|c| *c == '1').count();\n        if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr"}
{"task_id": "HumanEval/117", "completion": "\n    let mut words: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n    let mut consonants: isize = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n        } else {\n            if consonants == n {\n                words.push(word);\n            }\n            word = String::new();\n            consonants = 0;\n        }\n        if c.is_alphabetic() {\n            consonants += 1;\n        }\n    }\n    if consonants == n {\n        words.push(word);\n    }\n    words"}
{"task_id": "HumanEval/118", "completion": "\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut vowel_index = 0;\n    let mut vowel_found = false;\n    let mut vowel_found_index = 0;\n    let mut vowel_found_distance = 0;\n    let mut vowel_found_distance_index = 0;\n    let mut vowel_found_distance_index_2 = 0;\n    let mut vowel_found_distance_index_3 = 0;\n    let mut vowel_found_distance_index_4 = 0;\n    let mut vowel_found_distance_index_5 = 0;\n    let mut vowel_found_distance_index_6 = 0;\n    let mut vowel_found_distance_index_7 = 0;\n    let mut vowel_found_distance_index_8 = 0;\n    let mut vowel_found_distance_index_9 = 0;\n    let mut vowel_found_distance_index_10 = 0;\n    let mut vowel_found_distance_index_11 = 0;\n    let mut vowel_found_distance_index_12 = 0;\n    let mut vowel_found_distance_index_13 = 0;\n    let mut vowel_found_distance_index_14 = 0;\n    let mut vowel_found_distance_index_15 = 0;\n    let mut vowel_found_distance_index_16 = 0;\n    let mut vowel_found_distance_index_17 = 0;\n    let mut vowel_found_distance_index_18 = 0;\n    let mut vowel_found_distance_index_19 = 0;\n    let mut vowel_found_distance_index_20 = 0;\n    let mut vowel_found_distance_index_21 = 0;\n    let mut vowel_found_distance_index_22 = 0;\n    let mut vowel_found_distance_index_23 = 0;\n    let mut vowel_found_distance_index_24 = 0;\n    let mut vowel_found_distance_index_25 = 0;\n    let"}
{"task_id": "HumanEval/119", "completion": "\n    let mut stack: Vec<char> = Vec::new();\n    for c in lst[0].chars() {\n        if c == '(' {\n            stack.push(c);\n        } else {\n            if stack.is_empty() {\n                return String::from(\"No\");\n            }\n            stack.pop();\n        }\n    }\n    if stack.is_empty() {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"No\")\n    }"}
{"task_id": "HumanEval/120", "completion": "\n    let mut arr = arr;\n    arr.sort_by(|a, b| b.cmp(a));\n    arr.truncate(k as usize);\n    arr"}
{"task_id": "HumanEval/121", "completion": "\n    lst.iter()\n       .enumerate()\n       .filter(|(i, _)| i % 2 == 0)\n       .map(|(_, x)| x)\n       .fold(0, |acc, x| acc + x)"}
{"task_id": "HumanEval/122", "completion": "\n    let mut sum = 0;\n    for i in 0..k {\n        sum += arr[i as usize];\n    }\n    sum"}
{"task_id": "HumanEval/123", "completion": "\n    let mut result = Vec::new();\n    let mut current = n;\n    while current!= 1 {\n        if current % 2 == 0 {\n            current = current / 2;\n        } else {\n            current = 3 * current + 1;\n        }\n        result.push(current);\n    }\n    result"}
{"task_id": "HumanEval/124", "completion": "\n    let mut date_split = date.split(\"-\");\n    let month = date_split.next().unwrap().parse::<i32>().unwrap();\n    let day = date_split.next().unwrap().parse::<i32>().unwrap();\n    let year = date_split.next().unwrap().parse::<i32>().unwrap();\n    if month < 1 || month > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n        if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n            return false;\n        }\n    }\n    if day < 1 || day > 30 {\n        if month == 4 || month == 6 || month == 9 || month == 11 {\n            return false;\n        }\n    }\n    if day < 1 || day > 29 {\n        if month == 2 {\n            return false;\n        }\n    }\n    if year < 1900 || year > 2100 {\n        return false;\n    }\n    true"}
{"task_id": "HumanEval/126", "completion": "\n    let mut prev = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] < prev {\n            return false;\n        }\n        prev = lst[i];\n    }\n    true"}
{"task_id": "HumanEval/127", "completion": "\n    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    if start1 > end1 || start2 > end2 {\n        return String::from(\"NO\");\n    }\n    let mut start = start1.max(start2);\n    let mut end = end1.min(end2);\n    if start > end {\n        return String::from(\"NO\");\n    }\n    let mut length = end - start + 1;\n    let mut is_prime = true;\n    for i in 2..length {\n        if length % i == 0 {\n            is_prime = false;\n            break;\n        }\n    }\n    if is_prime {\n        return String::from(\"YES\");\n    }\n    String::from(\"NO\")"}
{"task_id": "HumanEval/128", "completion": "\n    let mut prod = 1;\n    let mut sum = 0;\n    for i in arr {\n        if i == 0 {\n            return Some(0);\n        }\n        if i < 0 {\n            prod *= -1;\n        }\n        sum += i * prod;\n    }\n    Some(sum)"}
{"task_id": "HumanEval/129", "completion": "\n    let n = grid.len();\n    let mut dp = vec![vec![0; n]; n];\n    for i in 0..n {\n        dp[i][0] = grid[i][0];\n    }\n    for j in 0..n {\n        dp[0][j] = grid[0][j];\n    }\n    for i in 1..n {\n        for j in 1..n {\n            let mut min = std::isize::MAX;\n            for x in -1..2 {\n                for y in -1..2 {\n                    if x == 0 && y == 0 {\n                        continue;\n                    }\n                    let nx = i as isize + x;\n                    let ny = j as isize + y;\n                    if nx >= 0 && nx < n as isize && ny >= 0 && ny < n as isize {\n                        min = min.min(dp[nx as usize][ny as usize]);\n                    }\n                }\n            }\n            dp[i][j] = min + grid[i][j];\n        }\n    }\n    let mut ans = vec![];\n    let mut i = n - 1;\n    let mut j = n - 1;\n    for _ in 0..k {\n        ans.push(dp[i][j]);\n        let mut min = std::isize::MAX;\n        for x in -1..2 {\n            for y in -1..2 {\n                if x == 0 && y == 0 {\n                    continue;\n                }\n                let nx = i as isize + x;\n                let ny = j as isize + y;\n                if nx >= 0 && nx < n as isize && ny >= 0 && ny < n as isize {\n                    min = min.min(dp[nx as usize][ny as usize]);\n                }\n            }\n        }\n        if dp[i][j] == min {\n            if dp[i][j] == dp[i - 1][j] {\n                i -= 1;\n            } else {\n                j -= 1;\n            }\n        } else {\n            if dp[i][j] == dp[i][j - 1] {\n                j -= 1;\n            } else {\n                i -= 1;\n            }\n        }\n    }\n    ans"}
{"task_id": "HumanEval/130", "completion": "\n    let mut v = vec![1, 3];\n    for i in 2..n as usize {\n        v.push(v[i - 1] + v[i - 2] + v[i - 3]);\n    }\n    v"}
{"task_id": "HumanEval/131", "completion": "\n    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n        result *= n % 10;\n        n /= 10;\n    }\n    result"}
{"task_id": "HumanEval/132", "completion": "\n    let mut stack = Vec::new();\n    for c in string.chars() {\n        match c {\n            '[' => stack.push(c),\n            ']' => {\n                if stack.is_empty() {\n                    return false;\n                }\n                stack.pop();\n            }\n            _ => (),\n        }\n    }\n    stack.is_empty()"}
{"task_id": "HumanEval/133", "completion": "\n    let mut sum = 0;\n    for i in lst {\n        sum += (i.ceil() as isize).pow(2);\n    }\n    sum"}
{"task_id": "HumanEval/134", "completion": "\n    let mut chars = txt.chars();\n    let mut last_char = chars.next_back();\n    while let Some(c) = last_char {\n        if c.is_alphabetic() {\n            return!c.is_alphanumeric();\n        }\n        last_char = chars.next_back();\n    }\n    false"}
{"task_id": "HumanEval/135", "completion": "\n    let mut arr = arr;\n    arr.sort();\n    let mut i = 0;\n    while i < arr.len() - 1 {\n        if arr[i] + 1 == arr[i + 1] {\n            return i as isize;\n        }\n        i += 1;\n    }\n    -1"}
{"task_id": "HumanEval/136", "completion": "\n    let mut largest = None;\n    let mut smallest = None;\n    for i in lst {\n        if i < 0 {\n            if largest.is_none() || i > largest.unwrap() {\n                largest = Some(i);\n            }\n        } else if i > 0 {\n            if smallest.is_none() || i < smallest.unwrap() {\n                smallest = Some(i);\n            }\n        }\n    }\n    (largest, smallest)"}
{"task_id": "HumanEval/138", "completion": "\n    let mut sum = 0;\n    for i in 1..n {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum == n"}
{"task_id": "HumanEval/139", "completion": "\n    let mut result = 1;\n    for i in 1..n + 1 {\n        result *= i;\n    }\n    result"}
{"task_id": "HumanEval/140", "completion": "\n    let mut result = String::new();\n    let mut prev_char ='';\n    for c in text.chars() {\n        if c =='' {\n            if prev_char =='' {\n                result.push('-');\n            } else {\n                result.push('_');\n            }\n        } else {\n            result.push(c);\n        }\n        prev_char = c;\n    }\n    result"}
{"task_id": "HumanEval/141", "completion": "\n    let mut file_name_chars = file_name.chars();\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut dot_char ='';\n    let mut dot_char_index = 0;\n    let mut dot_char_is_valid = false;\n    let mut file_name_is_valid = true;\n    let mut file_name_is_valid_string = String::from(\"Yes\");\n    let mut file_name_is_valid_string_chars = file_name_is_valid_string.chars();\n    let mut file_name_is_valid_string_char_index = 0;\n    let mut file_name_is_valid_string_char ='';\n    let mut file_name_is_valid_string_char_is_valid = false;\n    let mut file_name_is_valid_string_char_is_valid_string = String::from(\"Yes\");\n    let mut file_name_is_valid_string_char_is_valid_string_chars = file_name_is_valid_string_char_is_valid_string.chars();\n    let mut file_name_is_valid_string_char_is_valid_string_char_index = 0;\n    let mut file_name_is_valid_string_char_is_valid_string_char ='';\n    let mut file_name_is_valid_string_char_is_valid_string_char_is_valid = false;\n    let mut file_name_is_valid_string_char_is_valid_string_char_is_valid_string = String::from(\"Yes\");\n    let mut file_name_is_valid_string_char_is_valid_string_char_is_valid_string_chars = file_name_is_valid_string_char_is_valid_string_is_valid_string.chars();\n    let mut file_name_is_valid_string_char_is_valid_string_char_is_valid_string_char_index = 0;\n    let mut file_name_is_valid_string_char_is_valid_string_char_is_valid_string_char ='';\n    let mut file_name_is_valid_string_"}
{"task_id": "HumanEval/142", "completion": "\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x * x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/143", "completion": "\n    let mut result = String::new();\n    let mut words = sentence.split_whitespace();\n    while let Some(word) = words.next() {\n        if is_prime(word.len()) {\n            result.push_str(word);\n            result.push(' ');\n        }\n    }\n    result.trim().to_string()"}
{"task_id": "HumanEval/144", "completion": "\n    let x_num = x.split(\"/\").collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n    let x_den = x.split(\"/\").collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n    let n_num = n.split(\"/\").collect::<Vec<&str>>()[0].parse::<i32>().unwrap();\n    let n_den = n.split(\"/\").collect::<Vec<&str>>()[1].parse::<i32>().unwrap();\n    let result = x_num * n_den + x_den * n_num;\n    if result % x_den == 0 {\n        true\n    } else {\n        false\n    }"}
{"task_id": "HumanEval/145", "completion": "\n    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n        if a_sum == b_sum {\n            a.cmp(b)\n        } else {\n            a_sum.cmp(&b_sum)\n        }\n    });\n    nums"}
{"task_id": "HumanEval/146", "completion": "\n    let mut count = 0;\n    for num in nums {\n        if num > 10 && num % 10 == 1 && num % 100 % 10 == 1 {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/147", "completion": "\n    let mut a = Vec::new();\n    for i in 1..=n {\n        a.push(i * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..a.len() {\n        for j in i+1..a.len() {\n            for k in j+1..a.len() {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n                    count += 1;\n                }\n            }\n        }\n    }\n    count"}
{"task_id": "HumanEval/149", "completion": "\n    let mut sorted_list = lst.clone();\n    sorted_list.sort_by(|a, b| a.len().cmp(&b.len()));\n    sorted_list"}
{"task_id": "HumanEval/150", "completion": "\n    if is_prime(n) {\n        x\n    } else {\n        y\n    }"}
{"task_id": "HumanEval/151", "completion": "\n    let mut sum = 0;\n    for i in lst {\n        if i.is_integer() && i > 0 {\n            sum += i.powi(2) as isize;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/152", "completion": "\n    let mut result = Vec::new();\n    for (g, s) in guess.iter().zip(game.iter()) {\n        if g == s {\n            result.push(0);\n        } else {\n            result.push(g.abs() - s.abs());\n        }\n    }\n    result"}
{"task_id": "HumanEval/153", "completion": "\n    let mut strongest_extension = String::from(\"\");\n    let mut strongest_strength = 0;\n    for extension in extensions {\n        let mut strength = 0;\n        for c in extension.chars() {\n            if c.is_uppercase() {\n                strength += 1;\n            }\n        }\n        for c in extension.chars() {\n            if c.is_lowercase() {\n                strength -= 1;\n            }\n        }\n        if strength > strongest_strength {\n            strongest_extension = extension;\n            strongest_strength = strength;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)"}
{"task_id": "HumanEval/154", "completion": "\n    let mut a_chars = a.chars();\n    let mut b_chars = b.chars();\n    let mut a_char = a_chars.next();\n    let mut b_char = b_chars.next();\n    while a_char.is_some() && b_char.is_some() {\n        if a_char.unwrap() == b_char.unwrap() {\n            a_char = a_chars.next();\n            b_char = b_chars.next();\n        } else {\n            a_char = a_chars.next();\n            b_char = b_chars.next();\n            if a_char.is_none() {\n                a_char = a_chars.next();\n            }\n            if b_char.is_none() {\n                b_char = b_chars.next();\n            }\n        }\n    }\n    if b_char.is_none() {\n        return true;\n    }\n    false"}
{"task_id": "HumanEval/155", "completion": "\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num = num;\n    while num > 0 {\n        if num % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n        num /= 10;\n    }\n    (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "\n    let mut result = String::new();\n    let mut number = number;\n    let mut i = 0;\n    while number > 0 {\n        let (digit, roman) = match number % 10 {\n            1 => (1, \"I\"),\n            2 => (2, \"II\"),\n            3 => (3, \"III\"),\n            4 => (4, \"IV\"),\n            5 => (5, \"V\"),\n            6 => (6, \"VI\"),\n            7 => (7, \"VII\"),\n            8 => (8, \"VIII\"),\n            9 => (9, \"IX\"),\n            _ => (0, \"\"),\n        };\n        number /= 10;\n        for _ in 0..digit {\n            result.push_str(roman);\n        }\n        i += 1;\n    }\n    result"}
{"task_id": "HumanEval/157", "completion": "\n    a * a + b * b == c * c"}
{"task_id": "HumanEval/158", "completion": "\n    let mut max_word = String::from(\"\");\n    let mut max_count = 0;\n    for word in words {\n        let mut count = 0;\n        for c in word.chars() {\n            if word.chars().filter(|&x| x == &c).count() == 1 {\n                count += 1;\n            }\n        }\n        if count > max_count {\n            max_word = word;\n            max_count = count;\n        }\n    }\n    max_word"}
{"task_id": "HumanEval/159", "completion": "\n    let mut result = Vec::new();\n    let mut left = remaining - number;\n    if left < 0 {\n        left = 0;\n    }\n    result.push(left + need);\n    result.push(left);\n    result"}
{"task_id": "HumanEval/160", "completion": "\n    let mut result = operand[0];\n    for i in 1..operand.len() {\n        match operator[i-1].as_str() {\n            \"+\" => result += operand[i],\n            \"-\" => result -= operand[i],\n            \"*\" => result *= operand[i],\n            \"//\" => result /= operand[i],\n            \"**\" => result = result.pow(operand[i] as u32),\n            _ => {}\n        }\n    }\n    result"}
{"task_id": "HumanEval/161", "completion": "\n    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c);\n        }\n    }\n    result"}
{"task_id": "HumanEval/162", "completion": "\n    if text.is_empty() {\n        return None;\n    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n    let result = hasher.result_str();\n\n    Some(result)"}
{"task_id": "HumanEval/163", "completion": "\n    let mut result = Vec::new();\n    for i in a..b + 1 {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result"}
