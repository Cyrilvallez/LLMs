{"task_id": "HumanEval/0", "completion": "\n    let mut has_close = false;\n    for i in 0..numbers.len() {\n        for j in (i + 1)..numbers.len() {\n            let distance = (numbers[i] - numbers[j]).abs();\n            if distance < threshold {\n                has_close = true;\n                break;\n            }\n        }\n        if has_close {\n            break;\n        }\n    }\n    has_close"}
{"task_id": "HumanEval/1", "completion": "\n    let mut result: Vec<String> = Vec::new();\n    let mut current_group: String = String::new();\n    let mut depth = 0;\n\n    for c in paren_string.chars() {\n        match c {\n            '(' => {\n                depth += 1;\n                current_group.push('(');\n            }\n            ')' => {\n                depth -= 1;\n                current_group.push(')');\n                if depth == 0 {\n                    result.push(current_group.clone());\n                    current_group.clear();\n                }\n            }\n            _ => {\n                current_group.push(c);\n            }\n        }\n    }\n\n    result"}
{"task_id": "HumanEval/2", "completion": "\n    number - trunc(number)"}
{"task_id": "HumanEval/3", "completion": "\n    let mut balance = 0;\n    for operation in operations {\n        balance += operation;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false"}
{"task_id": "HumanEval/4", "completion": "\n    let mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n    let mut absolute_deviations = numbers.iter().map(|x| (x - mean).abs());\n    let mean_absolute_deviation = absolute_deviations.sum::<f64>() / numbers.len() as f64;\n    mean_absolute_deviation"}
{"task_id": "HumanEval/5", "completion": "\n    numbers.into_iter()\n        .zip(std::iter::repeat(delimeter).take(numbers.len()))\n        .map(|(x, y)| x)\n        .collect()"}
{"task_id": "HumanEval/6", "completion": "\n    let mut result = Vec::new();\n    let mut current_level = 0;\n    let mut previous_level = 0;\n    for c in paren_string.chars() {\n        match c {\n            '(' => {\n                current_level += 1;\n                previous_level = current_level;\n            }\n            ')' => {\n                current_level -= 1;\n                result.push(current_level);\n            }\n            _ => (),\n        }\n    }\n    result"}
{"task_id": "HumanEval/7", "completion": "\n    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n        .map(|s| s.to_owned())\n        .collect()"}
{"task_id": "HumanEval/8", "completion": "\n    (numbers.iter().sum(), numbers.iter().product())"}
{"task_id": "HumanEval/9", "completion": "\n    let mut result = Vec::new();\n    let mut max = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max {\n            max = numbers[i];\n            result.push(max);\n        } else {\n            result.push(max);\n        }\n    }\n    result"}
{"task_id": "HumanEval/10", "completion": "\n    let mut longest_palindrome = string.clone();\n    let mut prefix = string.clone();\n    let mut suffix = string.clone();\n    let mut result = string.clone();\n\n    // Find the longest palindromic suffix\n    for i in 0..string.len() {\n        let mut j = i;\n        while j > 0 && string[j - 1] == string[j] {\n            j -= 1;\n        }\n        longest_palindrome = string[i..j].to_owned();\n    }\n\n    // Append reverse of prefix to the end of the string\n    // to form a palindrome\n    prefix = string[.. longest_palindrome.len()].to_owned();\n    suffix = longest_palindrome.clone();\n    result = prefix + &suffix[..suffix.len() / 2] + suffix[suffix.len() / 2..].rev();\n\n    result"}
{"task_id": "HumanEval/11", "completion": "\n    a.chars()\n        .zip(b.chars())\n        .map(|(a, b)| match (a, b) {\n            ('0', '0') => '0',\n            ('0', '1') => '1',\n            ('1', '0') => '1',\n            ('1', '1') => '0',\n        })\n        .collect()"}
{"task_id": "HumanEval/12", "completion": "\n    strings.into_iter()\n        .max_by(|a, b| a.len().cmp(b.len()))\n        .map(|s| s.to_owned())"}
{"task_id": "HumanEval/13", "completion": "\n    if a == 0 || b == 0 {\n        return 0;\n    }\n    if a == b {\n        return a;\n    }\n    let mut a = a;\n    let mut b = b;\n    while a != b {\n        if a > b {\n            a -= b;\n        } else {\n            b -= a;\n        }\n    }\n    a"}
{"task_id": "HumanEval/14", "completion": "\n    let mut prefixes = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[..i].to_string());\n    }\n    prefixes"}
{"task_id": "HumanEval/15", "completion": "\n    (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\" \")"}
{"task_id": "HumanEval/16", "completion": "\n    let mut seen = HashSet::new();\n    for c in string.chars() {\n        if seen.contains(&c) {\n            continue;\n        }\n        seen.insert(c);\n    }\n    seen.len()"}
{"task_id": "HumanEval/17", "completion": "\n    let mut beats = Vec::new();\n    for note in music_string.split_whitespace() {\n        match note {\n            \"o\" => beats.push(4),\n            \"o|\" => beats.push(2),\n            \".|\" => beats.push(1),\n            _ => panic!(\"Invalid note\"),\n        }\n    }\n    beats"}
{"task_id": "HumanEval/18", "completion": "\n    string.iter().filter(|char| substring.contains(char)).count()"}
{"task_id": "HumanEval/19", "completion": "\n    let mut numbers = numbers.split_whitespace().collect::<Vec<&str>>();\n    numbers.sort_by(|a, b| a.parse::<i32>().unwrap().cmp(&b.parse::<i32>().unwrap()));\n    numbers.join(\" \")"}
{"task_id": "HumanEval/20", "completion": "\n    let mut closest_pair = (f64::MAX, f64::MAX);\n    let mut min_distance = f64::MAX;\n\n    for i in 0..numbers.len() {\n        for j in (i + 1)..numbers.len() {\n            let distance = (numbers[i] - numbers[j]).abs();\n            if distance < min_distance {\n                min_distance = distance;\n                closest_pair = (numbers[i], numbers[j]);\n            }\n        }\n    }\n\n    closest_pair"}
{"task_id": "HumanEval/21", "completion": "\n    let (min, max) = numbers.into_iter().min_max();\n    let range = max - min;\n    numbers.into_iter()\n        .map(|x| (x - min) / range)\n        .collect()"}
{"task_id": "HumanEval/23", "completion": "\n    string.chars().count()"}
{"task_id": "HumanEval/24", "completion": "\n    if n <= 1 {\n        return 1;\n    }\n\n    for i in (2..n).rev() {\n        if n % i == 0 {\n            return i - 1;\n        }\n    }\n\n    n"}
{"task_id": "HumanEval/25", "completion": "\n    let mut factors = vec![];\n    let mut current = n;\n    while current > 1 {\n        let mut i = 2;\n        while i * i <= current {\n            if current % i == 0 {\n                factors.push(i);\n                current /= i;\n                while current % i == 0 {\n                    factors.push(i);\n                    current /= i;\n                }\n                break;\n            }\n            i += 1;\n        }\n        if current > 1 {\n            factors.push(current);\n        }\n        current = 1;\n    }\n    factors"}
{"task_id": "HumanEval/26", "completion": "\n    let mut seen = HashSet::new();\n    numbers\n        .into_iter()\n        .filter(|x| {\n            seen.insert(x);\n            !seen.contains(x)\n        })\n        .collect()"}
{"task_id": "HumanEval/27", "completion": "\n    string\n        .chars()\n        .map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() })\n        .collect()"}
{"task_id": "HumanEval/28", "completion": "\n    strings.into_iter()\n             .map(|s| s.as_str())\n             .fold(String::new(), |acc, s| acc + s)"}
{"task_id": "HumanEval/29", "completion": "\n    strings\n        .into_iter()\n        .filter(|s| s.starts_with(prefix))\n        .map(|s| s.to_owned())\n        .collect()"}
{"task_id": "HumanEval/30", "completion": "\n    l.into_iter()\n        .filter(|x| *x > 0)\n        .collect()"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1 {\n        return false;\n    }\n\n    for i in 2..(n as f64).sqrt() as isize {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\n    true"}
{"task_id": "HumanEval/33", "completion": "\n    l.into_iter()\n        .filter(|x| *x % 3 != 0)\n        .chain(l.into_iter()\n            .filter(|x| *x % 3 == 0)\n            .sorted())\n        .collect()"}
{"task_id": "HumanEval/34", "completion": "\n    l.into_iter()\n        .filter(|x, i, self| i == 0 || *x != self[i - 1])\n        .collect()"}
{"task_id": "HumanEval/35", "completion": "\n    l.into_iter().max()"}
{"task_id": "HumanEval/36", "completion": "\n    (n / 11) * 2 + (n / 13) * 3"}
{"task_id": "HumanEval/37", "completion": "\n    l.into_iter()\n        .zip(l.into_iter().skip(1))\n        .map(|(a, b)| if a % 2 == 0 { b } else { a })\n        .collect()"}
{"task_id": "HumanEval/39", "completion": "\n    if n <= 1 {\n        return n;\n    }\n    let mut a = 0;\n    let mut b = 1;\n    let mut result = 0;\n    for i in 1..n {\n        result = a + b;\n        a = b;\n        b = result;\n        if is_prime(result) {\n            return result;\n        }\n    }\n    result"}
{"task_id": "HumanEval/40", "completion": "\n    // if the vector has less than 3 elements, it cannot contain a triplet that sums to zero\n    if l.len() < 3 {\n        return false;\n    }\n\n    // iterate over all possible triplets in the vector\n    for i in 0..l.len() - 2 {\n        let a = l[i];\n        let b = l[i + 1];\n        let c = l[i + 2];\n\n        // check if the triplet sums to zero\n        if a + b + c == 0 {\n            return true;\n        }\n    }\n\n    // if no triplet was found to sum to zero, return false\n    false"}
{"task_id": "HumanEval/41", "completion": "\n    // The number of collisions is equal to the number of pairs of cars that collide.\n    // Since there are n cars moving in each direction, there are n choose 2 pairs of cars that collide.\n    // Therefore, the number of collisions is:\n    n * (n - 1) / 2"}
{"task_id": "HumanEval/42", "completion": "\n    l.into_iter().map(|x| x + 1).collect()"}
{"task_id": "HumanEval/43", "completion": "\n    l.into_iter()\n        .combinations(2)\n        .any(|(a, b)| a + b == 0)"}
{"task_id": "HumanEval/44", "completion": "\n    let mut result = String::new();\n    let mut remainder = x;\n    let mut i = 0;\n    while remainder != 0 {\n        let (div, rem) = remainder.div_rem(base);\n        result.push((rem as char).to_string().chars().next().unwrap());\n        remainder = div;\n        i += 1;\n    }\n    result.reverse();\n    result"}
{"task_id": "HumanEval/45", "completion": "\n    (a * h) / 2.0"}
{"task_id": "HumanEval/46", "completion": "\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n\n    for i in (0..n).rev() {\n        d = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    }\n\n    return d;"}
{"task_id": "HumanEval/47", "completion": "\n    let mut l = l.into_iter().collect::<Vec<_>>();\n    l.sort_by(|a, b| a.cmp(b));\n    let (mid, _) = l.split_at(l.len() / 2);\n    mid.into_iter().next().unwrap() as f64"}
{"task_id": "HumanEval/48", "completion": "\n    text.chars().eq(text.chars().rev())"}
{"task_id": "HumanEval/49", "completion": "\n    if n == 0 {\n        1\n    } else {\n        let mut r = n % p;\n        while r == 0 {\n            r = n % p;\n            n = p;\n        }\n        r\n    }"}
{"task_id": "HumanEval/51", "completion": "\n    let mut result = String::new();\n    for c in text.chars() {\n        if c.is_vowel() {\n            continue;\n        }\n        result.push(c);\n    }\n    result"}
{"task_id": "HumanEval/52", "completion": "\n    l.into_iter().all(|x| x < t)"}
{"task_id": "HumanEval/53", "completion": "\n    x + y"}
{"task_id": "HumanEval/54", "completion": "\n    s0.chars().collect::<HashSet<_>>() == s1.chars().collect::<HashSet<_>>()"}
{"task_id": "HumanEval/55", "completion": "\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => fib(n-1) + fib(n-2),\n    }"}
{"task_id": "HumanEval/56", "completion": "\n    let mut open_brackets = 0;\n    for c in brackets.chars() {\n        match c {\n            '<' => open_brackets += 1,\n            '>' => open_brackets -= 1,\n            _ => (),\n        }\n        if open_brackets < 0 {\n            return false;\n        }\n    }\n    open_brackets == 0"}
{"task_id": "HumanEval/57", "completion": "\n    l.into_iter().zip(l.into_iter().skip(1)).all(|(a, b)| a <= b)"}
{"task_id": "HumanEval/58", "completion": "\n    let mut set1 = HashSet::new();\n    let mut set2 = HashSet::new();\n    let mut common = Vec::new();\n\n    for e in l1 {\n        set1.insert(e);\n    }\n\n    for e in l2 {\n        if set1.contains(&e) {\n            common.push(e);\n        }\n    }\n\n    common.sort();\n    common.dedup();\n\n    common"}
{"task_id": "HumanEval/59", "completion": "\n    if n <= 1 {\n        panic!(\"largest_prime_factor called with n <= 1\");\n    }\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return i - 1;\n        }\n        i += 1;\n    }\n    n"}
{"task_id": "HumanEval/60", "completion": "\n    (1..n).sum()"}
{"task_id": "HumanEval/61", "completion": "\n    let mut open_brackets = 0;\n    for c in brackets.chars() {\n        match c {\n            '(' => open_brackets += 1,\n            ')' => open_brackets -= 1,\n            _ => (),\n        }\n        if open_brackets < 0 {\n            return false;\n        }\n    }\n    open_brackets == 0"}
{"task_id": "HumanEval/62", "completion": "\n    let mut result = Vec::new();\n    for i in 0..xs.len() {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += xs[j] * (i - j);\n        }\n        result.push(sum);\n    }\n    result"}
{"task_id": "HumanEval/63", "completion": "\n    match n {\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n-1) + fibfib(n-2) + fibfib(n-3),\n    }"}
{"task_id": "HumanEval/64", "completion": "\n    let mut count = 0;\n    for c in s.chars() {\n        match c {\n            'a' | 'e' | 'i' | 'o' | 'u' => count += 1,\n            'y' if s.ends_with(c) => count += 1,\n            _ => (),\n        }\n    }\n    count"}
{"task_id": "HumanEval/65", "completion": "\n    let mut result = String::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut carry = 0;\n\n    while i < 10 {\n        j = (i + shift) % 10;\n        carry = x / (10 as isize).pow(j as isize);\n        result.push((carry % 10) as char);\n        x -= carry * (10 as isize).pow(j as isize);\n        i += 1;\n    }\n\n    if shift > i {\n        result.reverse();\n    }\n\n    result"}
{"task_id": "HumanEval/66", "completion": "\n    s.chars()\n        .filter(|c| c.is_uppercase())\n        .map(|c| c as isize)\n        .sum()"}
{"task_id": "HumanEval/67", "completion": "\n    let mut apples = 0;\n    let mut oranges = 0;\n    let mut mangoes = 0;\n\n    for word in s.split_whitespace() {\n        match word {\n            \"apples\" => apples += 1,\n            \"oranges\" => oranges += 1,\n            _ => mangoes += 1,\n        }\n    }\n\n    let total = apples + oranges + mangoes;\n\n    if total > n {\n        panic!(\"Invalid input\");\n    }\n\n    n - (apples + oranges)"}
{"task_id": "HumanEval/68", "completion": "\n    let mut smallest = arr[0];\n    let mut smallest_index = 0;\n    for (i, node) in arr.iter().enumerate() {\n        if *node % 2 == 0 {\n            if smallest == 0 || *node < smallest {\n                smallest = *node;\n                smallest_index = i;\n            }\n        }\n    }\n    vec![smallest, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "\n    let mut max_freq = 0;\n    let mut max_val = 0;\n    for (i, val) in lst.iter().enumerate() {\n        let freq = lst.iter().filter(|x| *x == val).count();\n        if freq > max_freq {\n            max_freq = freq;\n            max_val = val;\n        }\n    }\n    max_val"}
{"task_id": "HumanEval/70", "completion": "\n    lst.into_iter()\n        .sorted(|a, b| {\n            if a < b {\n                // Start with the minimum value\n                a\n            } else {\n                // Then maximum of the remaining integers\n                b\n            }\n        })\n        .collect()"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c && a + c > b && b + c > a {\n        let s = (a * b * c) as f64;\n        s * 0.5\n    } else {\n        -1.0\n    }"}
{"task_id": "HumanEval/72", "completion": "\n    // Check if the vector is balanced\n    if !is_palindromic(&q) {\n        return false;\n    }\n\n    // Check if the sum of the elements is less than or equal to the maximum weight\n    let sum = q.iter().sum();\n    if sum > w {\n        return false;\n    }\n\n    true"}
{"task_id": "HumanEval/73", "completion": "\n    let mut min_changes = std::usize::MAX;\n    let mut min_index = 0;\n    for i in 0..arr.len() {\n        let mut changes = 0;\n        for j in (i..arr.len()).rev() {\n            if arr[j] != arr[i] {\n                changes += 1;\n                if changes <= min_changes {\n                    min_changes = changes;\n                    min_index = i;\n                }\n                break;\n            }\n        }\n    }\n    min_changes"}
{"task_id": "HumanEval/74", "completion": "\n    let mut res = Vec::new();\n    let mut count = 0;\n    for s in lst1 {\n        let mut found = false;\n        for t in lst2 {\n            if s.chars().count() < t.chars().count() {\n                found = true;\n                break;\n            }\n        }\n        if !found {\n            res.push(s);\n            count += 1;\n        }\n    }\n    if count == 0 {\n        return lst2.clone();\n    }\n    res"}
{"task_id": "HumanEval/75", "completion": "\n    if a < 100 {\n        let mut is_prime = true;\n        for i in 2..10 {\n            if a % i == 0 {\n                is_prime = false;\n                break;\n            }\n        }\n        if is_prime {\n            return false;\n        }\n        let mut factors = Vec::new();\n        for i in 2..10 {\n            if a % i == 0 {\n                factors.push(i);\n            }\n        }\n        factors.sort();\n        factors.dedup();\n        return factors.len() == 3 && factors[0] * factors[1] * factors[2] == a;\n    }\n    false"}
{"task_id": "HumanEval/76", "completion": "\n    x == n.pow(isize::MAX)"}
{"task_id": "HumanEval/77", "completion": "\n    a.is_cube()"}
{"task_id": "HumanEval/78", "completion": "\n    let mut count = 0;\n    for c in num.chars() {\n        match c {\n            '2' | '3' | '5' | '7' | 'B' | 'D' => count += 1,\n            _ => (),\n        }\n    }\n    count"}
{"task_id": "HumanEval/79", "completion": "\n    let mut binary = String::new();\n    let mut i = decimal;\n    while i > 0 {\n        let rem = i % 2;\n        binary.push(if rem == 0 { '0' } else { '1' });\n        i = i / 2;\n    }\n    binary.push('d');\n    binary.push('b');\n    binary.reverse();\n    binary"}
{"task_id": "HumanEval/80", "completion": "\n    s.len() >= 3 && s.chars().windows(3).all(|w| w[0] != w[1] && w[1] != w[2])"}
{"task_id": "HumanEval/81", "completion": "\n    let grade_to_letter = |g| match g {\n        4.0 => \"A+\",\n        g if g > 3.7 => \"A\",\n        g if g > 3.3 => \"A-\",\n        g if g > 3.0 => \"B+\",\n        g if g > 2.7 => \"B\",\n        g if g > 2.3 => \"B-\",\n        g if g > 2.0 => \"C+\",\n        g if g > 1.7 => \"C\",\n        g if g > 1.3 => \"C-\",\n        g if g > 1.0 => \"D+\",\n        g if g > 0.7 => \"D\",\n        g if g > 0.0 => \"D-\",\n        0.0 => \"E\",\n        _ => panic!(\"Invalid grade\"),\n    };\n\n    grades.into_iter()\n        .map(grade_to_letter)\n        .collect()"}
{"task_id": "HumanEval/82", "completion": "\n    let length = string.chars().count();\n    let mut is_prime = true;\n    for i in 2..(length as f64).sqrt() as usize {\n        if length % i == 0 {\n            is_prime = false;\n            break;\n        }\n    }\n    is_prime"}
{"task_id": "HumanEval/83", "completion": "\n    // The number of digits in the number is n.\n    // The number of digits in the number that start with 1 is n-1.\n    // The number of digits in the number that end with 1 is n-1.\n    // The total number of numbers that start or end with 1 is n-1 + (n-1) = 2 * (n-1)\n    return 2 * (n - 1);"}
{"task_id": "HumanEval/84", "completion": "\n    let mut binary = String::new();\n    let mut sum = 0;\n    while N > 0 {\n        sum += N % 2;\n        binary.push((N % 2).to_string().as_str());\n        N /= 2;\n    }\n    binary.reverse();\n    binary"}
{"task_id": "HumanEval/85", "completion": "\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/86", "completion": "\n    let mut words: Vec<String> = s.split_whitespace().map(|word| word.to_owned()).collect();\n    words.sort_by(|a, b| a.chars().collect::<Vec<_>>().cmp(b.chars().collect::<Vec<_>>()));\n    words.into_iter()\n        .map(|word| word.chars().collect::<Vec<_>>().iter().sorted().collect::<String>())\n        .collect::<Vec<_>>()\n        .join(\" \")"}
{"task_id": "HumanEval/87", "completion": "\n    let mut result: Vec<(isize, isize)> = Vec::new();\n    for row in lst {\n        let mut row_result: Vec<(isize, isize)> = Vec::new();\n        for (i, col) in row.iter().enumerate() {\n            if *col == x {\n                row_result.push((i as isize, row.len() - i - 1));\n            }\n        }\n        result.push(row_result);\n    }\n    result"}
{"task_id": "HumanEval/88", "completion": "\n    let mut sorted = array.clone();\n    match sorted.iter().fold(0, |acc, x| acc + x) % 2 {\n        0 => sorted.sort_by(|a, b| a.cmp(b)),\n        1 => sorted.sort_by(|a, b| b.cmp(a)),\n    }\n    sorted"}
{"task_id": "HumanEval/89", "completion": "\n    let mut result = String::new();\n    for c in s.chars() {\n        let shifted = c as i32 - 2 * 2;\n        result.push((shifted as char).unwrap());\n    }\n    result"}
{"task_id": "HumanEval/90", "completion": "\n    if lst.len() < 2 {\n        return None;\n    }\n    let mut smallest = lst[0];\n    let mut second_smallest = lst[1];\n    for i in 1..lst.len() {\n        if lst[i] < smallest {\n            second_smallest = smallest;\n            smallest = lst[i];\n        }\n    }\n    Some(second_smallest)"}
{"task_id": "HumanEval/91", "completion": "\n    let mut count = 0;\n    for sentence in S.split_whitespace() {\n        if sentence.starts_with(\"I\") {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/92", "completion": "\n    if (x == y + z) || (y == x + z) || (z == x + y) {\n        return true;\n    }\n    return false;"}
{"task_id": "HumanEval/93", "completion": "\n    let mut result = String::new();\n    for c in message.chars() {\n        match c {\n            'a' => 'z',\n            'b' => 'y',\n            'c' => 'x',\n            'd' => 'w',\n            'e' => 'v',\n            'f' => 'u',\n            'g' => 't',\n            'h' => 's',\n            'i' => 'r',\n            'j' => 'q',\n            'k' => 'p',\n            'l' => 'o',\n            'm' => 'n',\n            'n' => 'm',\n            'o' => 'l',\n            'p' => 'k',\n            'q' => 'j',\n            'r' => 'i',\n            's' => 'h',\n            't' => 'g',\n            'u' => 'f',\n            'v' => 'e',\n            'w' => 'd',\n            'x' => 'c',\n            'y' => 'b',\n            'z' => 'a',\n            _ => c,\n        }\n        result.push(c);\n    }\n    result"}
{"task_id": "HumanEval/94", "completion": "\n    let mut max_prime = 0;\n    let mut sum_digits = 0;\n    for num in lst {\n        if is_prime(num) {\n            if num > max_prime {\n                max_prime = num;\n                sum_digits = 0;\n            }\n            sum_digits += num.digits().sum();\n        }\n    }\n    sum_digits"}
{"task_id": "HumanEval/95", "completion": "\n    let mut all_keys_are_lower = true;\n    let mut all_keys_are_upper = true;\n    for (key, value) in dict.iter() {\n        if key.is_lower() {\n            all_keys_are_upper = false;\n        } else if key.is_upper() {\n            all_keys_are_lower = false;\n        }\n    }\n    return all_keys_are_lower || all_keys_are_upper;"}
{"task_id": "HumanEval/96", "completion": "\n    (2..n).filter(|x| is_prime(x)).collect()"}
{"task_id": "HumanEval/97", "completion": "\n    // Your code here\n    let (a_unit, a_tens) = a.div_rem(10);\n    let (b_unit, b_tens) = b.div_rem(10);\n    (a_unit * b_unit) + (a_tens * b_tens)"}
{"task_id": "HumanEval/98", "completion": "\n    s.iter()\n        .filter(|c| c.is_uppercase() && s.index(c) % 2 == 0)\n        .count()"}
{"task_id": "HumanEval/99", "completion": "\n    let mut value = value.parse::<f64>().unwrap();\n    if value < 0.0 {\n        value = -value;\n    }\n    let floor = value.floor() as isize;\n    let ceil = floor + 1;\n    let distance_to_floor = (value - floor as f64).abs();\n    let distance_to_ceil = (ceil as f64 - value).abs();\n    if distance_to_floor <= distance_to_ceil {\n        floor\n    } else {\n        ceil\n    }"}
{"task_id": "HumanEval/100", "completion": "\n    let mut pile = vec![n];\n    let mut i = 1;\n    while i < n {\n        let next_level = if n % 2 == 0 {\n            i * 2\n        } else {\n            i * 2 + 1\n        };\n        pile.push(next_level);\n        i += 1;\n    }\n    pile"}
{"task_id": "HumanEval/101", "completion": "\n    s.split_whitespace()\n        .map(|word| word.to_owned())\n        .collect()"}
{"task_id": "HumanEval/102", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/104", "completion": "\n    let mut result = Vec::new();\n    for &i in x {\n        let mut is_even = false;\n        for j in 1..10 {\n            if i % j == 0 {\n                is_even = true;\n                break;\n            }\n        }\n        if !is_even {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result"}
{"task_id": "HumanEval/105", "completion": "\n    let mut result = vec![];\n    for num in arr {\n        if num >= 1 && num <= 9 {\n            result.push(match num {\n                1 => \"One\".to_string(),\n                2 => \"Two\".to_string(),\n                3 => \"Three\".to_string(),\n                4 => \"Four\".to_string(),\n                5 => \"Five\".to_string(),\n                6 => \"Six\".to_string(),\n                7 => \"Seven\".to_string(),\n                8 => \"Eight\".to_string(),\n                9 => \"Nine\".to_string(),\n                _ => panic!(\"Invalid number\"),\n            });\n        }\n    }\n    result.sort_by(|a, b| b.len().cmp(&a.len()));\n    result"}
{"task_id": "HumanEval/106", "completion": "\n    let mut result = Vec::new();\n    for i in 1..n {\n        if i % 2 == 0 {\n            result.push(i.factorial());\n        } else {\n            result.push(1 + i - 1);\n        }\n    }\n    result"}
{"task_id": "HumanEval/107", "completion": "\n    let mut even = 0;\n    let mut odd = 0;\n    for i in 1..n {\n        if i.is_palindrome() {\n            if i % 2 == 0 {\n                even += 1;\n            } else {\n                odd += 1;\n            }\n        }\n    }\n    (even, odd)"}
{"task_id": "HumanEval/108", "completion": "\n    arr.iter()\n        .filter(|x| x.abs().digits().any(|d| d > 0))\n        .count()"}
{"task_id": "HumanEval/109", "completion": "\n    // if the vector is empty, return true\n    if arr.is_empty() {\n        return true;\n    }\n\n    // check if the vector is already sorted in non-decreasing order\n    if arr.into_iter().all(|a, b| a <= b) {\n        return true;\n    }\n\n    // perform right shift operation\n    let mut new_arr = arr.clone();\n    new_arr.rotate_right(1);\n\n    // check if the new vector is sorted in non-decreasing order\n    if new_arr.into_iter().all(|a, b| a <= b) {\n        return true;\n    } else {\n        return move_one_ball(new_arr)\n    }"}
{"task_id": "HumanEval/110", "completion": "\n    // Your code here"}
{"task_id": "HumanEval/111", "completion": "\n    let mut histogram = HashMap::new();\n    let mut max_count = 0;\n    let mut max_key = String::new();\n\n    for c in test.chars() {\n        let key = c.to_string();\n        let count = histogram.get(&key).unwrap_or(&0) + 1;\n        histogram.insert(key, count);\n        if count > max_count {\n            max_count = count;\n            max_key = key;\n        }\n    }\n\n    histogram"}
{"task_id": "HumanEval/112", "completion": "\n    let mut result = s.clone();\n    for c in c.chars() {\n        result = result.replace(c, \"\");\n    }\n    (result, result.is_palindrome())"}
{"task_id": "HumanEval/113", "completion": "\n    lst.into_iter()\n        .map(|s| s.chars().filter(|c| c % 2 == 1).count())\n        .map(|n| format!(\"the number of odd elements {}n the str{}ng {} of the {}nput.\", n, n, n, n))\n        .collect()"}
{"task_id": "HumanEval/114", "completion": "\n    let mut min = nums.iter().sum::<isize>();\n    for i in 1..nums.len() {\n        min = min.min(nums[i..].iter().sum::<isize>());\n    }\n    min"}
{"task_id": "HumanEval/115", "completion": "\n    let mut result = 0;\n    let mut current = Vec::new();\n    let mut next = Vec::new();\n    let mut buckets = Vec::new();\n    let mut filled = Vec::new();\n    let mut row = 0;\n    let mut col = 0;\n    let mut max_filled = 0;\n\n    // Initialize buckets and filled arrays\n    for _ in 0..capacity {\n        buckets.push(Vec::new());\n        filled.push(Vec::new());\n    }\n\n    // Loop through each row of the grid\n    for row in 0..grid.len() {\n        // Loop through each column of the grid\n        for col in 0..grid[row].len() {\n            // If the current cell is 1, add it to the current bucket\n            if grid[row][col] == 1 {\n                buckets[current.len() - 1].push(col);\n            }\n\n            // If the current bucket is full, move on to the next bucket\n            if buckets[current.len() - 1].len() == capacity {\n                current.push(buckets.len() - 1);\n                next.push(buckets.len());\n                buckets.push(Vec::new());\n            }\n        }\n\n        // If the current row is filled, mark it as filled\n        if buckets[current.len() - 1].len() == capacity {\n            filled.push(row);\n        }\n    }\n\n    // Loop through the filled rows and calculate the maximum number of times the buckets need to be lowered\n    for row in filled {\n        let mut count = 0;\n        for col in 0..grid[row].len() {\n            if grid[row][col] == 1 {\n                count += 1;\n            }\n        }\n        result += count;\n    }\n\n    result"}
{"task_id": "HumanEval/116", "completion": "\n    arr.sort_by(|a, b| {\n        let (a_ones, a_decimal) = count_ones(a);\n        let (b_ones, b_decimal) = count_ones(b);\n        match a_ones.cmp(&b_ones) {\n            std::cmp::Ordering::Equal => a_decimal.cmp(&b_decimal),\n            ordering => ordering,\n        }\n    })"}
{"task_id": "HumanEval/117", "completion": "\n    let mut result: Vec<String> = Vec::new();\n    let mut current_word = String::new();\n    let mut consonant_count = 0;\n\n    for c in s.chars() {\n        if c.is_consonant() {\n            consonant_count += 1;\n            if consonant_count == n {\n                result.push(current_word.clone());\n                current_word.clear();\n                consonant_count = 0;\n            }\n        } else {\n            consonant_count = 0;\n        }\n        current_word.push(c);\n    }\n\n    if consonant_count == n {\n        result.push(current_word.clone());\n    }\n\n    result"}
{"task_id": "HumanEval/118", "completion": "\n    let mut closest_vowel = String::new();\n    let mut closest_index = 0;\n\n    for (i, c) in word.chars().enumerate() {\n        if c.is_vowel() {\n            if closest_index == 0 || closest_index > i {\n                closest_vowel = c.to_string();\n                closest_index = i;\n            }\n        }\n    }\n\n    closest_vowel"}
{"task_id": "HumanEval/119", "completion": "\n    // base case: if the vector is empty, return \"Yes\"\n    if lst.is_empty() {\n        return \"Yes\".to_string();\n    }\n\n    // check if the first string in the vector is empty\n    let first = lst[0].as_str();\n    if first.is_empty() {\n        // if the first string is empty, return \"Yes\"\n        return \"Yes\".to_string();\n    }\n\n    // check if the second string in the vector is empty\n    let second = lst[1].as_str();\n    if second.is_empty() {\n        // if the second string is empty, return \"No\"\n        return \"No\".to_string();\n    }\n\n    // check if the first string ends with a close parenthesis\n    if first.ends_with(')') {\n        // if the first string ends with a close parenthesis, check if the\n        // second string starts with an open parenthesis\n        if second.starts_with('(') {\n            // if the second string starts with an open parenthesis, return\n            // \"Yes\"\n            return \"Yes\".to_string();\n        } else {\n            // if the second string does not start with an open parenthesis,\n            // return \"No\"\n            return \"No\".to_string();\n        }\n    } else {\n        // if the first string does not end with a close parenthesis, check if\n        // the second string ends with a close parenthesis\n        if second.ends_with(')') {\n            // if the second string ends with a close parenthesis, check if the\n            // first string starts with an open parenthesis\n            if first.starts_with('(') {\n                // if the first string starts with an open parenthesis, return\n                // \"Yes\"\n                return \"Yes\".to_string();\n            } else {\n                // if the first string does not start with an open parenthesis,\n                // return \"No\"\n                return \"No\".to_string();\n            }\n        } else {\n            // if the second string does not end with a close parenthesis,\n            // return \"No\"\n            return \"No\".to"}
{"task_id": "HumanEval/120", "completion": "\n    arr.into_iter()\n        .sorted()\n        .take(k)\n        .collect()"}
{"task_id": "HumanEval/121", "completion": "\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && *x % 2 != 0 {\n            sum += *x;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/122", "completion": "\n    let mut sum = 0;\n    for i in 0..k {\n        let x = arr[i];\n        if x >= 100 {\n            sum += x / 100;\n        } else {\n            sum += x;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/123", "completion": "\n    let mut sequence = vec![n];\n    let mut i = 1;\n    while sequence[i - 1] != 1 {\n        if sequence[i - 1] % 2 == 0 {\n            sequence.push(sequence[i - 1] / 2);\n        } else {\n            sequence.push(3 * sequence[i - 1] + 1);\n        }\n        i += 1;\n    }\n    sequence.sort();\n    sequence.dedup();\n    sequence"}
{"task_id": "HumanEval/124", "completion": "\n    // Step 1: Check if the date string is not empty\n    if date.is_empty() {\n        return false;\n    }\n\n    // Step 2: Check if the number of days is valid\n    let parts = date.split('-').collect::<Vec<&str>>();\n    let day = parts[1].parse::<u32>().unwrap();\n    let month = parts[0].parse::<u32>().unwrap();\n    let year = parts[2].parse::<u32>().unwrap();\n\n    if month < 1 || month > 12 {\n        return false;\n    }\n\n    let num_days = match month {\n        1 | 3 | 5 | 7 | 8 | 10 | 12 => 31,\n        4 | 6 | 9 | 11 => 30,\n        2 => 29,\n        _ => 31,\n    };\n\n    if day < 1 || day > num_days {\n        return false;\n    }\n\n    // Step 3: Check if the month is valid\n    if month < 1 || month > 12 {\n        return false;\n    }\n\n    // Step 4: Check if the date is in the format: mm-dd-yyyy\n    if !date.starts_with(\"mm-\") || !date.ends_with(\"-yyyy\") {\n        return false;\n    }\n\n    true"}
{"task_id": "HumanEval/126", "completion": "\n    // Base case: empty vector is sorted\n    if lst.is_empty() {\n        return true;\n    }\n\n    // Check if the vector has any duplicates\n    let mut seen = HashSet::new();\n    for num in lst {\n        if seen.contains(&num) {\n            return false;\n        }\n        seen.insert(num);\n    }\n\n    // If there are no duplicates, check if the vector is sorted\n    // using a simple linear scan\n    let mut prev = lst[0];\n    for num in lst[1..].iter() {\n        if *num < prev {\n            return false;\n        }\n        prev = *num;\n    }\n\n    true"}
{"task_id": "HumanEval/127", "completion": "\n    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\n    // If the intervals don't intersect, return \"NO\"\n    if start1 > end2 || start2 > end1 {\n        return \"NO\".to_string();\n    }\n\n    // Calculate the length of the intersection\n    let intersection_len = std::cmp::min(end1, end2) - std::cmp::max(start1, start2) + 1;\n\n    // Check if the length is a prime number\n    if intersection_len == 1 || intersection_len % 2 == 0 {\n        \"NO\".to_string()\n    } else {\n        \"YES\".to_string()\n    }"}
{"task_id": "HumanEval/128", "completion": "\n    match arr.len() {\n        0 => None,\n        _ => Some(arr.into_iter().map(|x| x * (if x > 0 { 1 } else if x < 0 { -1 } else { 0 })).sum()),\n    }"}
{"task_id": "HumanEval/129", "completion": "\n    let mut min_path = vec![];\n    let mut min_cost = std::isize::MAX;\n    let mut current = vec![];\n    let mut next = vec![];\n    let mut visited = vec![];\n    let mut cost = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut found = false;\n\n    // Initialize the starting cell\n    current.push(grid[0][0]);\n    visited.push(grid[0][0]);\n    cost += grid[0][0];\n\n    // Loop until we find a path of length k\n    while i < k {\n        // Find the next cell to visit\n        for j = 0; j < grid[0].len(); j += 1 {\n            if !visited.contains(&grid[i][j]) {\n                // Calculate the cost of visiting this cell\n                let mut new_cost = cost + grid[i][j];\n                new_cost += min_cost - cost;\n\n                // Check if this cell is part of a shorter path\n                if new_cost < min_cost {\n                    min_cost = new_cost;\n                    min_path = current.clone();\n                    found = true;\n                }\n\n                // Add this cell to the current path\n                current.push(grid[i][j]);\n                visited.push(grid[i][j]);\n\n                // If we've found a path of length k, break\n                if i + 1 >= k {\n                    break;\n                }\n            }\n        }\n\n        // If we didn't find a path of length k, backtrack\n        if !found {\n            current.pop();\n            visited.pop();\n            cost -= grid[i][j];\n        }\n\n        i += 1;\n    }\n\n    // If we found a path of length k, return it\n    if found {\n        return min_path;\n    }\n\n    // Otherwise, return an empty vector\n    vec![]"}
{"task_id": "HumanEval/130", "completion": "\n    let mut result = vec![1; n as usize + 1];\n    result[0] = 3;\n    for i in 1..n {\n        if i % 2 == 0 {\n            result[i] = 1 + i / 2;\n        } else {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    result"}
{"task_id": "HumanEval/131", "completion": "\n    let mut result = 0;\n    let mut i = 0;\n    while i < n {\n        if n % 2 == 1 {\n            result *= n % 10;\n        }\n        i += 1;\n        n /= 10;\n    }\n    result"}
{"task_id": "HumanEval/132", "completion": "\n    let mut stack = Vec::new();\n    let mut result = false;\n\n    for c in string.chars() {\n        match c {\n            '[' => {\n                stack.push(true);\n            }\n            ']' => {\n                stack.pop();\n            }\n            _ => panic!(\"Invalid character in input string\"),\n        }\n\n        if stack.is_empty() {\n            result = false;\n        } else if stack.last() == Some(&true) {\n            result = true;\n        }\n    }\n\n    result"}
{"task_id": "HumanEval/133", "completion": "\n    lst.iter()\n        .map(|x| (x.ceil() as isize) * (x.ceil() as isize))\n        .sum()"}
{"task_id": "HumanEval/134", "completion": "\n    let last_char = txt.chars().last();\n    let is_alpha = last_char.is_alphanumeric();\n    let is_not_word = !txt.contains(last_char.to_string());\n    is_alpha && is_not_word"}
{"task_id": "HumanEval/135", "completion": "\n    let mut max = -1;\n    for i in 1..arr.len() {\n        if arr[i] >= arr[i - 1] {\n            max = i - 1;\n        }\n    }\n    max"}
{"task_id": "HumanEval/136", "completion": "\n    let mut largest_negative = None;\n    let mut smallest_positive = None;\n\n    for num in lst {\n        if num < 0 {\n            largest_negative = Some(num);\n        } else if num > 0 {\n            smallest_positive = Some(num);\n        }\n    }\n\n    (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/138", "completion": "\n    // Check if n is even\n    if n % 2 != 0 {\n        return false;\n    }\n\n    // Check if n can be written as the sum of 4 positive even numbers\n    let mut sum = 0;\n    for i in 0..4 {\n        sum += 2 * i;\n        if sum > n {\n            break;\n        }\n    }\n\n    sum == n"}
{"task_id": "HumanEval/139", "completion": "\n    if n <= 1 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in (1..n).rev() {\n        result *= i * (n - i + 1);\n    }\n    result"}
{"task_id": "HumanEval/140", "completion": "\n    let mut result = text.replace(\" \", \"_\");\n    result = result.replace(\"__\", \"-\");\n    result"}
{"task_id": "HumanEval/141", "completion": "\n    // Check if the file name has more than three digits\n    if file_name.chars().filter(|c| c >= '0' && c <= '9').count() > 3 {\n        return \"No\".to_string();\n    }\n\n    // Check if the file name contains exactly one dot\n    if file_name.find('.').unwrap() != file_name.len() - 1 {\n        return \"No\".to_string();\n    }\n\n    // Check if the substring before the dot is not empty and starts with a letter\n    let before_dot = &file_name[..file_name.find('.').unwrap()];\n    if before_dot.is_empty() || !before_dot.chars().any(|c| c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z') {\n        return \"No\".to_string();\n    }\n\n    // Check if the substring after the dot is one of the allowed extensions\n    let after_dot = &file_name[file_name.find('.').unwrap() + 1..];\n    match after_dot {\n        \"txt\" | \"exe\" | \"dll\" => \"Yes\".to_string(),\n        _ => \"No\".to_string(),\n    }"}
{"task_id": "HumanEval/142", "completion": "\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        match i % 3 {\n            0 => sum += x * x,\n            1 => sum += x * x * x,\n            _ => sum += x,\n        }\n    }\n    sum"}
{"task_id": "HumanEval/143", "completion": "\n    let mut words = sentence.split_whitespace();\n    let mut prime_words = Vec::new();\n\n    for word in words {\n        if is_prime(word.len()) {\n            prime_words.push(word.to_owned());\n        }\n    }\n\n    prime_words.join(\" \")"}
{"task_id": "HumanEval/144", "completion": "\n    let x = x.split(\"/\").map(|s| s.parse().unwrap()).collect::<Vec<_>>();\n    let n = n.split(\"/\").map(|s| s.parse().unwrap()).collect::<Vec<_>>();\n    let (x_num, x_den) = x[0], x[1];\n    let (n_num, n_den) = n[0], n[1];\n    let gcd = gcd(x_den, n_den);\n    let x_num_simplified = x_num / gcd;\n    let n_num_simplified = n_num / gcd;\n    let simplified = x_num_simplified * n_den == n_num_simplified * x_den;\n    simplified"}
{"task_id": "HumanEval/145", "completion": "\n    let mut res = nums.clone();\n    res.sort_by(|a, b| {\n        let (a_sum, b_sum) = (a.digits().sum(), b.digits().sum());\n        if a_sum == b_sum {\n            a.index() - b.index()\n        } else {\n            a_sum.cmp(b_sum)\n        }\n    });\n    res"}
{"task_id": "HumanEval/146", "completion": "\n    nums.into_iter()\n        .filter(|x| *x > 10 && (x as i32).digits().all(|d| d % 2 == 1))\n        .count()"}
{"task_id": "HumanEval/147", "completion": "\n    let mut a = (0..n).map(|i| i * i - i + 1).collect::<Vec<_>>();\n    let mut count = 0;\n    for i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n                    count += 1;\n                }\n            }\n        }\n    }\n    count"}
{"task_id": "HumanEval/149", "completion": "\n    // Step 1: Remove strings with odd lengths\n    let mut new_lst = lst.into_iter()\n        .filter(|s| s.chars().count() % 2 == 0)\n        .map(|s| s.to_string())\n        .collect::<Vec<_>>();\n\n    // Step 2: Sort the list by length and then alphabetically\n    new_lst.sort_by(|a, b| {\n        let (al, bl) = (a.chars().count(), b.chars().count());\n        if al != bl {\n            al.cmp(&bl)\n        } else {\n            a.cmp(b)\n        }\n    });\n\n    new_lst"}
{"task_id": "HumanEval/150", "completion": "\n    if is_prime(n) {\n        x\n    } else {\n        y\n    }"}
{"task_id": "HumanEval/151", "completion": "\n    lst.into_iter()\n        .filter(|x| x.is_odd() && x.is_positive())\n        .map(|x| x * x)\n        .sum()"}
{"task_id": "HumanEval/152", "completion": "\n    game.iter().zip(guess.iter()).map(|(a, b)| if *a == *b { 0 } else { (*b - *a).abs() }).collect()"}
{"task_id": "HumanEval/153", "completion": "\n    extensions.into_iter()\n        .map(|extension| (extension.chars().filter(|c| c.is_uppercase()).count() as i32 - extension.chars().filter(|c| c.is_lowercase()).count() as i32, extension.clone()))\n        .max_by(|(a, _), (b, _)| a.cmp(b))\n        .map(|(_, extension)| class_name + \".\" + &extension)\n        .unwrap_or_else(|| class_name.clone())"}
{"task_id": "HumanEval/154", "completion": "\n    let mut a_chars = a.chars();\n    let mut b_chars = b.chars();\n    let mut rotations = 0;\n\n    while rotations < 4 {\n        let mut found = false;\n        let mut i = 0;\n        while i < a.len() {\n            if a_chars.next() == b_chars.next() {\n                found = true;\n                break;\n            }\n            i += 1;\n        }\n        if found {\n            return true;\n        }\n        rotations += 1;\n        b_chars = b_chars.rotate(1);\n    }\n    false"}
{"task_id": "HumanEval/155", "completion": "\n    let mut even = 0;\n    let mut odd = 0;\n    let mut i = 0;\n    while i < num.abs() {\n        if num.abs() % 10 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        i += 1;\n    }\n    (even, odd)"}
{"task_id": "HumanEval/156", "completion": "\n    // The mapping from integers to Roman numerals.\n    let mapping = [\n        (1, \"i\"),\n        (5, \"v\"),\n        (10, \"x\"),\n        (50, \"l\"),\n        (100, \"c\"),\n        (500, \"d\"),\n        (1000, \"m\"),\n    ];\n\n    // Convert the number to Roman numerals.\n    let mut result = String::new();\n    for (divisor, roman) in mapping {\n        while number >= divisor {\n            number -= divisor;\n            result.push_str(roman);\n        }\n    }\n\n    // If there are any remaining digits, add them to the result.\n    if number > 0 {\n        result.push_str(roman_for_digit(number));\n    }\n\n    // Return the result in lowercase.\n    result.to_lowercase()"}
{"task_id": "HumanEval/157", "completion": "\n    let (a, b, c) = (a as f64, b as f64, c as f64);\n    let (a_squared, b_squared, c_squared) = (a * a, b * b, c * c);\n    let (a_plus_b, a_plus_c, b_plus_c) = (a + b, a + c, b + c);\n    let (a_minus_b, a_minus_c, b_minus_c) = (a - b, a - c, b - c);\n    let (a_times_b, a_times_c, b_times_c) = (a * b, a * c, b * c);\n    let (a_divided_by_b, a_divided_by_c, b_divided_by_c) = (a / b, a / c, b / c);\n    let (a_to_the_power_of_2, b_to_the_power_of_2, c_to_the_power_of_2) = (a.powf(2), b.powf(2), c.powf(2));\n    let (a_plus_b_plus_c, a_plus_b_minus_c, a_minus_b_plus_c, a_minus_b_minus_c) = (a + b + c, a + b - c, a - b + c, a - b - c);\n    let (a_times_b_times_c, a_times_b_divided_by_c, a_times_c_divided_by_b, b_times_c_divided_by_a) = (a * b * c, a * b / c, a * c / b, b * c / a);\n    let (a_to_the_power_of_3, b_to_the_power_of_3, c_to_the_power_of_3) = (a.powf(3), b.powf(3), c.powf(3));\n    let (a_cubed_plus_b_cubed_plus_c"}
{"task_id": "HumanEval/158", "completion": "\n    let mut max_word = words[0];\n    let mut max_unique_chars = max_word.chars().collect::<HashSet<_>>().len();\n\n    for word in words.iter().skip(1) {\n        let word_chars = word.chars().collect::<HashSet<_>>();\n        let unique_chars = word_chars.len();\n\n        if unique_chars > max_unique_chars {\n            max_word = word;\n            max_unique_chars = unique_chars;\n        }\n    }\n\n    max_word"}
{"task_id": "HumanEval/159", "completion": "\n    let mut result = vec![0; 2];\n    if remaining < number {\n        result[0] = number;\n        result[1] = remaining;\n        return result;\n    }\n    let mut total = number;\n    let mut left = remaining;\n    while total < need {\n        total += remaining;\n        left -= number;\n        result[0] = total;\n        result[1] = left;\n        if left <= 0 {\n            break;\n        }\n        number += remaining;\n        remaining = left;\n    }\n    result"}
{"task_id": "HumanEval/160", "completion": "\n    let mut result = operand[0];\n    for i in 1..operator.len() {\n        match operator[i] {\n            \"+\" => result += operand[i],\n            \"-\" => result -= operand[i],\n            \"*\" => result *= operand[i],\n            \"/\" => result /= operand[i],\n            \"**\" => result = result.pow(operand[i] as u32),\n            _ => panic!(\"Invalid operator\"),\n        }\n    }\n    result"}
{"task_id": "HumanEval/161", "completion": "\n    s.chars().map(|c| {\n        if c.is_alphanumeric() {\n            c.to_uppercase()\n        } else {\n            c\n        }\n    }).collect()"}
{"task_id": "HumanEval/162", "completion": "\n    if text.is_empty() {\n        return None;\n    }\n\n    let mut hasher = Md5::new();\n    hasher.input_str(text.as_str());\n    let hash = hasher.result_str();\n\n    Some(hash)"}
{"task_id": "HumanEval/163", "completion": "\n    (a..b).filter(|x| x % 2 == 0).collect()"}
