{"task_id": "HumanEval/0", "completion": "\n    let mut result = false;\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len() {\n            if numbers[i] - numbers[j] < threshold {\n                result = true;\n                break;\n            }\n        }\n    }\n    result"}
{"task_id": "HumanEval/1", "completion": "\n    let mut paren_string = paren_string.chars();\n    let mut paren_groups = Vec::new();\n    let mut paren_group = String::new();\n    let mut paren_level = 0;\n\n    loop {\n        match paren_string.next() {\n            Some(c) => {\n                if c == '(' {\n                    paren_level += 1;\n                } else if c == ')' {\n                    paren_level -= 1;\n                }\n\n                if paren_level == 0 {\n                    paren_groups.push(paren_group.clone());\n                    paren_group.clear();\n                }\n\n                paren_group.push(c);\n            }\n            None => {\n                if paren_level == 0 {\n                    paren_groups.push(paren_group.clone());\n                    paren_group.clear();\n                }\n\n                break;\n            }\n        }\n    }\n\n    paren_groups"}
{"task_id": "HumanEval/2", "completion": "\n    number - number.trunc()"}
{"task_id": "HumanEval/3", "completion": "\n    let mut balance = 0;\n    for operation in operations {\n        balance += operation;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false"}
{"task_id": "HumanEval/4", "completion": "\n    let mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n    let mut mad = 0.0;\n    for number in numbers {\n        mad += (number - mean).abs();\n    }\n    mad / numbers.len() as f64"}
{"task_id": "HumanEval/5", "completion": "\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < numbers.len() {\n        result.push(numbers[i]);\n        result.push(delimeter);\n        i += 1;\n    }\n    result.pop();\n    result"}
{"task_id": "HumanEval/6", "completion": "\n    let mut paren_string = paren_string.chars().peekable();\n    let mut paren_levels = vec![];\n    let mut paren_level = 0;\n    while let Some(c) = paren_string.next() {\n        if c == '(' {\n            paren_level += 1;\n        } else if c == ')' {\n            paren_level -= 1;\n        }\n        if paren_string.peek().is_none() {\n            paren_levels.push(paren_level);\n        }\n    }\n    paren_levels"}
{"task_id": "HumanEval/7", "completion": "\n    strings\n        .iter()\n        .filter(|s| s.contains(&substring))\n        .map(|s| s.to_string())\n        .collect()"}
{"task_id": "HumanEval/8", "completion": "\n    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n        sum += number;\n        product *= number;\n    }\n    (sum, product)"}
{"task_id": "HumanEval/9", "completion": "\n    let mut result = vec![];\n    let mut max = numbers[0];\n    for number in numbers {\n        if number > max {\n            max = number;\n        }\n        result.push(max);\n    }\n    result"}
{"task_id": "HumanEval/10", "completion": "\n    let mut string = string.chars().collect::<Vec<char>>();\n    let mut longest_palindrome_index = 0;\n    let mut longest_palindrome_length = 0;\n    for i in 0..string.len() {\n        let mut j = i;\n        while j > 0 && string[j] == string[string.len() - j] {\n            j -= 1;\n        }\n        if j > longest_palindrome_index {\n            longest_palindrome_index = j;\n            longest_palindrome_length = string.len() - j;\n        }\n    }\n    let mut result = Vec::new();\n    for i in 0..longest_palindrome_index {\n        result.push(string[i]);\n    }\n    for i in 0..longest_palindrome_length {\n        result.push(string[string.len() - i - 1]);\n    }\n    for i in longest_palindrome_index..string.len() {\n        result.push(string[i]);\n    }\n    String::from_iter(result)"}
{"task_id": "HumanEval/11", "completion": "\n    let mut result = String::new();\n    for (i, (a, b)) in a.chars().zip(b.chars()).enumerate() {\n        result.push(if a == b { '0' } else { '1' });\n    }\n    result"}
{"task_id": "HumanEval/12", "completion": "\n    let mut longest = String::new();\n    let mut longest_len = 0;\n\n    for s in strings {\n        let len = s.len();\n        if len > longest_len {\n            longest = s;\n            longest_len = len;\n        } else if len == longest_len {\n            if longest < s {\n                longest = s;\n            }\n        }\n    }\n\n    if longest_len == 0 {\n        None\n    } else {\n        Some(longest)\n    }"}
{"task_id": "HumanEval/13", "completion": "\n    if a == 0 || b == 0 {\n        return 0;\n    }\n\n    let mut a = a;\n    let mut b = b;\n\n    while a != b {\n        if a > b {\n            a -= b;\n        } else {\n            b -= a;\n        }\n    }\n\n    a"}
{"task_id": "HumanEval/14", "completion": "\n    let mut prefixes = Vec::new();\n    let mut prefix = String::new();\n    for c in string.chars() {\n        prefix.push(c);\n        prefixes.push(prefix.clone());\n    }\n    prefixes"}
{"task_id": "HumanEval/15", "completion": "\n    let mut result = String::new();\n    for i in 0..n + 1 {\n        result.push_str(&i.to_string());\n        result.push(' ');\n    }\n    result"}
{"task_id": "HumanEval/16", "completion": "\n    let mut count = 0;\n    let mut seen = HashSet::new();\n    for c in string.chars() {\n        if !seen.contains(&c) {\n            seen.insert(c);\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/17", "completion": "\n    let mut result = Vec::new();\n    let mut current_note = 0;\n    let mut current_beats = 0;\n    for c in music_string.chars() {\n        if c == 'o' {\n            current_note = 4;\n            current_beats = 0;\n        } else if c == '|' {\n            current_note = 2;\n            current_beats = 0;\n        } else if c == '.' {\n            current_note = 1;\n            current_beats = 0;\n        } else if c == ' ' {\n            current_beats += 1;\n        }\n        if current_beats == current_note {\n            result.push(current_note);\n            current_note = 0;\n            current_beats = 0;\n        }\n    }\n    result"}
{"task_id": "HumanEval/18", "completion": "\n    let mut count = 0;\n    let mut index = 0;\n    while index < string.len() {\n        let mut substring_index = 0;\n        while substring_index < substring.len() {\n            if string[index + substring_index] != substring[substring_index] {\n                break;\n            }\n            substring_index += 1;\n        }\n        if substring_index == substring.len() {\n            count += 1;\n        }\n        index += 1;\n    }\n    count"}
{"task_id": "HumanEval/19", "completion": "\n    let mut numbers = numbers.split(' ').map(|x| x.to_string()).collect::<Vec<String>>();\n    numbers.sort();\n    numbers.join(\" \")"}
{"task_id": "HumanEval/20", "completion": "\n    let mut closest_pair = (numbers[0], numbers[1]);\n    let mut closest_distance = (numbers[0] - numbers[1]).abs();\n\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len() {\n            let distance = (numbers[i] - numbers[j]).abs();\n            if distance < closest_distance {\n                closest_pair = (numbers[i], numbers[j]);\n                closest_distance = distance;\n            }\n        }\n    }\n\n    closest_pair"}
{"task_id": "HumanEval/21", "completion": "\n    let min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n    let range = max - min;\n    numbers.iter().map(|&n| (n - min) / range).collect()"}
{"task_id": "HumanEval/23", "completion": "\n    string.len() as isize"}
{"task_id": "HumanEval/24", "completion": "\n    let mut largest = 1;\n    for i in 2..n {\n        if n % i == 0 {\n            largest = i;\n        }\n    }\n    largest"}
{"task_id": "HumanEval/25", "completion": "\n    let mut factors = vec![];\n    let mut n = n;\n    let mut i = 2;\n    while n > 1 {\n        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    factors"}
{"task_id": "HumanEval/26", "completion": "\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n    for number in numbers {\n        if !seen.contains(&number) {\n            result.push(number);\n            seen.insert(number);\n        }\n    }\n    result"}
{"task_id": "HumanEval/27", "completion": "\n    let mut chars = string.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase());\n        } else {\n            result.push(c.to_lowercase());\n        }\n    }\n    result"}
{"task_id": "HumanEval/28", "completion": "\n    strings.join(\"\")"}
{"task_id": "HumanEval/29", "completion": "\n    strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect()"}
{"task_id": "HumanEval/30", "completion": "\n    l.into_iter().filter(|&x| x > 0).collect()"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1 {\n        return false;\n    }\n\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return false;\n        }\n        i += 1;\n    }\n\n    true"}
{"task_id": "HumanEval/33", "completion": "\n    let mut l_prime = l;\n    let mut i = 0;\n    while i < l.len() {\n        if i % 3 == 0 {\n            l_prime[i] = l[i].cmp(&l[i + 1]).max(l[i].cmp(&l[i + 2])).max(&l[i + 1].cmp(&l[i + 2])).unwrap();\n            l_prime[i + 1] = l[i].cmp(&l[i + 1]).min(l[i].cmp(&l[i + 2])).min(&l[i + 1].cmp(&l[i + 2])).unwrap();\n            l_prime[i + 2] = l[i].cmp(&l[i + 1]).max(l[i].cmp(&l[i + 2])).max(&l[i + 1].cmp(&l[i + 2])).unwrap();\n        }\n        i += 1;\n    }\n    l_prime"}
{"task_id": "HumanEval/34", "completion": "\n    let mut seen = HashSet::new();\n    l.into_iter().filter(|&x| seen.insert(x)).collect()"}
{"task_id": "HumanEval/35", "completion": "\n    let mut max = l[0];\n    for i in 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n        }\n    }\n    max"}
{"task_id": "HumanEval/36", "completion": "\n    let mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            if i % 10 == 7 {\n                count += 1;\n            }\n        }\n    }\n    count"}
{"task_id": "HumanEval/37", "completion": "\n    let mut l_prime = l;\n    let mut i = 0;\n    while i < l.len() {\n        if i % 2 == 0 {\n            l_prime[i] = l[i].to_owned();\n        } else {\n            l_prime[i] = l[i].to_owned();\n            l_prime[i] = l_prime[i].max(l[i - 1]);\n        }\n        i += 1;\n    }\n    l_prime"}
{"task_id": "HumanEval/39", "completion": "\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = 1;\n    while i < n {\n        k = i + j;\n        if is_prime(k) {\n            i = k;\n        }\n        j = k;\n    }\n    i"}
{"task_id": "HumanEval/40", "completion": "\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < l.len() {\n        j = i + 1;\n        k = i + 2;\n        while j < l.len() && k < l.len() {\n            if l[i] + l[j] + l[k] == 0 {\n                return true;\n            }\n            j += 1;\n            k += 1;\n        }\n        i += 1;\n    }\n    false"}
{"task_id": "HumanEval/41", "completion": "\n    let mut collisions = 0;\n    let mut left_cars = vec![0; n as usize];\n    let mut right_cars = vec![0; n as usize];\n    for i in 0..n {\n        left_cars[i as usize] = i;\n        right_cars[i as usize] = n - i - 1;\n    }\n    for i in 0..n {\n        let left_car = left_cars[i as usize];\n        let right_car = right_cars[i as usize];\n        if left_car == right_car {\n            collisions += 1;\n        }\n        left_cars[i as usize] = left_car + 1;\n        right_cars[i as usize] = right_car - 1;\n    }\n    collisions"}
{"task_id": "HumanEval/42", "completion": "\n    let mut res = Vec::new();\n    for i in l {\n        res.push(i + 1);\n    }\n    res"}
{"task_id": "HumanEval/43", "completion": "\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n            return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    false"}
{"task_id": "HumanEval/44", "completion": "\n    let mut result = String::new();\n    let mut x = x;\n    while x > 0 {\n        let digit = x % base;\n        result.push(digit.to_string().chars().next().unwrap());\n        x /= base;\n    }\n    result.chars().rev().collect()"}
{"task_id": "HumanEval/45", "completion": "\n    (a as f64 * h as f64) / 2.0"}
{"task_id": "HumanEval/46", "completion": "\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 0..n {\n        let tmp = a;\n        a = b;\n        b = c;\n        c = d;\n        d = tmp + b + c + d;\n    }\n    d"}
{"task_id": "HumanEval/47", "completion": "\n    let mut l = l;\n    l.sort();\n    let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64 / 2.0\n    } else {\n        l[n / 2] as f64\n    }"}
{"task_id": "HumanEval/48", "completion": "\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    let mut last = chars.next_back();\n    while first.is_some() && last.is_some() {\n        if first.unwrap() != last.unwrap() {\n            return false;\n        }\n        first = chars.next();\n        last = chars.next_back();\n    }\n    true"}
{"task_id": "HumanEval/49", "completion": "\n    let mut n = n;\n    let mut p = p;\n    let mut result = 1;\n    while n > 0 {\n        if n % 2 == 1 {\n            result = (result * p) % p;\n        }\n        n = n >> 1;\n        p = (p * p) % p;\n    }\n    result"}
{"task_id": "HumanEval/51", "completion": "\n    let vowels = \"aeiouAEIOU\";\n    let mut result = String::new();\n    for c in text.chars() {\n        if !vowels.contains(c) {\n            result.push(c);\n        }\n    }\n    result"}
{"task_id": "HumanEval/52", "completion": "\n    l.iter().all(|&x| x < t)"}
{"task_id": "HumanEval/53", "completion": "\n    x + y"}
{"task_id": "HumanEval/54", "completion": "\n    let mut s0_chars = s0.chars().collect::<Vec<char>>();\n    let mut s1_chars = s1.chars().collect::<Vec<char>>();\n    s0_chars.sort();\n    s1_chars.sort();\n    s0_chars == s1_chars"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0 {\n        0\n    } else if n == 1 {\n        1\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }"}
{"task_id": "HumanEval/56", "completion": "\n    let mut stack = Vec::new();\n    for bracket in brackets.chars() {\n        if bracket == '<' {\n            stack.push(bracket);\n        } else if bracket == '>' {\n            if stack.is_empty() {\n                return false;\n            }\n            let last_bracket = stack.pop().unwrap();\n            if last_bracket != '<' {\n                return false;\n            }\n        }\n    }\n    stack.is_empty()"}
{"task_id": "HumanEval/57", "completion": "\n    let mut prev = l[0];\n    for x in l.iter() {\n        if x > prev {\n            return true;\n        } else if x < prev {\n            return false;\n        }\n        prev = x;\n    }\n    true"}
{"task_id": "HumanEval/58", "completion": "\n    let mut l1 = l1.into_iter().collect::<HashSet<isize>>();\n    let mut l2 = l2.into_iter().collect::<HashSet<isize>>();\n    l1.retain(|&x| l2.remove(&x));\n    l1.into_iter().collect()"}
{"task_id": "HumanEval/59", "completion": "\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return i;\n        }\n        i += 1;\n    }\n    n"}
{"task_id": "HumanEval/60", "completion": "\n    let mut sum = 0;\n    for i in 1..n + 1 {\n        sum += i;\n    }\n    sum"}
{"task_id": "HumanEval/61", "completion": "\n    let mut stack = Vec::new();\n    for bracket in brackets.chars() {\n        if bracket == '(' {\n            stack.push(bracket);\n        } else if bracket == ')' {\n            if stack.is_empty() {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    stack.is_empty()"}
{"task_id": "HumanEval/62", "completion": "\n    let mut xs = xs;\n    let mut ys = Vec::new();\n    let mut x = 1;\n    while xs.len() > 1 {\n        ys.push(x * xs.pop().unwrap());\n        x += 1;\n    }\n    ys"}
{"task_id": "HumanEval/63", "completion": "\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    for _ in 0..n {\n        let tmp = a;\n        a = b;\n        b = c;\n        c = tmp + b + c;\n    }\n    c"}
{"task_id": "HumanEval/64", "completion": "\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n    let mut count = 0;\n    for c in s.chars() {\n        if vowels.contains(&c) {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/65", "completion": "\n    let mut digits = x.to_string();\n    let mut shift = shift;\n    if shift < 0 {\n        shift = shift + digits.len() as isize;\n    }\n    let mut result = String::new();\n    for i in 0..digits.len() {\n        let index = (i + shift) % digits.len();\n        result.push(digits.chars().nth(index).unwrap());\n    }\n    result"}
{"task_id": "HumanEval/66", "completion": "\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            sum += c.to_digit(10).unwrap() as isize;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/67", "completion": "\n    let mut s = s.split_whitespace();\n    let apples = s.next().unwrap().parse::<isize>().unwrap();\n    let oranges = s.next().unwrap().parse::<isize>().unwrap();\n    n - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "\n    let mut min_index = 0;\n    let mut min_value = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] % 2 == 0 && arr[i] < min_value {\n            min_index = i;\n            min_value = arr[i];\n        }\n    }\n    vec![min_value, min_index]"}
{"task_id": "HumanEval/69", "completion": "\n    let mut freq: HashMap<isize, usize> = HashMap::new();\n    for num in lst {\n        *freq.entry(num).or_insert(0) += 1;\n    }\n    for (num, freq) in freq {\n        if *freq >= num as usize {\n            return num;\n        }\n    }\n    -1"}
{"task_id": "HumanEval/70", "completion": "\n    let mut result = Vec::new();\n    let mut sorted = lst.clone();\n    sorted.sort();\n    let mut i = 0;\n    while i < sorted.len() {\n        result.push(sorted[i]);\n        i += 1;\n        if i < sorted.len() {\n            result.push(sorted[sorted.len() - i - 1]);\n        }\n    }\n    result"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c && b + c > a && c + a > b {\n        (a * b * c) as f64 / (a + b + c) as f64\n    } else {\n        -1.0\n    }"}
{"task_id": "HumanEval/72", "completion": "\n    let mut sum = 0;\n    let mut i = 0;\n    let mut j = q.len() - 1;\n    while i < j {\n        sum += q[i];\n        sum -= q[j];\n        i += 1;\n        j -= 1;\n    }\n    if sum == 0 {\n        return true;\n    }\n    return false;"}
{"task_id": "HumanEval/73", "completion": "\n    let mut arr = arr;\n    arr.sort();\n    let mut result = 0;\n    for i in 0..arr.len() {\n        if i == 0 || i == arr.len() - 1 {\n            continue;\n        }\n        if arr[i] != arr[i - 1] && arr[i] != arr[i + 1] {\n            result += 1;\n        }\n    }\n    result"}
{"task_id": "HumanEval/74", "completion": "\n    let mut total_chars = 0;\n    let mut total_chars2 = 0;\n    for s in lst1 {\n        total_chars += s.len();\n    }\n    for s in lst2 {\n        total_chars2 += s.len();\n    }\n    if total_chars > total_chars2 {\n        lst2\n    } else if total_chars < total_chars2 {\n        lst1\n    } else {\n        lst1\n    }"}
{"task_id": "HumanEval/75", "completion": "\n    let mut i = 2;\n    while i < a {\n        if a % i == 0 {\n            if is_prime(i) && is_prime(a / i) {\n                return true;\n            }\n        }\n        i += 1;\n    }\n    false"}
{"task_id": "HumanEval/76", "completion": "\n    let mut x = x;\n    let mut n = n;\n    let mut i = 0;\n    while x > 1 {\n        if x % n == 0 {\n            x /= n;\n            i += 1;\n        } else {\n            return false;\n        }\n    }\n    i == 1"}
{"task_id": "HumanEval/77", "completion": "\n    let mut i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n            return true;\n        }\n        i += 1;\n    }\n    false"}
{"task_id": "HumanEval/78", "completion": "\n    let mut count = 0;\n    for c in num.chars() {\n        match c {\n            '2' | '3' | '5' | '7' | 'B' | 'D' => count += 1,\n            _ => {}\n        }\n    }\n    count"}
{"task_id": "HumanEval/79", "completion": "\n    let mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal > 0 {\n        let remainder = decimal % 2;\n        binary.insert(0, remainder.to_string().chars().next().unwrap());\n        decimal /= 2;\n    }\n    binary.insert(0, 'd');\n    binary.push('b');\n    binary"}
{"task_id": "HumanEval/80", "completion": "\n    let mut s = s.chars().peekable();\n    let mut last = s.next().unwrap();\n    while let Some(c) = s.next() {\n        if c == last {\n            return false;\n        }\n        last = c;\n    }\n    s.peek().is_none()"}
{"task_id": "HumanEval/81", "completion": "\n    grades.iter().map(|&grade| {\n        if grade >= 4.0 {\n            String::from(\"A+\")\n        } else if grade >= 3.7 {\n            String::from(\"A\")\n        } else if grade >= 3.3 {\n            String::from(\"A-\")\n        } else if grade >= 3.0 {\n            String::from(\"B+\")\n        } else if grade >= 2.7 {\n            String::from(\"B\")\n        } else if grade >= 2.3 {\n            String::from(\"B-\")\n        } else if grade >= 2.0 {\n            String::from(\"C+\")\n        } else if grade >= 1.7 {\n            String::from(\"C\")\n        } else if grade >= 1.3 {\n            String::from(\"C-\")\n        } else if grade >= 1.0 {\n            String::from(\"D+\")\n        } else if grade >= 0.7 {\n            String::from(\"D\")\n        } else if grade >= 0.0 {\n            String::from(\"D-\")\n        } else {\n            String::from(\"E\")\n        }\n    }).collect()"}
{"task_id": "HumanEval/82", "completion": "\n    let length = string.len();\n    let mut is_prime = true;\n    for i in 2..length {\n        if length % i == 0 {\n            is_prime = false;\n            break;\n        }\n    }\n    is_prime"}
{"task_id": "HumanEval/83", "completion": "\n    let mut count = 0;\n    for i in 1..=n {\n        count += 1;\n        for j in 1..=n {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/84", "completion": "\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0 {\n        result.push_str(&format!(\"{:b}\", N % 2));\n        N /= 2;\n    }\n    result"}
{"task_id": "HumanEval/85", "completion": "\n    let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum"}
{"task_id": "HumanEval/86", "completion": "\n    let mut words: Vec<String> = s.split(' ').map(|x| x.to_string()).collect();\n    words.sort_by(|a, b| a.chars().cmp(b.chars()));\n    words.join(\" \")"}
{"task_id": "HumanEval/87", "completion": "\n    let mut res = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n        for (j, col) in row.iter().enumerate() {\n            if *col == x {\n                res.push((i, j));\n            }\n        }\n    }\n    res.sort_by(|a, b| {\n        if a.0 == b.0 {\n            b.1.cmp(&a.1)\n        } else {\n            a.0.cmp(&b.0)\n        }\n    });\n    res"}
{"task_id": "HumanEval/88", "completion": "\n    let mut array = array;\n    let mut sum = 0;\n    for i in 0..array.len() {\n        sum += array[i];\n    }\n    if sum % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort();\n    }\n    array"}
{"task_id": "HumanEval/89", "completion": "\n    let mut alphabet = String::from(\"abcdefghijklmnopqrstuvwxyz\");\n    let mut encrypted = String::new();\n    for c in s.chars() {\n        let index = alphabet.find(c).unwrap();\n        let new_index = (index as u32 + 2 * 2) % 26;\n        encrypted.push(alphabet.chars().nth(new_index as usize).unwrap());\n        alphabet.remove(index);\n    }\n    encrypted"}
{"task_id": "HumanEval/90", "completion": "\n    let mut lst = lst;\n    lst.sort();\n    lst.pop()"}
{"task_id": "HumanEval/91", "completion": "\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut A = 0;\n    let mut B = 0;\n    let mut C = 0;\n    let mut D = 0;\n    let mut E = 0;\n    let mut F = 0;\n    let mut G = 0;\n    let mut H = 0;\n    let mut I = 0;\n    let mut J = 0;\n    let mut K = 0;\n    let mut L = 0;\n    let mut M = 0;\n    let mut N = 0;\n    let mut O = 0;\n    let mut P = 0;\n    let mut Q = 0;\n    let mut R = 0;\n    let mut S = 0;\n    let mut T = 0;\n    let mut U = 0;\n    let mut V = 0;\n    let mut W = 0;\n    let mut X = 0;\n    let mut Y = 0;\n    let mut Z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0"}
{"task_id": "HumanEval/92", "completion": "\n    let x = x as i32;\n    let y = y as i32;\n    let z = z as i32;\n    if x == y + z || y == x + z || z == x + y {\n        true\n    } else {\n        false\n    }"}
{"task_id": "HumanEval/93", "completion": "\n    let mut encoded = String::new();\n    for c in message.chars() {\n        if c.is_lowercase() {\n            encoded.push(c.to_uppercase().next().unwrap());\n        } else if c.is_uppercase() {\n            encoded.push(c.to_lowercase().next().unwrap());\n        } else {\n            let vowel = match c {\n                'a' => 'e',\n                'e' => 'i',\n                'i' => 'o',\n                'o' => 'u',\n                'u' => 'y',\n                _ => c,\n            };\n            encoded.push(vowel);\n        }\n    }\n    encoded"}
{"task_id": "HumanEval/94", "completion": "\n    let mut max = 0;\n    for i in lst.iter() {\n        if *i > max {\n            max = *i;\n        }\n    }\n    let mut sum = 0;\n    let mut num = max;\n    while num > 0 {\n        sum += num % 10;\n        num /= 10;\n    }\n    sum"}
{"task_id": "HumanEval/95", "completion": "\n    let mut lower_case = true;\n    let mut upper_case = true;\n    for (key, _) in dict.iter() {\n        if key.chars().all(|c| c.is_lowercase()) {\n            lower_case = true;\n        } else {\n            lower_case = false;\n        }\n        if key.chars().all(|c| c.is_uppercase()) {\n            upper_case = true;\n        } else {\n            upper_case = false;\n        }\n    }\n    lower_case && upper_case"}
{"task_id": "HumanEval/96", "completion": "\n    let mut result = Vec::new();\n    let mut i = 2;\n    while i < n {\n        if is_prime(i) {\n            result.push(i);\n        }\n        i += 1;\n    }\n    result"}
{"task_id": "HumanEval/97", "completion": "\n    let mut a = a;\n    let mut b = b;\n    let mut result = 0;\n    while a != 0 || b != 0 {\n        if a % 10 == 0 {\n            a /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            a /= 10;\n        }\n        if b % 10 == 0 {\n            b /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            b /= 10;\n        }\n    }\n    result"}
{"task_id": "HumanEval/98", "completion": "\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase() && c.is_vowel() {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/99", "completion": "\n    let value = value.parse::<f64>().unwrap();\n    let value = value.round();\n    let value = value.floor();\n    value as isize"}
{"task_id": "HumanEval/100", "completion": "\n    let mut pile = vec![n];\n    let mut n = n;\n    while n > 0 {\n        if n % 2 == 0 {\n            n += 2;\n        } else {\n            n += 1;\n        }\n        pile.push(n);\n    }\n    pile"}
{"task_id": "HumanEval/101", "completion": "\n    let mut words = Vec::new();\n    let mut word = String::new();\n    let mut in_word = false;\n    for c in s.chars() {\n        if c == ' ' || c == ',' {\n            if in_word {\n                words.push(word.clone());\n                word.clear();\n                in_word = false;\n            }\n        } else {\n            word.push(c);\n            in_word = true;\n        }\n    }\n    if in_word {\n        words.push(word);\n    }\n    words"}
{"task_id": "HumanEval/102", "completion": "\n    let mut x = x;\n    let mut y = y;\n    if x > y {\n        std::mem::swap(&mut x, &mut y);\n    }\n    if x % 2 == 0 {\n        return x;\n    }\n    if y % 2 == 0 {\n        return y;\n    }\n    -1"}
{"task_id": "HumanEval/104", "completion": "\n    let mut result = Vec::new();\n    for i in x {\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit % 2 == 0 {\n                break;\n            }\n            result.push(num);\n            num /= 10;\n        }\n    }\n    result.sort();\n    result"}
{"task_id": "HumanEval/105", "completion": "\n    let mut result = Vec::new();\n    for num in arr {\n        if num >= 1 && num <= 9 {\n            result.push(num.to_string());\n        }\n    }\n    result.sort_unstable();\n    result.reverse();\n    result"}
{"task_id": "HumanEval/106", "completion": "\n    let mut result = Vec::new();\n    for i in 1..=n {\n        if i % 2 == 0 {\n            result.push(i.factorial());\n        } else {\n            result.push(i.to_isize().unwrap() * (i - 1).to_isize().unwrap());\n        }\n    }\n    result"}
{"task_id": "HumanEval/107", "completion": "\n    let mut even = 0;\n    let mut odd = 0;\n    for i in 1..n {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even += 1;\n            } else {\n                odd += 1;\n            }\n        }\n    }\n    (even, odd)"}
{"task_id": "HumanEval/108", "completion": "\n    let mut count = 0;\n    for num in arr {\n        let mut sum = 0;\n        while num > 0 {\n            sum += num % 10;\n            num /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/109", "completion": "\n    let mut arr = arr;\n    arr.sort();\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] != i as isize {\n            return false;\n        }\n        i += 1;\n    }\n    true"}
{"task_id": "HumanEval/110", "completion": "\n    let mut lst1 = lst1;\n    let mut lst2 = lst2;\n    let mut even_lst1 = vec![];\n    let mut odd_lst1 = vec![];\n    let mut even_lst2 = vec![];\n    let mut odd_lst2 = vec![];\n    for i in 0..lst1.len() {\n        if lst1[i] % 2 == 0 {\n            even_lst1.push(lst1[i]);\n        } else {\n            odd_lst1.push(lst1[i]);\n        }\n    }\n    for i in 0..lst2.len() {\n        if lst2[i] % 2 == 0 {\n            even_lst2.push(lst2[i]);\n        } else {\n            odd_lst2.push(lst2[i]);\n        }\n    }\n    if even_lst1.len() + even_lst2.len() == odd_lst1.len() + odd_lst2.len() {\n        return \"YES\".to_string();\n    } else {\n        return \"NO\".to_string();\n    }"}
{"task_id": "HumanEval/111", "completion": "\n    let mut histogram: HashMap<String, isize> = HashMap::new();\n    let mut letters: Vec<char> = test.chars().collect();\n    let mut max_count = 0;\n    let mut max_letter = String::new();\n    for letter in letters.iter() {\n        let count = histogram.entry(letter.to_string().to_lowercase()).or_insert(0);\n        *count += 1;\n        if *count > max_count {\n            max_count = *count;\n            max_letter = letter.to_string().to_lowercase();\n        }\n    }\n    histogram.remove(&max_letter);\n    histogram"}
{"task_id": "HumanEval/112", "completion": "\n    let mut s = s.chars().collect::<Vec<char>>();\n    let mut c = c.chars().collect::<Vec<char>>();\n    c.sort();\n    c.reverse();\n    for i in 0..s.len() {\n        if c.contains(&s[i]) {\n            s.remove(i);\n        }\n    }\n    let s = s.iter().collect::<String>();\n    let mut s = s.chars().collect::<Vec<char>>();\n    s.sort();\n    s.reverse();\n    let s = s.iter().collect::<String>();\n    if s == s.chars().rev().collect::<String>() {\n        (s, true)\n    } else {\n        (s, false)\n    }"}
{"task_id": "HumanEval/113", "completion": "\n    let mut result = Vec::new();\n    for s in lst {\n        let mut count = 0;\n        for c in s.chars() {\n            if c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 1 {\n                count += 1;\n            }\n        }\n        result.push(format!(\"the number of odd elements {}n the str{}ng {} of the {}nput.\", count, count, count, count));\n    }\n    result"}
{"task_id": "HumanEval/114", "completion": "\n    let mut min = nums[0];\n    let mut sum = nums[0];\n    for i in 1..nums.len() {\n        sum += nums[i];\n        if sum < min {\n            min = sum;\n        }\n    }\n    min"}
{"task_id": "HumanEval/115", "completion": "\n    let mut max_fill = 0;\n    let mut max_fill_per_row = 0;\n    let mut max_fill_per_col = 0;\n    let mut max_fill_per_row_col = 0;\n    let mut max_fill_per_row_col_capacity = 0;\n    let mut max_fill_per_row_col_capacity_capacity = 0;\n    let mut max_fill_per_row_col_capacity_capacity_capacity = 0;\n    let mut max_fill_per_row_col_capacity_capacity_capacity_capacity = 0;\n    let mut max_fill_per_row_col_capacity_capacity_capacity_capacity_capacity = 0;\n    let mut max_fill_per_row_col_capacity_capacity_capacity_capacity_capacity_capacity = 0;\n    let mut max_fill_per_row_col_capacity_capacity_capacity_capacity_capacity_capacity_capacity = 0;\n    let mut max_fill_per_row_col_capacity_capacity_capacity_capacity_capacity_capacity_capacity_capacity = 0;\n    let mut max_fill_per_row_col_capacity_capacity_capacity_capacity_capacity_capacity_capacity_capacity_capacity = 0;\n    let mut max_fill_per_row_col_capacity_capacity_capacity_capacity_capacity_capacity_capacity_capacity_capacity_capacity = 0;\n    let mut max_fill_per_row_col_capacity_capacity_capacity_capacity_capacity_capacity_capacity_capacity_capacity_capacity_capacity = 0;\n    let mut max_fill_per_row_col_capacity_capacity_capacity_capacity_capacity_capacity_capacity_capacity_capacity_capacity_capacity_capacity = 0;\n    let mut max_fill_per_row_col_capacity"}
{"task_id": "HumanEval/116", "completion": "\n    let mut arr = arr;\n    arr.sort_by(|a, b| {\n        let a = a.to_string().chars().filter(|&c| c == '1').count();\n        let b = b.to_string().chars().filter(|&c| c == '1').count();\n        a.cmp(&b).then(a.cmp(&b))\n    });\n    arr"}
{"task_id": "HumanEval/117", "completion": "\n    let mut v = Vec::new();\n    let mut words = s.split_whitespace();\n    let mut consonants = 0;\n    while let Some(word) = words.next() {\n        let mut chars = word.chars();\n        while let Some(c) = chars.next() {\n            if c.is_consonant() {\n                consonants += 1;\n            }\n        }\n        if consonants == n {\n            v.push(word.to_string());\n        }\n        consonants = 0;\n    }\n    v"}
{"task_id": "HumanEval/118", "completion": "\n    let vowels = \"aeiouAEIOU\";\n    let mut vowel_index = 0;\n    let mut vowel_count = 0;\n    let mut vowel_found = false;\n    let mut vowel_found_index = 0;\n    let mut vowel_found_count = 0;\n    let mut vowel_found_word = String::new();\n    let mut vowel_found_word_index = 0;\n    let mut vowel_found_word_count = 0;\n    let mut vowel_found_word_vowel_index = 0;\n    let mut vowel_found_word_vowel_count = 0;\n    let mut vowel_found_word_vowel_found = false;\n    let mut vowel_found_word_vowel_found_index = 0;\n    let mut vowel_found_word_vowel_found_count = 0;\n    let mut vowel_found_word_vowel_found_word = String::new();\n    let mut vowel_found_word_vowel_found_word_index = 0;\n    let mut vowel_found_word_vowel_found_word_count = 0;\n    let mut vowel_found_word_vowel_found_word_vowel_index = 0;\n    let mut vowel_found_word_vowel_found_word_vowel_count = 0;\n    let mut vowel_found_word_vowel_found_word_vowel_found = false;\n    let mut vowel_found_word_vowel_found_word_vowel_found_index = 0;\n    let mut vowel_found_word_vowel_found_word_vowel_found_count = 0;\n    let mut vowel_found_word_vowel_found_word_vowel_found_word = String::new();\n    let mut vowel_found_word_vowel_found_word_vowel_found_word_index = 0;\n    let mut vowel_found_word_vowel_found_word_vowel_found_word_count = 0"}
{"task_id": "HumanEval/119", "completion": "\n    let mut stack = Vec::new();\n    for s in lst {\n        for c in s.chars() {\n            if c == '(' {\n                stack.push(c);\n            } else {\n                if stack.is_empty() || stack.pop().unwrap() != '(' {\n                    return \"No\".to_string();\n                }\n            }\n        }\n    }\n    if stack.is_empty() {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }"}
{"task_id": "HumanEval/120", "completion": "\n    let mut arr = arr;\n    arr.sort();\n    arr.into_iter().take(k as usize).collect()"}
{"task_id": "HumanEval/121", "completion": "\n    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if *v % 2 == 1 && i % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/122", "completion": "\n    let mut sum = 0;\n    for i in 0..k as usize {\n        if arr[i].to_string().len() <= 2 {\n            sum += arr[i];\n        }\n    }\n    sum"}
{"task_id": "HumanEval/123", "completion": "\n    let mut collatz = vec![];\n    let mut num = n;\n    while num != 1 {\n        if num % 2 == 1 {\n            collatz.push(num);\n        }\n        if num % 2 == 0 {\n            num = num / 2;\n        } else {\n            num = num * 3 + 1;\n        }\n    }\n    collatz.push(1);\n    collatz.sort();\n    collatz"}
{"task_id": "HumanEval/124", "completion": "\n    let date_split: Vec<&str> = date.split('-').collect();\n    if date_split.len() != 3 {\n        return false;\n    }\n    let month = date_split[0].parse::<u32>().unwrap();\n    let day = date_split[1].parse::<u32>().unwrap();\n    let year = date_split[2].parse::<u32>().unwrap();\n    if month < 1 || month > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n        return false;\n    }\n    if month == 2 && day > 29 {\n        return false;\n    }\n    if month == 2 && day == 29 && year % 4 != 0 {\n        return false;\n    }\n    if month == 2 && day == 29 && year % 100 == 0 && year % 400 != 0 {\n        return false;\n    }\n    true"}
{"task_id": "HumanEval/126", "completion": "\n    let mut i = 0;\n    let mut j = 1;\n    while j < lst.len() {\n        if lst[i] == lst[j] {\n            j += 1;\n        } else if lst[i] > lst[j] {\n            i = j;\n            j += 1;\n        } else {\n            return false;\n        }\n    }\n    true"}
{"task_id": "HumanEval/127", "completion": "\n    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n    let intersection = (start1..=end1).intersection(start2..=end2);\n    if intersection.count() == 1 {\n        let length = intersection.next().unwrap() - start1;\n        if length.is_prime() {\n            return String::from(\"YES\");\n        }\n    }\n    String::from(\"NO\")"}
{"task_id": "HumanEval/128", "completion": "\n    let mut prod = 1;\n    let mut sum = 0;\n    for num in arr {\n        if num == 0 {\n            return None;\n        }\n        prod *= if num > 0 { 1 } else { -1 };\n        sum += num.abs();\n    }\n    Some(sum * prod)"}
{"task_id": "HumanEval/129", "completion": "\n    let n = grid.len();\n    let mut dp = vec![vec![0; n]; n];\n    for i in 0..n {\n        dp[i][i] = grid[i][i];\n    }\n    for i in 0..n {\n        for j in 0..n {\n            if i == j {\n                continue;\n            }\n            dp[i][j] = grid[i][j] + dp[i][j - 1].max(dp[i - 1][j]);\n        }\n    }\n    let mut res = vec![];\n    let mut stack = vec![];\n    stack.push((n - 1, n - 1, k));\n    while let Some((i, j, k)) = stack.pop() {\n        if k == 0 {\n            res.push(grid[i][j]);\n            break;\n        }\n        if i > 0 && dp[i - 1][j] < dp[i][j] {\n            stack.push((i - 1, j, k - 1));\n        }\n        if j > 0 && dp[i][j - 1] < dp[i][j] {\n            stack.push((i, j - 1, k - 1));\n        }\n    }\n    res.reverse();\n    res"}
{"task_id": "HumanEval/130", "completion": "\n    let mut result = vec![3];\n    let mut current = 1;\n    let mut previous = 3;\n    let mut previous_previous = 2;\n    for _ in 1..n {\n        let next = current + previous + previous_previous;\n        result.push(next);\n        previous_previous = previous;\n        previous = current;\n        current = next;\n    }\n    result"}
{"task_id": "HumanEval/131", "completion": "\n    let mut n = n;\n    let mut product = 1;\n    while n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n            product *= digit;\n        }\n        n /= 10;\n    }\n    product"}
{"task_id": "HumanEval/132", "completion": "\n    let mut stack = Vec::new();\n    let mut is_nested = false;\n    for c in string.chars() {\n        if c == '[' {\n            stack.push(c);\n        } else if c == ']' {\n            if stack.is_empty() {\n                return false;\n            }\n            let top = stack.pop().unwrap();\n            if top != '[' {\n                return false;\n            }\n        }\n    }\n    if stack.is_empty() {\n        return true;\n    }\n    false"}
{"task_id": "HumanEval/133", "completion": "\n    let mut sum = 0;\n    for num in lst {\n        sum += (num.ceil() as isize) * (num.ceil() as isize);\n    }\n    sum"}
{"task_id": "HumanEval/134", "completion": "\n    let mut txt = txt;\n    let mut last_char = txt.chars().last().unwrap();\n    let mut is_letter = false;\n    let mut is_space = false;\n    let mut is_word = false;\n    let mut is_end = false;\n\n    while !is_end {\n        if last_char == ' ' {\n            is_space = true;\n        } else if last_char.is_alphabetic() {\n            is_letter = true;\n        } else {\n            is_letter = false;\n        }\n\n        if is_letter && is_space {\n            is_word = true;\n        } else {\n            is_word = false;\n        }\n\n        if is_word && is_letter {\n            is_end = true;\n        } else {\n            txt.pop();\n            last_char = txt.chars().last().unwrap();\n        }\n    }\n\n    is_end"}
{"task_id": "HumanEval/135", "completion": "\n    let mut i = 0;\n    let mut j = 0;\n    let mut max_index = -1;\n    while i < arr.len() {\n        j = i + 1;\n        while j < arr.len() {\n            if arr[i] < arr[j] {\n                max_index = i;\n                break;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    max_index"}
{"task_id": "HumanEval/136", "completion": "\n    let mut largest_negative = None;\n    let mut smallest_positive = None;\n    for num in lst {\n        if num < 0 {\n            largest_negative = Some(num);\n        } else if num > 0 {\n            smallest_positive = Some(num);\n        }\n    }\n    (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/138", "completion": "\n    let mut sum = 0;\n    let mut i = 0;\n    while i < n {\n        sum += 2 * i;\n        i += 1;\n    }\n    sum == n"}
{"task_id": "HumanEval/139", "completion": "\n    let mut result = 1;\n    for i in 1..n {\n        result *= i;\n    }\n    result"}
{"task_id": "HumanEval/140", "completion": "\n    let mut result = String::new();\n    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n            }\n        } else {\n            result.push(c);\n            spaces = 0;\n        }\n    }\n    result"}
{"task_id": "HumanEval/141", "completion": "\n    let mut file_name = file_name.to_lowercase();\n    let mut file_name_len = file_name.len();\n    let mut file_name_chars = file_name.chars();\n    let mut file_name_chars_iter = file_name_chars.clone();\n    let mut file_name_chars_iter_2 = file_name_chars.clone();\n    let mut file_name_chars_iter_3 = file_name_chars.clone();\n    let mut file_name_chars_iter_4 = file_name_chars.clone();\n    let mut file_name_chars_iter_5 = file_name_chars.clone();\n    let mut file_name_chars_iter_6 = file_name_chars.clone();\n    let mut file_name_chars_iter_7 = file_name_chars.clone();\n    let mut file_name_chars_iter_8 = file_name_chars.clone();\n    let mut file_name_chars_iter_9 = file_name_chars.clone();\n    let mut file_name_chars_iter_10 = file_name_chars.clone();\n    let mut file_name_chars_iter_11 = file_name_chars.clone();\n    let mut file_name_chars_iter_12 = file_name_chars.clone();\n    let mut file_name_chars_iter_13 = file_name_chars.clone();\n    let mut file_name_chars_iter_14 = file_name_chars.clone();\n    let mut file_name_chars_iter_15 = file_name_chars.clone();\n    let mut file_name_chars_iter_16 = file_name_chars.clone();\n    let mut file_name_chars_iter_17 = file_name_chars.clone();\n    let mut file_name_chars_iter_18 = file_name_chars.clone();\n    let mut file_name_chars_iter_19 = file_name_chars"}
{"task_id": "HumanEval/142", "completion": "\n    let mut sum = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            sum += x * x;\n        } else if i % 4 == 0 {\n            sum += x * x * x;\n        } else {\n            sum += x;\n        }\n    }\n    sum"}
{"task_id": "HumanEval/143", "completion": "\n    let words: Vec<&str> = sentence.split(' ').collect();\n    let mut result = String::new();\n    for word in words {\n        if is_prime(word.len() as u32) {\n            result.push_str(word);\n            result.push(' ');\n        }\n    }\n    result.trim().to_string()"}
{"task_id": "HumanEval/144", "completion": "\n    let x = x.split('/').map(|s| s.parse::<u32>().unwrap());\n    let n = n.split('/').map(|s| s.parse::<u32>().unwrap());\n    let x = x.collect::<Vec<u32>>();\n    let n = n.collect::<Vec<u32>>();\n    let x = x[0] * n[1] + x[1] * n[0];\n    let n = n[0] * n[1];\n    x % n == 0"}
{"task_id": "HumanEval/145", "completion": "\n    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n        a_sum.cmp(&b_sum)\n    });\n    nums"}
{"task_id": "HumanEval/146", "completion": "\n    let mut count = 0;\n    for num in nums {\n        if num > 10 && num % 10 == 1 && num / 10 % 10 == 1 {\n            count += 1;\n        }\n    }\n    count"}
{"task_id": "HumanEval/147", "completion": "\n    let mut a = vec![];\n    for i in 1..=n {\n        a.push(i * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..a.len() - 2 {\n        for j in i + 1..a.len() - 1 {\n            for k in j + 1..a.len() {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n                    count += 1;\n                }\n            }\n        }\n    }\n    count"}
{"task_id": "HumanEval/149", "completion": "\n    let mut sorted_list = lst.clone();\n    sorted_list.sort_by(|a, b| a.len().cmp(&b.len()));\n    sorted_list.dedup();\n    sorted_list"}
{"task_id": "HumanEval/150", "completion": "\n    if is_prime(n) {\n        x\n    } else {\n        y\n    }"}
{"task_id": "HumanEval/151", "completion": "\n    let mut sum = 0;\n    for num in lst {\n        if num % 1 == 0.0 {\n            continue;\n        }\n        sum += num * num;\n    }\n    sum"}
{"task_id": "HumanEval/152", "completion": "\n    let mut result = vec![];\n    for (i, (game, guess)) in game.iter().zip(guess.iter()).enumerate() {\n        result.push(if *game == *guess { 0 } else { game.abs_sub(*guess) });\n    }\n    result"}
{"task_id": "HumanEval/153", "completion": "\n    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength = 0;\n    for extension in extensions {\n        let mut extension_strength = 0;\n        for c in extension.chars() {\n            if c.is_uppercase() {\n                extension_strength += 1;\n            } else if c.is_lowercase() {\n                extension_strength -= 1;\n            }\n        }\n        if extension_strength > strongest_extension_strength {\n            strongest_extension = extension;\n            strongest_extension_strength = extension_strength;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)"}
{"task_id": "HumanEval/154", "completion": "\n    let mut a = a.chars().collect::<Vec<char>>();\n    let mut b = b.chars().collect::<Vec<char>>();\n    a.sort();\n    b.sort();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut ab = 0;\n    let mut ac = 0;\n    let mut ad = 0;\n    let mut ae = 0;\n    let mut af = 0;\n    let mut ag = 0;\n    let mut ah = 0;\n    let mut ai = 0;\n    let mut aj = 0;\n    let mut ak = 0;\n    let mut al = 0;\n    let mut am = 0;\n    let mut an = 0;\n    let mut ao = 0;\n    let mut ap = 0;\n    let mut aq = 0;\n    let mut ar = 0;\n    let mut as = 0;\n    let mut at = 0;\n    let mut au = 0;\n    let mut av = 0;\n    let mut aw = 0;\n    let mut ax = 0;\n    let mut ay = 0;\n    let mut az = 0;\n    let mut ba = 0;\n    let mut bb = 0;\n    let mut bc = 0;\n    let mut bd = 0;\n    let mut be = 0;\n    let mut bf = 0;\n    let mut bg ="}
{"task_id": "HumanEval/155", "completion": "\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n    while num != 0 {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even, odd)"}
{"task_id": "HumanEval/156", "completion": "\n    let mut number = number;\n    let mut result = String::new();\n    let mut i = 0;\n    while number > 0 {\n        let mut digit = number % 10;\n        if digit == 9 {\n            result.push_str(\"ix\");\n            number -= 9;\n        } else if digit == 4 {\n            result.push_str(\"iv\");\n            number -= 4;\n        } else if digit == 5 {\n            result.push_str(\"v\");\n            number -= 5;\n        } else if digit == 1 {\n            result.push_str(\"i\");\n            number -= 1;\n        } else if digit == 2 {\n            result.push_str(\"ii\");\n            number -= 2;\n        } else if digit == 3 {\n            result.push_str(\"iii\");\n            number -= 3;\n        } else if digit == 6 {\n            result.push_str(\"vi\");\n            number -= 6;\n        } else if digit == 7 {\n            result.push_str(\"vii\");\n            number -= 7;\n        } else if digit == 8 {\n            result.push_str(\"viii\");\n            number -= 8;\n        } else if digit == 0 {\n            result.push_str(\"\");\n            number -= 0;\n        }\n        i += 1;\n    }\n    result"}
{"task_id": "HumanEval/157", "completion": "\n    let mut a = a;\n    let mut b = b;\n    let mut c = c;\n    a = a.abs();\n    b = b.abs();\n    c = c.abs();\n    a + b > c && b + c > a && c + a > b"}
{"task_id": "HumanEval/158", "completion": "\n    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word in words {\n        let mut count = 0;\n        let mut seen = HashSet::new();\n        for c in word.chars() {\n            if seen.contains(&c) {\n                break;\n            }\n            seen.insert(c);\n            count += 1;\n        }\n        if count > max_count {\n            max_word = word;\n            max_count = count;\n        }\n    }\n    max_word"}
{"task_id": "HumanEval/159", "completion": "\n    let mut total = number;\n    let mut left = remaining;\n    if need > remaining {\n        total += remaining;\n        left = 0;\n    } else {\n        total += need;\n        left -= need;\n    }\n    vec![total, left]"}
{"task_id": "HumanEval/160", "completion": "\n    let mut result = 0;\n    let mut operand_iter = operand.iter();\n    let mut operator_iter = operator.iter();\n    let mut operator_next = operator_iter.next();\n    let mut operand_next = operand_iter.next();\n    while let Some(op) = operator_next {\n        let operand_next = operand_next.unwrap();\n        match op {\n            \"+\" => result += operand_next,\n            \"-\" => result -= operand_next,\n            \"*\" => result *= operand_next,\n            \"//\" => result /= operand_next,\n            \"**\" => result = result.pow(operand_next as u32),\n            _ => panic!(\"Unknown operator\"),\n        }\n        operator_next = operator_iter.next();\n        operand_next = operand_iter.next();\n    }\n    result"}
{"task_id": "HumanEval/161", "completion": "\n    let mut result = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n            result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c);\n        }\n    }\n    result"}
{"task_id": "HumanEval/162", "completion": "\n    if text.is_empty() {\n        return None;\n    }\n\n    let mut hasher = md5::Md5::new();\n    hasher.update(text.as_bytes());\n    let digest = hasher.finalize();\n\n    let mut result = String::new();\n    for byte in digest.iter() {\n        result.push_str(&format!(\"{:02x}\", byte));\n    }\n\n    Some(result)"}
{"task_id": "HumanEval/163", "completion": "\n    let mut result = Vec::new();\n    let mut current = a;\n    while current <= b {\n        if current % 2 == 0 {\n            result.push(current);\n        }\n        current += 1;\n    }\n    result"}
